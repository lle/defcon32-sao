
defcon32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005418  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080054d8  080054d8  000064d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af8  08005af8  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005af8  08005af8  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005af8  08005af8  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000070  08005b70  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08005b70  00007428  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f436  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcd  00000000  00000000  000164ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000192a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8e  00000000  00000000  0001a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142e1  00000000  00000000  0001ad36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016125  00000000  00000000  0002f017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a8de  00000000  00000000  0004513c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afa1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc0  00000000  00000000  000afa60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b3720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054c0 	.word	0x080054c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080054c0 	.word	0x080054c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_lmul>:
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46ce      	mov	lr, r9
 800041c:	4699      	mov	r9, r3
 800041e:	0c03      	lsrs	r3, r0, #16
 8000420:	469c      	mov	ip, r3
 8000422:	0413      	lsls	r3, r2, #16
 8000424:	4647      	mov	r7, r8
 8000426:	0c1b      	lsrs	r3, r3, #16
 8000428:	001d      	movs	r5, r3
 800042a:	000e      	movs	r6, r1
 800042c:	4661      	mov	r1, ip
 800042e:	0404      	lsls	r4, r0, #16
 8000430:	0c24      	lsrs	r4, r4, #16
 8000432:	b580      	push	{r7, lr}
 8000434:	0007      	movs	r7, r0
 8000436:	0c10      	lsrs	r0, r2, #16
 8000438:	434b      	muls	r3, r1
 800043a:	4365      	muls	r5, r4
 800043c:	4341      	muls	r1, r0
 800043e:	4360      	muls	r0, r4
 8000440:	0c2c      	lsrs	r4, r5, #16
 8000442:	18c0      	adds	r0, r0, r3
 8000444:	1824      	adds	r4, r4, r0
 8000446:	468c      	mov	ip, r1
 8000448:	42a3      	cmp	r3, r4
 800044a:	d903      	bls.n	8000454 <__aeabi_lmul+0x3c>
 800044c:	2380      	movs	r3, #128	@ 0x80
 800044e:	025b      	lsls	r3, r3, #9
 8000450:	4698      	mov	r8, r3
 8000452:	44c4      	add	ip, r8
 8000454:	4649      	mov	r1, r9
 8000456:	4379      	muls	r1, r7
 8000458:	4356      	muls	r6, r2
 800045a:	0c23      	lsrs	r3, r4, #16
 800045c:	042d      	lsls	r5, r5, #16
 800045e:	0c2d      	lsrs	r5, r5, #16
 8000460:	1989      	adds	r1, r1, r6
 8000462:	4463      	add	r3, ip
 8000464:	0424      	lsls	r4, r4, #16
 8000466:	1960      	adds	r0, r4, r5
 8000468:	18c9      	adds	r1, r1, r3
 800046a:	bcc0      	pop	{r6, r7}
 800046c:	46b9      	mov	r9, r7
 800046e:	46b0      	mov	r8, r6
 8000470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)

08000474 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000478:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <HAL_Init+0x24>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <HAL_Init+0x24>)
 800047e:	2110      	movs	r1, #16
 8000480:	430a      	orrs	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000484:	2000      	movs	r0, #0
 8000486:	f000 f809 	bl	800049c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800048a:	f003 fdb9 	bl	8004000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800048e:	2300      	movs	r3, #0
}
 8000490:	0018      	movs	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	40022000 	.word	0x40022000

0800049c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <HAL_InitTick+0x5c>)
 80004a6:	681c      	ldr	r4, [r3, #0]
 80004a8:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <HAL_InitTick+0x60>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	0019      	movs	r1, r3
 80004ae:	23fa      	movs	r3, #250	@ 0xfa
 80004b0:	0098      	lsls	r0, r3, #2
 80004b2:	f7ff fe3b 	bl	800012c <__udivsi3>
 80004b6:	0003      	movs	r3, r0
 80004b8:	0019      	movs	r1, r3
 80004ba:	0020      	movs	r0, r4
 80004bc:	f7ff fe36 	bl	800012c <__udivsi3>
 80004c0:	0003      	movs	r3, r0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fce1 	bl	8000e8a <HAL_SYSTICK_Config>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e00f      	b.n	80004f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d80b      	bhi.n	80004ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	2301      	movs	r3, #1
 80004da:	425b      	negs	r3, r3
 80004dc:	2200      	movs	r2, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fcae 	bl	8000e40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_InitTick+0x64>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e000      	b.n	80004f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b003      	add	sp, #12
 80004f6:	bd90      	pop	{r4, r7, pc}
 80004f8:	20000010 	.word	0x20000010
 80004fc:	20000004 	.word	0x20000004
 8000500:	20000000 	.word	0x20000000

08000504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <HAL_IncTick+0x1c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	001a      	movs	r2, r3
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <HAL_IncTick+0x20>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	18d2      	adds	r2, r2, r3
 8000514:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <HAL_IncTick+0x20>)
 8000516:	601a      	str	r2, [r3, #0]
}
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	20000004 	.word	0x20000004
 8000524:	2000008c 	.word	0x2000008c

08000528 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  return uwTick;
 800052c:	4b02      	ldr	r3, [pc, #8]	@ (8000538 <HAL_GetTick+0x10>)
 800052e:	681b      	ldr	r3, [r3, #0]
}
 8000530:	0018      	movs	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	2000008c 	.word	0x2000008c

0800053c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000544:	f7ff fff0 	bl	8000528 <HAL_GetTick>
 8000548:	0003      	movs	r3, r0
 800054a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3301      	adds	r3, #1
 8000554:	d005      	beq.n	8000562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000556:	4b0a      	ldr	r3, [pc, #40]	@ (8000580 <HAL_Delay+0x44>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	001a      	movs	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	189b      	adds	r3, r3, r2
 8000560:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	f7ff ffe0 	bl	8000528 <HAL_GetTick>
 8000568:	0002      	movs	r2, r0
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	429a      	cmp	r2, r3
 8000572:	d8f7      	bhi.n	8000564 <HAL_Delay+0x28>
  {
  }
}
 8000574:	46c0      	nop			@ (mov r8, r8)
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b004      	add	sp, #16
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	20000004 	.word	0x20000004

08000584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800058c:	230f      	movs	r3, #15
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e125      	b.n	80007ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10a      	bne.n	80005c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2234      	movs	r2, #52	@ 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 f9ba 	bl	8002934 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005c4:	2210      	movs	r2, #16
 80005c6:	4013      	ands	r3, r2
 80005c8:	d000      	beq.n	80005cc <HAL_ADC_Init+0x48>
 80005ca:	e103      	b.n	80007d4 <HAL_ADC_Init+0x250>
 80005cc:	230f      	movs	r3, #15
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d000      	beq.n	80005d8 <HAL_ADC_Init+0x54>
 80005d6:	e0fd      	b.n	80007d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	2204      	movs	r2, #4
 80005e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80005e2:	d000      	beq.n	80005e6 <HAL_ADC_Init+0x62>
 80005e4:	e0f6      	b.n	80007d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005ea:	4a83      	ldr	r2, [pc, #524]	@ (80007f8 <HAL_ADC_Init+0x274>)
 80005ec:	4013      	ands	r3, r2
 80005ee:	2202      	movs	r2, #2
 80005f0:	431a      	orrs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	2203      	movs	r2, #3
 80005fe:	4013      	ands	r3, r2
 8000600:	2b01      	cmp	r3, #1
 8000602:	d112      	bne.n	800062a <HAL_ADC_Init+0xa6>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	2b01      	cmp	r3, #1
 8000610:	d009      	beq.n	8000626 <HAL_ADC_Init+0xa2>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68da      	ldr	r2, [r3, #12]
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	401a      	ands	r2, r3
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	429a      	cmp	r2, r3
 8000624:	d101      	bne.n	800062a <HAL_ADC_Init+0xa6>
 8000626:	2301      	movs	r3, #1
 8000628:	e000      	b.n	800062c <HAL_ADC_Init+0xa8>
 800062a:	2300      	movs	r3, #0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d116      	bne.n	800065e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	2218      	movs	r2, #24
 8000638:	4393      	bics	r3, r2
 800063a:	0019      	movs	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	689a      	ldr	r2, [r3, #8]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	430a      	orrs	r2, r1
 8000646:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	0899      	lsrs	r1, r3, #2
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	430a      	orrs	r2, r1
 800065c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4964      	ldr	r1, [pc, #400]	@ (80007fc <HAL_ADC_Init+0x278>)
 800066a:	400a      	ands	r2, r1
 800066c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7e1b      	ldrb	r3, [r3, #24]
 8000672:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7e5b      	ldrb	r3, [r3, #25]
 8000678:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800067a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7e9b      	ldrb	r3, [r3, #26]
 8000680:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000682:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000688:	2b01      	cmp	r3, #1
 800068a:	d002      	beq.n	8000692 <HAL_ADC_Init+0x10e>
 800068c:	2380      	movs	r3, #128	@ 0x80
 800068e:	015b      	lsls	r3, r3, #5
 8000690:	e000      	b.n	8000694 <HAL_ADC_Init+0x110>
 8000692:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000694:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800069a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d101      	bne.n	80006a8 <HAL_ADC_Init+0x124>
 80006a4:	2304      	movs	r3, #4
 80006a6:	e000      	b.n	80006aa <HAL_ADC_Init+0x126>
 80006a8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80006aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2124      	movs	r1, #36	@ 0x24
 80006b0:	5c5b      	ldrb	r3, [r3, r1]
 80006b2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80006b4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7edb      	ldrb	r3, [r3, #27]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d115      	bne.n	80006f0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7e9b      	ldrb	r3, [r3, #26]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d105      	bne.n	80006d8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	0252      	lsls	r2, r2, #9
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	e00b      	b.n	80006f0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006dc:	2220      	movs	r2, #32
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e8:	2201      	movs	r2, #1
 80006ea:	431a      	orrs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	69da      	ldr	r2, [r3, #28]
 80006f4:	23c2      	movs	r3, #194	@ 0xc2
 80006f6:	33ff      	adds	r3, #255	@ 0xff
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d007      	beq.n	800070c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000704:	4313      	orrs	r3, r2
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	4313      	orrs	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68d9      	ldr	r1, [r3, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	430a      	orrs	r2, r1
 800071a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	429a      	cmp	r2, r3
 8000726:	d01b      	beq.n	8000760 <HAL_ADC_Init+0x1dc>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072c:	2b01      	cmp	r3, #1
 800072e:	d017      	beq.n	8000760 <HAL_ADC_Init+0x1dc>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000734:	2b02      	cmp	r3, #2
 8000736:	d013      	beq.n	8000760 <HAL_ADC_Init+0x1dc>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073c:	2b03      	cmp	r3, #3
 800073e:	d00f      	beq.n	8000760 <HAL_ADC_Init+0x1dc>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000744:	2b04      	cmp	r3, #4
 8000746:	d00b      	beq.n	8000760 <HAL_ADC_Init+0x1dc>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074c:	2b05      	cmp	r3, #5
 800074e:	d007      	beq.n	8000760 <HAL_ADC_Init+0x1dc>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000754:	2b06      	cmp	r3, #6
 8000756:	d003      	beq.n	8000760 <HAL_ADC_Init+0x1dc>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800075c:	2b07      	cmp	r3, #7
 800075e:	d112      	bne.n	8000786 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2107      	movs	r1, #7
 800076c:	438a      	bics	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6959      	ldr	r1, [r3, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077a:	2207      	movs	r2, #7
 800077c:	401a      	ands	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	430a      	orrs	r2, r1
 8000784:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a1c      	ldr	r2, [pc, #112]	@ (8000800 <HAL_ADC_Init+0x27c>)
 800078e:	4013      	ands	r3, r2
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	429a      	cmp	r2, r3
 8000794:	d10b      	bne.n	80007ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007a0:	2203      	movs	r2, #3
 80007a2:	4393      	bics	r3, r2
 80007a4:	2201      	movs	r2, #1
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80007ac:	e01c      	b.n	80007e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007b2:	2212      	movs	r2, #18
 80007b4:	4393      	bics	r3, r2
 80007b6:	2210      	movs	r2, #16
 80007b8:	431a      	orrs	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007c2:	2201      	movs	r2, #1
 80007c4:	431a      	orrs	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80007ca:	230f      	movs	r3, #15
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80007d2:	e009      	b.n	80007e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007d8:	2210      	movs	r2, #16
 80007da:	431a      	orrs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007e8:	230f      	movs	r3, #15
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
}
 80007ee:	0018      	movs	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b004      	add	sp, #16
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	fffffefd 	.word	0xfffffefd
 80007fc:	fffe0219 	.word	0xfffe0219
 8000800:	833fffe7 	.word	0x833fffe7

08000804 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800080c:	230f      	movs	r3, #15
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	2204      	movs	r2, #4
 800081c:	4013      	ands	r3, r2
 800081e:	d138      	bne.n	8000892 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2234      	movs	r2, #52	@ 0x34
 8000824:	5c9b      	ldrb	r3, [r3, r2]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d101      	bne.n	800082e <HAL_ADC_Start+0x2a>
 800082a:	2302      	movs	r3, #2
 800082c:	e038      	b.n	80008a0 <HAL_ADC_Start+0x9c>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2234      	movs	r2, #52	@ 0x34
 8000832:	2101      	movs	r1, #1
 8000834:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7e5b      	ldrb	r3, [r3, #25]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d007      	beq.n	800084e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800083e:	230f      	movs	r3, #15
 8000840:	18fc      	adds	r4, r7, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f9cb 	bl	8000be0 <ADC_Enable>
 800084a:	0003      	movs	r3, r0
 800084c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800084e:	230f      	movs	r3, #15
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d120      	bne.n	800089a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800085c:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <HAL_ADC_Start+0xa4>)
 800085e:	4013      	ands	r3, r2
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	431a      	orrs	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2234      	movs	r2, #52	@ 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	221c      	movs	r2, #28
 800087e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2104      	movs	r1, #4
 800088c:	430a      	orrs	r2, r1
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	e003      	b.n	800089a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000892:	230f      	movs	r3, #15
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2202      	movs	r2, #2
 8000898:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800089a:	230f      	movs	r3, #15
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	781b      	ldrb	r3, [r3, #0]
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b005      	add	sp, #20
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	fffff0fe 	.word	0xfffff0fe

080008ac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	2b08      	cmp	r3, #8
 80008bc:	d102      	bne.n	80008c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80008be:	2308      	movs	r3, #8
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e014      	b.n	80008ee <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d10b      	bne.n	80008ea <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008d6:	2220      	movs	r2, #32
 80008d8:	431a      	orrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2234      	movs	r2, #52	@ 0x34
 80008e2:	2100      	movs	r1, #0
 80008e4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e071      	b.n	80009ce <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80008ea:	230c      	movs	r3, #12
 80008ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80008ee:	f7ff fe1b 	bl	8000528 <HAL_GetTick>
 80008f2:	0003      	movs	r3, r0
 80008f4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80008f6:	e01f      	b.n	8000938 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	d01c      	beq.n	8000938 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d007      	beq.n	8000914 <HAL_ADC_PollForConversion+0x68>
 8000904:	f7ff fe10 	bl	8000528 <HAL_GetTick>
 8000908:	0002      	movs	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d211      	bcs.n	8000938 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4013      	ands	r3, r2
 800091e:	d10b      	bne.n	8000938 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000924:	2204      	movs	r2, #4
 8000926:	431a      	orrs	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2234      	movs	r2, #52	@ 0x34
 8000930:	2100      	movs	r1, #0
 8000932:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e04a      	b.n	80009ce <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4013      	ands	r3, r2
 8000942:	d0d9      	beq.n	80008f8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	431a      	orrs	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	23c0      	movs	r3, #192	@ 0xc0
 800095a:	011b      	lsls	r3, r3, #4
 800095c:	4013      	ands	r3, r2
 800095e:	d12d      	bne.n	80009bc <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000964:	2b00      	cmp	r3, #0
 8000966:	d129      	bne.n	80009bc <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2208      	movs	r2, #8
 8000970:	4013      	ands	r3, r2
 8000972:	2b08      	cmp	r3, #8
 8000974:	d122      	bne.n	80009bc <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	2204      	movs	r2, #4
 800097e:	4013      	ands	r3, r2
 8000980:	d110      	bne.n	80009a4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	210c      	movs	r1, #12
 800098e:	438a      	bics	r2, r1
 8000990:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <HAL_ADC_PollForConversion+0x12c>)
 8000998:	4013      	ands	r3, r2
 800099a:	2201      	movs	r2, #1
 800099c:	431a      	orrs	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80009a2:	e00b      	b.n	80009bc <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009a8:	2220      	movs	r2, #32
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009b4:	2201      	movs	r2, #1
 80009b6:	431a      	orrs	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7e1b      	ldrb	r3, [r3, #24]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d103      	bne.n	80009cc <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	220c      	movs	r2, #12
 80009ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	fffffefe 	.word	0xfffffefe

080009dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80009ea:	0018      	movs	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009fe:	230f      	movs	r3, #15
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a0e:	2380      	movs	r3, #128	@ 0x80
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d011      	beq.n	8000a3a <HAL_ADC_ConfigChannel+0x46>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d00d      	beq.n	8000a3a <HAL_ADC_ConfigChannel+0x46>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d009      	beq.n	8000a3a <HAL_ADC_ConfigChannel+0x46>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d005      	beq.n	8000a3a <HAL_ADC_ConfigChannel+0x46>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d001      	beq.n	8000a3a <HAL_ADC_ConfigChannel+0x46>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2234      	movs	r2, #52	@ 0x34
 8000a3e:	5c9b      	ldrb	r3, [r3, r2]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d101      	bne.n	8000a48 <HAL_ADC_ConfigChannel+0x54>
 8000a44:	2302      	movs	r3, #2
 8000a46:	e0bb      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x1cc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2234      	movs	r2, #52	@ 0x34
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2204      	movs	r2, #4
 8000a58:	4013      	ands	r3, r2
 8000a5a:	d000      	beq.n	8000a5e <HAL_ADC_ConfigChannel+0x6a>
 8000a5c:	e09f      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	4a59      	ldr	r2, [pc, #356]	@ (8000bc8 <HAL_ADC_ConfigChannel+0x1d4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d100      	bne.n	8000a6a <HAL_ADC_ConfigChannel+0x76>
 8000a68:	e077      	b.n	8000b5a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2201      	movs	r2, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a84:	2380      	movs	r3, #128	@ 0x80
 8000a86:	055b      	lsls	r3, r3, #21
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d037      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d033      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d02f      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d02b      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d027      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d023      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab8:	2b06      	cmp	r3, #6
 8000aba:	d01f      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac0:	2b07      	cmp	r3, #7
 8000ac2:	d01b      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	2107      	movs	r1, #7
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d012      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2107      	movs	r1, #7
 8000ae2:	438a      	bics	r2, r1
 8000ae4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6959      	ldr	r1, [r3, #20]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	2207      	movs	r2, #7
 8000af2:	401a      	ands	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b10      	cmp	r3, #16
 8000b02:	d003      	beq.n	8000b0c <HAL_ADC_ConfigChannel+0x118>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b11      	cmp	r3, #17
 8000b0a:	d152      	bne.n	8000bb2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bcc <HAL_ADC_ConfigChannel+0x1d8>)
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b10      	cmp	r3, #16
 8000b16:	d102      	bne.n	8000b1e <HAL_ADC_ConfigChannel+0x12a>
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	e001      	b.n	8000b22 <HAL_ADC_ConfigChannel+0x12e>
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	03db      	lsls	r3, r3, #15
 8000b22:	4a2a      	ldr	r2, [pc, #168]	@ (8000bcc <HAL_ADC_ConfigChannel+0x1d8>)
 8000b24:	430b      	orrs	r3, r1
 8000b26:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b10      	cmp	r3, #16
 8000b2e:	d140      	bne.n	8000bb2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b30:	4b27      	ldr	r3, [pc, #156]	@ (8000bd0 <HAL_ADC_ConfigChannel+0x1dc>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4927      	ldr	r1, [pc, #156]	@ (8000bd4 <HAL_ADC_ConfigChannel+0x1e0>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff faf8 	bl	800012c <__udivsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	189b      	adds	r3, r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b4a:	e002      	b.n	8000b52 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f9      	bne.n	8000b4c <HAL_ADC_ConfigChannel+0x158>
 8000b58:	e02b      	b.n	8000bb2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	4099      	lsls	r1, r3
 8000b68:	000b      	movs	r3, r1
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	400a      	ands	r2, r1
 8000b72:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b10      	cmp	r3, #16
 8000b7a:	d003      	beq.n	8000b84 <HAL_ADC_ConfigChannel+0x190>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b11      	cmp	r3, #17
 8000b82:	d116      	bne.n	8000bb2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_ADC_ConfigChannel+0x1d8>)
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b10      	cmp	r3, #16
 8000b8e:	d101      	bne.n	8000b94 <HAL_ADC_ConfigChannel+0x1a0>
 8000b90:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b92:	e000      	b.n	8000b96 <HAL_ADC_ConfigChannel+0x1a2>
 8000b94:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <HAL_ADC_ConfigChannel+0x1e8>)
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_ADC_ConfigChannel+0x1d8>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e009      	b.n	8000bb2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000baa:	230f      	movs	r3, #15
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2234      	movs	r2, #52	@ 0x34
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	00001001 	.word	0x00001001
 8000bcc:	40012708 	.word	0x40012708
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	000f4240 	.word	0x000f4240
 8000bd8:	ff7fffff 	.word	0xff7fffff
 8000bdc:	ffbfffff 	.word	0xffbfffff

08000be0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d112      	bne.n	8000c24 <ADC_Enable+0x44>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d009      	beq.n	8000c20 <ADC_Enable+0x40>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	401a      	ands	r2, r3
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d101      	bne.n	8000c24 <ADC_Enable+0x44>
 8000c20:	2301      	movs	r3, #1
 8000c22:	e000      	b.n	8000c26 <ADC_Enable+0x46>
 8000c24:	2300      	movs	r3, #0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d152      	bne.n	8000cd0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	4a2a      	ldr	r2, [pc, #168]	@ (8000cdc <ADC_Enable+0xfc>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	d00d      	beq.n	8000c52 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c46:	2201      	movs	r2, #1
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e03f      	b.n	8000cd2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <ADC_Enable+0x100>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	491f      	ldr	r1, [pc, #124]	@ (8000ce4 <ADC_Enable+0x104>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff fa5f 	bl	800012c <__udivsi3>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c72:	e002      	b.n	8000c7a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f9      	bne.n	8000c74 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c80:	f7ff fc52 	bl	8000528 <HAL_GetTick>
 8000c84:	0003      	movs	r3, r0
 8000c86:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c88:	e01b      	b.n	8000cc2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c8a:	f7ff fc4d 	bl	8000528 <HAL_GetTick>
 8000c8e:	0002      	movs	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d914      	bls.n	8000cc2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d00d      	beq.n	8000cc2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000caa:	2210      	movs	r2, #16
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e007      	b.n	8000cd2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d1dc      	bne.n	8000c8a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	80000017 	.word	0x80000017
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	000f4240 	.word	0x000f4240

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	0002      	movs	r2, r0
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cfa:	d809      	bhi.n	8000d10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	001a      	movs	r2, r3
 8000d02:	231f      	movs	r3, #31
 8000d04:	401a      	ands	r2, r3
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <__NVIC_EnableIRQ+0x30>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
  }
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d30:	d828      	bhi.n	8000d84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d32:	4a2f      	ldr	r2, [pc, #188]	@ (8000df0 <__NVIC_SetPriority+0xd4>)
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	33c0      	adds	r3, #192	@ 0xc0
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	589b      	ldr	r3, [r3, r2]
 8000d42:	1dfa      	adds	r2, r7, #7
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	0011      	movs	r1, r2
 8000d48:	2203      	movs	r2, #3
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	21ff      	movs	r1, #255	@ 0xff
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	401a      	ands	r2, r3
 8000d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	22ff      	movs	r2, #255	@ 0xff
 8000d60:	401a      	ands	r2, r3
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0018      	movs	r0, r3
 8000d68:	2303      	movs	r3, #3
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	481f      	ldr	r0, [pc, #124]	@ (8000df0 <__NVIC_SetPriority+0xd4>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	33c0      	adds	r3, #192	@ 0xc0
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d82:	e031      	b.n	8000de8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <__NVIC_SetPriority+0xd8>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	400b      	ands	r3, r1
 8000d90:	3b08      	subs	r3, #8
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3306      	adds	r3, #6
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	18d3      	adds	r3, r2, r3
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	1dfa      	adds	r2, r7, #7
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	0011      	movs	r1, r2
 8000da4:	2203      	movs	r2, #3
 8000da6:	400a      	ands	r2, r1
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	21ff      	movs	r1, #255	@ 0xff
 8000dac:	4091      	lsls	r1, r2
 8000dae:	000a      	movs	r2, r1
 8000db0:	43d2      	mvns	r2, r2
 8000db2:	401a      	ands	r2, r3
 8000db4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	019b      	lsls	r3, r3, #6
 8000dba:	22ff      	movs	r2, #255	@ 0xff
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	4003      	ands	r3, r0
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <__NVIC_SetPriority+0xd8>)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	001c      	movs	r4, r3
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	4023      	ands	r3, r4
 8000dd8:	3b08      	subs	r3, #8
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	3306      	adds	r3, #6
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	18c3      	adds	r3, r0, r3
 8000de4:	3304      	adds	r3, #4
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b003      	add	sp, #12
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	045b      	lsls	r3, r3, #17
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d301      	bcc.n	8000e10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e010      	b.n	8000e32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <SysTick_Config+0x44>)
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	3a01      	subs	r2, #1
 8000e16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e18:	2301      	movs	r3, #1
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff ff7c 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <SysTick_Config+0x44>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <SysTick_Config+0x44>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	1c02      	adds	r2, r0, #0
 8000e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff5d 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	0002      	movs	r2, r0
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff ff33 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ffaf 	bl	8000df8 <SysTick_Config>
 8000e9a:	0003      	movs	r3, r0
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e14f      	b.n	8001154 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <HAL_GPIO_Init+0x28>
 8000eca:	e140      	b.n	800114e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d017      	beq.n	8000f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2107      	movs	r1, #7
 8000fba:	400b      	ands	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	23c0      	movs	r3, #192	@ 0xc0
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	4013      	ands	r3, r2
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x174>
 8001016:	e09a      	b.n	800114e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b54      	ldr	r3, [pc, #336]	@ (800116c <HAL_GPIO_Init+0x2c8>)
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	4b53      	ldr	r3, [pc, #332]	@ (800116c <HAL_GPIO_Init+0x2c8>)
 800101e:	2101      	movs	r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	619a      	str	r2, [r3, #24]
 8001024:	4b51      	ldr	r3, [pc, #324]	@ (800116c <HAL_GPIO_Init+0x2c8>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	2201      	movs	r2, #1
 800102a:	4013      	ands	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001030:	4a4f      	ldr	r2, [pc, #316]	@ (8001170 <HAL_GPIO_Init+0x2cc>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	589b      	ldr	r3, [r3, r2]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2203      	movs	r2, #3
 8001042:	4013      	ands	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	2390      	movs	r3, #144	@ 0x90
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	429a      	cmp	r2, r3
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x1e2>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a44      	ldr	r2, [pc, #272]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x1de>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a43      	ldr	r2, [pc, #268]	@ (8001178 <HAL_GPIO_Init+0x2d4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x1da>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a42      	ldr	r2, [pc, #264]	@ (800117c <HAL_GPIO_Init+0x2d8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x1d6>
 8001076:	2303      	movs	r3, #3
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x1e4>
 800107a:	2305      	movs	r3, #5
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x1e4>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x1e4>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x1e4>
 8001086:	2300      	movs	r3, #0
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	2103      	movs	r1, #3
 800108c:	400a      	ands	r2, r1
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001098:	4935      	ldr	r1, [pc, #212]	@ (8001170 <HAL_GPIO_Init+0x2cc>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	035b      	lsls	r3, r3, #13
 80010be:	4013      	ands	r3, r2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43da      	mvns	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	039b      	lsls	r3, r3, #14
 80010e8:	4013      	ands	r3, r2
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f4:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	025b      	lsls	r3, r3, #9
 800113c:	4013      	ands	r3, r2
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_GPIO_Init+0x2dc>)
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	40da      	lsrs	r2, r3
 800115c:	1e13      	subs	r3, r2, #0
 800115e:	d000      	beq.n	8001162 <HAL_GPIO_Init+0x2be>
 8001160:	e6a8      	b.n	8000eb4 <HAL_GPIO_Init+0x10>
  } 
}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b006      	add	sp, #24
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000800 	.word	0x48000800
 800117c:	48000c00 	.word	0x48000c00
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	000a      	movs	r2, r1
 800118e:	1cbb      	adds	r3, r7, #2
 8001190:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	1cba      	adds	r2, r7, #2
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	4013      	ands	r3, r2
 800119c:	d004      	beq.n	80011a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800119e:	230f      	movs	r3, #15
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e003      	b.n	80011b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011b0:	230f      	movs	r3, #15
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
  }
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	0008      	movs	r0, r1
 80011c8:	0011      	movs	r1, r2
 80011ca:	1cbb      	adds	r3, r7, #2
 80011cc:	1c02      	adds	r2, r0, #0
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	1c7b      	adds	r3, r7, #1
 80011d2:	1c0a      	adds	r2, r1, #0
 80011d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d6:	1c7b      	adds	r3, r7, #1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011de:	1cbb      	adds	r3, r7, #2
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e6:	e003      	b.n	80011f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e8:	1cbb      	adds	r3, r7, #2
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e301      	b.n	800180e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x1e>
 8001214:	e08d      	b.n	8001332 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001216:	4bc3      	ldr	r3, [pc, #780]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	220c      	movs	r2, #12
 800121c:	4013      	ands	r3, r2
 800121e:	2b04      	cmp	r3, #4
 8001220:	d00e      	beq.n	8001240 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001222:	4bc0      	ldr	r3, [pc, #768]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	220c      	movs	r2, #12
 8001228:	4013      	ands	r3, r2
 800122a:	2b08      	cmp	r3, #8
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x64>
 800122e:	4bbd      	ldr	r3, [pc, #756]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	401a      	ands	r2, r3
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	429a      	cmp	r2, r3
 800123e:	d10d      	bne.n	800125c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4bb8      	ldr	r3, [pc, #736]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	029b      	lsls	r3, r3, #10
 8001248:	4013      	ands	r3, r2
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x56>
 800124c:	e070      	b.n	8001330 <HAL_RCC_OscConfig+0x138>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d000      	beq.n	8001258 <HAL_RCC_OscConfig+0x60>
 8001256:	e06b      	b.n	8001330 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e2d8      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d107      	bne.n	8001274 <HAL_RCC_OscConfig+0x7c>
 8001264:	4baf      	ldr	r3, [pc, #700]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4bae      	ldr	r3, [pc, #696]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800126a:	2180      	movs	r1, #128	@ 0x80
 800126c:	0249      	lsls	r1, r1, #9
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e02f      	b.n	80012d4 <HAL_RCC_OscConfig+0xdc>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10c      	bne.n	8001296 <HAL_RCC_OscConfig+0x9e>
 800127c:	4ba9      	ldr	r3, [pc, #676]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4ba8      	ldr	r3, [pc, #672]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001282:	49a9      	ldr	r1, [pc, #676]	@ (8001528 <HAL_RCC_OscConfig+0x330>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	4ba6      	ldr	r3, [pc, #664]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4ba5      	ldr	r3, [pc, #660]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800128e:	49a7      	ldr	r1, [pc, #668]	@ (800152c <HAL_RCC_OscConfig+0x334>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e01e      	b.n	80012d4 <HAL_RCC_OscConfig+0xdc>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b05      	cmp	r3, #5
 800129c:	d10e      	bne.n	80012bc <HAL_RCC_OscConfig+0xc4>
 800129e:	4ba1      	ldr	r3, [pc, #644]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4ba0      	ldr	r3, [pc, #640]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012a4:	2180      	movs	r1, #128	@ 0x80
 80012a6:	02c9      	lsls	r1, r1, #11
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b9c      	ldr	r3, [pc, #624]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	0249      	lsls	r1, r1, #9
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0xdc>
 80012bc:	4b99      	ldr	r3, [pc, #612]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b98      	ldr	r3, [pc, #608]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	4999      	ldr	r1, [pc, #612]	@ (8001528 <HAL_RCC_OscConfig+0x330>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	4b96      	ldr	r3, [pc, #600]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b95      	ldr	r3, [pc, #596]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	4997      	ldr	r1, [pc, #604]	@ (800152c <HAL_RCC_OscConfig+0x334>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d014      	beq.n	8001306 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff f924 	bl	8000528 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff f91f 	bl	8000528 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	@ 0x64
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e28a      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	029b      	lsls	r3, r3, #10
 8001300:	4013      	ands	r3, r2
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0xee>
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff f90f 	bl	8000528 <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff f90a 	bl	8000528 <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e275      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b80      	ldr	r3, [pc, #512]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	@ 0x80
 8001328:	029b      	lsls	r3, r3, #10
 800132a:	4013      	ands	r3, r2
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x118>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d100      	bne.n	800133e <HAL_RCC_OscConfig+0x146>
 800133c:	e069      	b.n	8001412 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800133e:	4b79      	ldr	r3, [pc, #484]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	220c      	movs	r2, #12
 8001344:	4013      	ands	r3, r2
 8001346:	d00b      	beq.n	8001360 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001348:	4b76      	ldr	r3, [pc, #472]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	220c      	movs	r2, #12
 800134e:	4013      	ands	r3, r2
 8001350:	2b08      	cmp	r3, #8
 8001352:	d11c      	bne.n	800138e <HAL_RCC_OscConfig+0x196>
 8001354:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	4013      	ands	r3, r2
 800135e:	d116      	bne.n	800138e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001360:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x17e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e24b      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b6b      	ldr	r3, [pc, #428]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	22f8      	movs	r2, #248	@ 0xf8
 800137c:	4393      	bics	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00da      	lsls	r2, r3, #3
 8001386:	4b67      	ldr	r3, [pc, #412]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138c:	e041      	b.n	8001412 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d024      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001396:	4b63      	ldr	r3, [pc, #396]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b62      	ldr	r3, [pc, #392]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800139c:	2101      	movs	r1, #1
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff f8c1 	bl	8000528 <HAL_GetTick>
 80013a6:	0003      	movs	r3, r0
 80013a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff f8bc 	bl	8000528 <HAL_GetTick>
 80013b0:	0002      	movs	r2, r0
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e227      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	4b59      	ldr	r3, [pc, #356]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2202      	movs	r2, #2
 80013c4:	4013      	ands	r3, r2
 80013c6:	d0f1      	beq.n	80013ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b56      	ldr	r3, [pc, #344]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	22f8      	movs	r2, #248	@ 0xf8
 80013ce:	4393      	bics	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00da      	lsls	r2, r3, #3
 80013d8:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e018      	b.n	8001412 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e0:	4b50      	ldr	r3, [pc, #320]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	438a      	bics	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff f89c 	bl	8000528 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff f897 	bl	8000528 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e202      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001408:	4b46      	ldr	r3, [pc, #280]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2202      	movs	r2, #2
 800140e:	4013      	ands	r3, r2
 8001410:	d1f1      	bne.n	80013f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2208      	movs	r2, #8
 8001418:	4013      	ands	r3, r2
 800141a:	d036      	beq.n	800148a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d019      	beq.n	8001458 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001424:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001428:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800142a:	2101      	movs	r1, #1
 800142c:	430a      	orrs	r2, r1
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff f87a 	bl	8000528 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff f875 	bl	8000528 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1e0      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144c:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800144e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001450:	2202      	movs	r2, #2
 8001452:	4013      	ands	r3, r2
 8001454:	d0f1      	beq.n	800143a <HAL_RCC_OscConfig+0x242>
 8001456:	e018      	b.n	800148a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800145a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800145c:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff f860 	bl	8000528 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff f85b 	bl	8000528 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1c6      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d1f1      	bne.n	800146e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2204      	movs	r2, #4
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x29e>
 8001494:	e0b4      	b.n	8001600 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	201f      	movs	r0, #31
 8001498:	183b      	adds	r3, r7, r0
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	055b      	lsls	r3, r3, #21
 80014a6:	4013      	ands	r3, r2
 80014a8:	d110      	bne.n	80014cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	0549      	lsls	r1, r1, #21
 80014b4:	430a      	orrs	r2, r1
 80014b6:	61da      	str	r2, [r3, #28]
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c6:	183b      	adds	r3, r7, r0
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <HAL_RCC_OscConfig+0x338>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	d11a      	bne.n	800150e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_RCC_OscConfig+0x338>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_RCC_OscConfig+0x338>)
 80014de:	2180      	movs	r1, #128	@ 0x80
 80014e0:	0049      	lsls	r1, r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f81f 	bl	8000528 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f0:	f7ff f81a 	bl	8000528 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	@ 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e185      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_RCC_OscConfig+0x338>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4013      	ands	r3, r2
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10e      	bne.n	8001534 <HAL_RCC_OscConfig+0x33c>
 8001516:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001518:	6a1a      	ldr	r2, [r3, #32]
 800151a:	4b02      	ldr	r3, [pc, #8]	@ (8001524 <HAL_RCC_OscConfig+0x32c>)
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	621a      	str	r2, [r3, #32]
 8001522:	e035      	b.n	8001590 <HAL_RCC_OscConfig+0x398>
 8001524:	40021000 	.word	0x40021000
 8001528:	fffeffff 	.word	0xfffeffff
 800152c:	fffbffff 	.word	0xfffbffff
 8001530:	40007000 	.word	0x40007000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x35e>
 800153c:	4bb6      	ldr	r3, [pc, #728]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800153e:	6a1a      	ldr	r2, [r3, #32]
 8001540:	4bb5      	ldr	r3, [pc, #724]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	621a      	str	r2, [r3, #32]
 8001548:	4bb3      	ldr	r3, [pc, #716]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	4bb2      	ldr	r3, [pc, #712]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800154e:	2104      	movs	r1, #4
 8001550:	438a      	bics	r2, r1
 8001552:	621a      	str	r2, [r3, #32]
 8001554:	e01c      	b.n	8001590 <HAL_RCC_OscConfig+0x398>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b05      	cmp	r3, #5
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x380>
 800155e:	4bae      	ldr	r3, [pc, #696]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001560:	6a1a      	ldr	r2, [r3, #32]
 8001562:	4bad      	ldr	r3, [pc, #692]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001564:	2104      	movs	r1, #4
 8001566:	430a      	orrs	r2, r1
 8001568:	621a      	str	r2, [r3, #32]
 800156a:	4bab      	ldr	r3, [pc, #684]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	4baa      	ldr	r3, [pc, #680]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	621a      	str	r2, [r3, #32]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0x398>
 8001578:	4ba7      	ldr	r3, [pc, #668]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800157a:	6a1a      	ldr	r2, [r3, #32]
 800157c:	4ba6      	ldr	r3, [pc, #664]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800157e:	2101      	movs	r1, #1
 8001580:	438a      	bics	r2, r1
 8001582:	621a      	str	r2, [r3, #32]
 8001584:	4ba4      	ldr	r3, [pc, #656]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	4ba3      	ldr	r3, [pc, #652]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800158a:	2104      	movs	r1, #4
 800158c:	438a      	bics	r2, r1
 800158e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d014      	beq.n	80015c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7fe ffc6 	bl	8000528 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	e009      	b.n	80015b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7fe ffc1 	bl	8000528 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4a9b      	ldr	r2, [pc, #620]	@ (800181c <HAL_RCC_OscConfig+0x624>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e12b      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b6:	4b98      	ldr	r3, [pc, #608]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3aa>
 80015c0:	e013      	b.n	80015ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7fe ffb1 	bl	8000528 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	e009      	b.n	80015e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7fe ffac 	bl	8000528 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4a91      	ldr	r2, [pc, #580]	@ (800181c <HAL_RCC_OscConfig+0x624>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e116      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e0:	4b8d      	ldr	r3, [pc, #564]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ea:	231f      	movs	r3, #31
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f4:	4b88      	ldr	r3, [pc, #544]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	4b87      	ldr	r3, [pc, #540]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80015fa:	4989      	ldr	r1, [pc, #548]	@ (8001820 <HAL_RCC_OscConfig+0x628>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2210      	movs	r2, #16
 8001606:	4013      	ands	r3, r2
 8001608:	d063      	beq.n	80016d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d12a      	bne.n	8001668 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001612:	4b81      	ldr	r3, [pc, #516]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001616:	4b80      	ldr	r3, [pc, #512]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800161e:	4b7e      	ldr	r3, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001622:	4b7d      	ldr	r3, [pc, #500]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7fe ff7d 	bl	8000528 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001634:	f7fe ff78 	bl	8000528 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0e3      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001646:	4b74      	ldr	r3, [pc, #464]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d0f1      	beq.n	8001634 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001650:	4b71      	ldr	r3, [pc, #452]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001654:	22f8      	movs	r2, #248	@ 0xf8
 8001656:	4393      	bics	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	00da      	lsls	r2, r3, #3
 8001660:	4b6d      	ldr	r3, [pc, #436]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001662:	430a      	orrs	r2, r1
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
 8001666:	e034      	b.n	80016d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	3305      	adds	r3, #5
 800166e:	d111      	bne.n	8001694 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001670:	4b69      	ldr	r3, [pc, #420]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001674:	4b68      	ldr	r3, [pc, #416]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001676:	2104      	movs	r1, #4
 8001678:	438a      	bics	r2, r1
 800167a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800167c:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001680:	22f8      	movs	r2, #248	@ 0xf8
 8001682:	4393      	bics	r3, r2
 8001684:	0019      	movs	r1, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	00da      	lsls	r2, r3, #3
 800168c:	4b62      	ldr	r3, [pc, #392]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
 8001692:	e01e      	b.n	80016d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001694:	4b60      	ldr	r3, [pc, #384]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001698:	4b5f      	ldr	r3, [pc, #380]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800169a:	2104      	movs	r1, #4
 800169c:	430a      	orrs	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80016a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	438a      	bics	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7fe ff3c 	bl	8000528 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016b6:	f7fe ff37 	bl	8000528 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0a2      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016c8:	4b53      	ldr	r3, [pc, #332]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80016ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f1      	bne.n	80016b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x4e4>
 80016da:	e097      	b.n	800180c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	220c      	movs	r2, #12
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x4f2>
 80016e8:	e06b      	b.n	80017c2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d14c      	bne.n	800178c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b49      	ldr	r3, [pc, #292]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b48      	ldr	r3, [pc, #288]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80016f8:	494a      	ldr	r1, [pc, #296]	@ (8001824 <HAL_RCC_OscConfig+0x62c>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7fe ff13 	bl	8000528 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7fe ff0e 	bl	8000528 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e079      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	049b      	lsls	r3, r3, #18
 8001722:	4013      	ands	r3, r2
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	4b3c      	ldr	r3, [pc, #240]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	220f      	movs	r2, #15
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001734:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001736:	430a      	orrs	r2, r1
 8001738:	62da      	str	r2, [r3, #44]	@ 0x2c
 800173a:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a3a      	ldr	r2, [pc, #232]	@ (8001828 <HAL_RCC_OscConfig+0x630>)
 8001740:	4013      	ands	r3, r2
 8001742:	0019      	movs	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	431a      	orrs	r2, r3
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001750:	430a      	orrs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001754:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	0449      	lsls	r1, r1, #17
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7fe fee1 	bl	8000528 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176c:	f7fe fedc 	bl	8000528 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e047      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177e:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	@ 0x80
 8001784:	049b      	lsls	r3, r3, #18
 8001786:	4013      	ands	r3, r2
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x574>
 800178a:	e03f      	b.n	800180c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 8001792:	4924      	ldr	r1, [pc, #144]	@ (8001824 <HAL_RCC_OscConfig+0x62c>)
 8001794:	400a      	ands	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7fe fec6 	bl	8000528 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a2:	f7fe fec1 	bl	8000528 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e02c      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	049b      	lsls	r3, r3, #18
 80017bc:	4013      	ands	r3, r2
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5aa>
 80017c0:	e024      	b.n	800180c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e01f      	b.n	800180e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_RCC_OscConfig+0x620>)
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	025b      	lsls	r3, r3, #9
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d10e      	bne.n	8001808 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	220f      	movs	r2, #15
 80017ee:	401a      	ands	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	23f0      	movs	r3, #240	@ 0xf0
 80017fc:	039b      	lsls	r3, r3, #14
 80017fe:	401a      	ands	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b008      	add	sp, #32
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	40021000 	.word	0x40021000
 800181c:	00001388 	.word	0x00001388
 8001820:	efffffff 	.word	0xefffffff
 8001824:	feffffff 	.word	0xfeffffff
 8001828:	ffc2ffff 	.word	0xffc2ffff

0800182c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0b3      	b.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b5b      	ldr	r3, [pc, #364]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2201      	movs	r2, #1
 8001846:	4013      	ands	r3, r2
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d911      	bls.n	8001872 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b58      	ldr	r3, [pc, #352]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2201      	movs	r2, #1
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	4b55      	ldr	r3, [pc, #340]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001860:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e09a      	b.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d015      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2204      	movs	r2, #4
 8001882:	4013      	ands	r3, r2
 8001884:	d006      	beq.n	8001894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001886:	4b4b      	ldr	r3, [pc, #300]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4b4a      	ldr	r3, [pc, #296]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 800188c:	21e0      	movs	r1, #224	@ 0xe0
 800188e:	00c9      	lsls	r1, r1, #3
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	22f0      	movs	r2, #240	@ 0xf0
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b44      	ldr	r3, [pc, #272]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d040      	beq.n	8001934 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	@ 0x80
 80018c0:	029b      	lsls	r3, r3, #10
 80018c2:	4013      	ands	r3, r2
 80018c4:	d114      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e06e      	b.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	049b      	lsls	r3, r3, #18
 80018da:	4013      	ands	r3, r2
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e062      	b.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b34      	ldr	r3, [pc, #208]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e05b      	b.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f0:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2203      	movs	r2, #3
 80018f6:	4393      	bics	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7fe fe10 	bl	8000528 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190c:	e009      	b.n	8001922 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7fe fe0b 	bl	8000528 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a27      	ldr	r2, [pc, #156]	@ (80019b8 <HAL_RCC_ClockConfig+0x18c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e042      	b.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	220c      	movs	r2, #12
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1ec      	bne.n	800190e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	4013      	ands	r3, r2
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d211      	bcs.n	8001966 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4393      	bics	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_RCC_ClockConfig+0x184>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e020      	b.n	80019a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2204      	movs	r2, #4
 800196c:	4013      	ands	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <HAL_RCC_ClockConfig+0x190>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001984:	f000 f820 	bl	80019c8 <HAL_RCC_GetSysClockFreq>
 8001988:	0001      	movs	r1, r0
 800198a:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <HAL_RCC_ClockConfig+0x188>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	220f      	movs	r2, #15
 8001992:	4013      	ands	r3, r2
 8001994:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <HAL_RCC_ClockConfig+0x194>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	000a      	movs	r2, r1
 800199a:	40da      	lsrs	r2, r3
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_RCC_ClockConfig+0x198>)
 800199e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7fe fd7b 	bl	800049c <HAL_InitTick>
  
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b004      	add	sp, #16
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	00001388 	.word	0x00001388
 80019bc:	fffff8ff 	.word	0xfffff8ff
 80019c0:	08005a00 	.word	0x08005a00
 80019c4:	20000010 	.word	0x20000010

080019c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80019e2:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	220c      	movs	r2, #12
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d002      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x30>
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0x36>
 80019f6:	e02c      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019fa:	613b      	str	r3, [r7, #16]
      break;
 80019fc:	e02c      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	0c9b      	lsrs	r3, r3, #18
 8001a02:	220f      	movs	r2, #15
 8001a04:	4013      	ands	r3, r2
 8001a06:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a10:	220f      	movs	r2, #15
 8001a12:	4013      	ands	r3, r2
 8001a14:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	4013      	ands	r3, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	4810      	ldr	r0, [pc, #64]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a28:	f7fe fb80 	bl	800012c <__udivsi3>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	001a      	movs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4353      	muls	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e009      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	000a      	movs	r2, r1
 8001a3c:	0152      	lsls	r2, r2, #5
 8001a3e:	1a52      	subs	r2, r2, r1
 8001a40:	0193      	lsls	r3, r2, #6
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	185b      	adds	r3, r3, r1
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
      break;
 8001a50:	e002      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a54:	613b      	str	r3, [r7, #16]
      break;
 8001a56:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a58:	693b      	ldr	r3, [r7, #16]
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b006      	add	sp, #24
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	40021000 	.word	0x40021000
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	080054f0 	.word	0x080054f0
 8001a70:	08005500 	.word	0x08005500

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	@ (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	20000010 	.word	0x20000010

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	0001      	movs	r1, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	2207      	movs	r2, #7
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	000b      	movs	r3, r1
}    
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08005a10 	.word	0x08005a10

08001ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	025b      	lsls	r3, r3, #9
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ad0:	e08e      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2017      	movs	r0, #23
 8001ad4:	183b      	adds	r3, r7, r0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b57      	ldr	r3, [pc, #348]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d110      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b54      	ldr	r3, [pc, #336]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	0549      	lsls	r1, r1, #21
 8001af0:	430a      	orrs	r2, r1
 8001af2:	61da      	str	r2, [r3, #28]
 8001af4:	4b50      	ldr	r3, [pc, #320]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b4c      	ldr	r3, [pc, #304]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d11a      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b14:	4b49      	ldr	r3, [pc, #292]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b48      	ldr	r3, [pc, #288]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b1a:	2180      	movs	r1, #128	@ 0x80
 8001b1c:	0049      	lsls	r1, r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7fe fd01 	bl	8000528 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	e008      	b.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2c:	f7fe fcfc 	bl	8000528 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e077      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	23c0      	movs	r3, #192	@ 0xc0
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d034      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	23c0      	movs	r3, #192	@ 0xc0
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d02c      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b6c:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a33      	ldr	r2, [pc, #204]	@ (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b76:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	0249      	lsls	r1, r1, #9
 8001b80:	430a      	orrs	r2, r1
 8001b82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b84:	4b2c      	ldr	r3, [pc, #176]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8a:	492e      	ldr	r1, [pc, #184]	@ (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b90:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe fcc3 	bl	8000528 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7fe fcbe 	bl	8000528 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a25      	ldr	r2, [pc, #148]	@ (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e038      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bda:	2317      	movs	r3, #23
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bea:	4918      	ldr	r1, [pc, #96]	@ (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	2203      	movs	r2, #3
 8001c00:	4393      	bics	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2220      	movs	r2, #32
 8001c14:	4013      	ands	r3, r2
 8001c16:	d009      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	4393      	bics	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b006      	add	sp, #24
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	fffffcff 	.word	0xfffffcff
 8001c44:	fffeffff 	.word	0xfffeffff
 8001c48:	00001388 	.word	0x00001388
 8001c4c:	efffffff 	.word	0xefffffff

08001c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e042      	b.n	8001ce8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	223d      	movs	r2, #61	@ 0x3d
 8001c66:	5c9b      	ldrb	r3, [r3, r2]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	223c      	movs	r2, #60	@ 0x3c
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f002 fb09 	bl	8004290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	223d      	movs	r2, #61	@ 0x3d
 8001c82:	2102      	movs	r1, #2
 8001c84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	0019      	movs	r1, r3
 8001c90:	0010      	movs	r0, r2
 8001c92:	f000 f9af 	bl	8001ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2246      	movs	r2, #70	@ 0x46
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	223e      	movs	r2, #62	@ 0x3e
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	223f      	movs	r2, #63	@ 0x3f
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2240      	movs	r2, #64	@ 0x40
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2241      	movs	r2, #65	@ 0x41
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2242      	movs	r2, #66	@ 0x42
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2243      	movs	r2, #67	@ 0x43
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2244      	movs	r2, #68	@ 0x44
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2245      	movs	r2, #69	@ 0x45
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223d      	movs	r2, #61	@ 0x3d
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	223d      	movs	r2, #61	@ 0x3d
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e035      	b.n	8001d74 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	223d      	movs	r2, #61	@ 0x3d
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <HAL_TIM_Base_Start_IT+0x8c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d009      	beq.n	8001d3e <HAL_TIM_Base_Start_IT+0x4e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <HAL_TIM_Base_Start_IT+0x90>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d004      	beq.n	8001d3e <HAL_TIM_Base_Start_IT+0x4e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <HAL_TIM_Base_Start_IT+0x94>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d111      	bne.n	8001d62 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2207      	movs	r2, #7
 8001d46:	4013      	ands	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d010      	beq.n	8001d72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	e007      	b.n	8001d72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b004      	add	sp, #16
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40014000 	.word	0x40014000

08001d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d124      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d11d      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4252      	negs	r2, r2
 8001db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 f8fa 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e007      	b.n	8001de2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 f8ed 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 f8f9 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2204      	movs	r2, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d125      	bne.n	8001e42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	4252      	negs	r2, r2
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	23c0      	movs	r3, #192	@ 0xc0
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 f8cd 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e2a:	e007      	b.n	8001e3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f8c0 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f000 f8cc 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d124      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2208      	movs	r2, #8
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d11d      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2209      	movs	r2, #9
 8001e64:	4252      	negs	r2, r2
 8001e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2203      	movs	r2, #3
 8001e76:	4013      	ands	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f8a1 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e82:	e007      	b.n	8001e94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f894 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f000 f8a0 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d125      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2210      	movs	r2, #16
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d11e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2211      	movs	r2, #17
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	23c0      	movs	r3, #192	@ 0xc0
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 f874 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e007      	b.n	8001eee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 f867 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 f873 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10f      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4252      	negs	r2, r2
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f002 f8b9 	bl	8004094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b80      	cmp	r3, #128	@ 0x80
 8001f2e:	d10f      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2280      	movs	r2, #128	@ 0x80
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b80      	cmp	r3, #128	@ 0x80
 8001f3c:	d108      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2281      	movs	r2, #129	@ 0x81
 8001f44:	4252      	negs	r2, r2
 8001f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 f8d0 	bl	80020f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2240      	movs	r2, #64	@ 0x40
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b40      	cmp	r3, #64	@ 0x40
 8001f5c:	d10f      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b40      	cmp	r3, #64	@ 0x40
 8001f6a:	d108      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2241      	movs	r2, #65	@ 0x41
 8001f72:	4252      	negs	r2, r2
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 f833 	bl	8001fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2220      	movs	r2, #32
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d10f      	bne.n	8001fac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d108      	bne.n	8001fac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2221      	movs	r2, #33	@ 0x21
 8001fa0:	4252      	negs	r2, r2
 8001fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 f89a 	bl	80020e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	46c0      	nop			@ (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a2f      	ldr	r2, [pc, #188]	@ (80020c4 <TIM_Base_SetConfig+0xd0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0x20>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a2e      	ldr	r2, [pc, #184]	@ (80020c8 <TIM_Base_SetConfig+0xd4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d108      	bne.n	8002026 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2270      	movs	r2, #112	@ 0x70
 8002018:	4393      	bics	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a26      	ldr	r2, [pc, #152]	@ (80020c4 <TIM_Base_SetConfig+0xd0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a25      	ldr	r2, [pc, #148]	@ (80020c8 <TIM_Base_SetConfig+0xd4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00f      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <TIM_Base_SetConfig+0xd8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00b      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a23      	ldr	r2, [pc, #140]	@ (80020d0 <TIM_Base_SetConfig+0xdc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a22      	ldr	r2, [pc, #136]	@ (80020d4 <TIM_Base_SetConfig+0xe0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <TIM_Base_SetConfig+0x62>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <TIM_Base_SetConfig+0xe4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d108      	bne.n	8002068 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a20      	ldr	r2, [pc, #128]	@ (80020dc <TIM_Base_SetConfig+0xe8>)
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	4393      	bics	r3, r2
 800206e:	001a      	movs	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <TIM_Base_SetConfig+0xd0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0xba>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <TIM_Base_SetConfig+0xdc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0xba>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	@ (80020d4 <TIM_Base_SetConfig+0xe0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0xba>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <TIM_Base_SetConfig+0xe4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d103      	bne.n	80020b6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	615a      	str	r2, [r3, #20]
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40002000 	.word	0x40002000
 80020d0:	40014000 	.word	0x40014000
 80020d4:	40014400 	.word	0x40014400
 80020d8:	40014800 	.word	0x40014800
 80020dc:	fffffcff 	.word	0xfffffcff

080020e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e044      	b.n	800219c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2278      	movs	r2, #120	@ 0x78
 800211e:	2100      	movs	r1, #0
 8002120:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f002 f90b 	bl	8004340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2224      	movs	r2, #36	@ 0x24
 800212e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f830 	bl	80021a8 <UART_SetConfig>
 8002148:	0003      	movs	r3, r0
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e024      	b.n	800219c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f963 	bl	8002428 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	490d      	ldr	r1, [pc, #52]	@ (80021a4 <HAL_UART_Init+0xa4>)
 800216e:	400a      	ands	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2108      	movs	r1, #8
 800217e:	438a      	bics	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f000 f9fb 	bl	8002590 <UART_CheckIdleState>
 800219a:	0003      	movs	r3, r0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	fffff7ff 	.word	0xfffff7ff

080021a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021b0:	231e      	movs	r3, #30
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a8d      	ldr	r2, [pc, #564]	@ (800240c <UART_SetConfig+0x264>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a88      	ldr	r2, [pc, #544]	@ (8002410 <UART_SetConfig+0x268>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a7f      	ldr	r2, [pc, #508]	@ (8002414 <UART_SetConfig+0x26c>)
 8002216:	4013      	ands	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7b      	ldr	r2, [pc, #492]	@ (8002418 <UART_SetConfig+0x270>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d127      	bne.n	800227e <UART_SetConfig+0xd6>
 800222e:	4b7b      	ldr	r3, [pc, #492]	@ (800241c <UART_SetConfig+0x274>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	2203      	movs	r2, #3
 8002234:	4013      	ands	r3, r2
 8002236:	2b03      	cmp	r3, #3
 8002238:	d00d      	beq.n	8002256 <UART_SetConfig+0xae>
 800223a:	d81b      	bhi.n	8002274 <UART_SetConfig+0xcc>
 800223c:	2b02      	cmp	r3, #2
 800223e:	d014      	beq.n	800226a <UART_SetConfig+0xc2>
 8002240:	d818      	bhi.n	8002274 <UART_SetConfig+0xcc>
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <UART_SetConfig+0xa4>
 8002246:	2b01      	cmp	r3, #1
 8002248:	d00a      	beq.n	8002260 <UART_SetConfig+0xb8>
 800224a:	e013      	b.n	8002274 <UART_SetConfig+0xcc>
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e021      	b.n	800229a <UART_SetConfig+0xf2>
 8002256:	231f      	movs	r3, #31
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e01c      	b.n	800229a <UART_SetConfig+0xf2>
 8002260:	231f      	movs	r3, #31
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2204      	movs	r2, #4
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e017      	b.n	800229a <UART_SetConfig+0xf2>
 800226a:	231f      	movs	r3, #31
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2208      	movs	r2, #8
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e012      	b.n	800229a <UART_SetConfig+0xf2>
 8002274:	231f      	movs	r3, #31
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2210      	movs	r2, #16
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e00d      	b.n	800229a <UART_SetConfig+0xf2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a67      	ldr	r2, [pc, #412]	@ (8002420 <UART_SetConfig+0x278>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d104      	bne.n	8002292 <UART_SetConfig+0xea>
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e003      	b.n	800229a <UART_SetConfig+0xf2>
 8002292:	231f      	movs	r3, #31
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2210      	movs	r2, #16
 8002298:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d15c      	bne.n	8002360 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d015      	beq.n	80022dc <UART_SetConfig+0x134>
 80022b0:	dc18      	bgt.n	80022e4 <UART_SetConfig+0x13c>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d00d      	beq.n	80022d2 <UART_SetConfig+0x12a>
 80022b6:	dc15      	bgt.n	80022e4 <UART_SetConfig+0x13c>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <UART_SetConfig+0x11a>
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d005      	beq.n	80022cc <UART_SetConfig+0x124>
 80022c0:	e010      	b.n	80022e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022c2:	f7ff fbe1 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
        break;
 80022ca:	e012      	b.n	80022f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022cc:	4b55      	ldr	r3, [pc, #340]	@ (8002424 <UART_SetConfig+0x27c>)
 80022ce:	61bb      	str	r3, [r7, #24]
        break;
 80022d0:	e00f      	b.n	80022f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022d2:	f7ff fb79 	bl	80019c8 <HAL_RCC_GetSysClockFreq>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]
        break;
 80022da:	e00a      	b.n	80022f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022dc:	2380      	movs	r3, #128	@ 0x80
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	61bb      	str	r3, [r7, #24]
        break;
 80022e2:	e006      	b.n	80022f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022e8:	231e      	movs	r3, #30
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
        break;
 80022f0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d100      	bne.n	80022fa <UART_SetConfig+0x152>
 80022f8:	e07a      	b.n	80023f0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	005a      	lsls	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	18d2      	adds	r2, r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0019      	movs	r1, r3
 800230c:	0010      	movs	r0, r2
 800230e:	f7fd ff0d 	bl	800012c <__udivsi3>
 8002312:	0003      	movs	r3, r0
 8002314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d91c      	bls.n	8002356 <UART_SetConfig+0x1ae>
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	025b      	lsls	r3, r3, #9
 8002322:	429a      	cmp	r2, r3
 8002324:	d217      	bcs.n	8002356 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	b29a      	uxth	r2, r3
 800232a:	200e      	movs	r0, #14
 800232c:	183b      	adds	r3, r7, r0
 800232e:	210f      	movs	r1, #15
 8002330:	438a      	bics	r2, r1
 8002332:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	b29b      	uxth	r3, r3
 800233a:	2207      	movs	r2, #7
 800233c:	4013      	ands	r3, r2
 800233e:	b299      	uxth	r1, r3
 8002340:	183b      	adds	r3, r7, r0
 8002342:	183a      	adds	r2, r7, r0
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	183a      	adds	r2, r7, r0
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	e04c      	b.n	80023f0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002356:	231e      	movs	r3, #30
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e047      	b.n	80023f0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002360:	231f      	movs	r3, #31
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d015      	beq.n	8002396 <UART_SetConfig+0x1ee>
 800236a:	dc18      	bgt.n	800239e <UART_SetConfig+0x1f6>
 800236c:	2b04      	cmp	r3, #4
 800236e:	d00d      	beq.n	800238c <UART_SetConfig+0x1e4>
 8002370:	dc15      	bgt.n	800239e <UART_SetConfig+0x1f6>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <UART_SetConfig+0x1d4>
 8002376:	2b02      	cmp	r3, #2
 8002378:	d005      	beq.n	8002386 <UART_SetConfig+0x1de>
 800237a:	e010      	b.n	800239e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800237c:	f7ff fb84 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002380:	0003      	movs	r3, r0
 8002382:	61bb      	str	r3, [r7, #24]
        break;
 8002384:	e012      	b.n	80023ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002386:	4b27      	ldr	r3, [pc, #156]	@ (8002424 <UART_SetConfig+0x27c>)
 8002388:	61bb      	str	r3, [r7, #24]
        break;
 800238a:	e00f      	b.n	80023ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800238c:	f7ff fb1c 	bl	80019c8 <HAL_RCC_GetSysClockFreq>
 8002390:	0003      	movs	r3, r0
 8002392:	61bb      	str	r3, [r7, #24]
        break;
 8002394:	e00a      	b.n	80023ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	61bb      	str	r3, [r7, #24]
        break;
 800239c:	e006      	b.n	80023ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023a2:	231e      	movs	r3, #30
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
        break;
 80023aa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01e      	beq.n	80023f0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	085a      	lsrs	r2, r3, #1
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	18d2      	adds	r2, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0019      	movs	r1, r3
 80023c2:	0010      	movs	r0, r2
 80023c4:	f7fd feb2 	bl	800012c <__udivsi3>
 80023c8:	0003      	movs	r3, r0
 80023ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d90a      	bls.n	80023e8 <UART_SetConfig+0x240>
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	429a      	cmp	r2, r3
 80023da:	d205      	bcs.n	80023e8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	e003      	b.n	80023f0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80023e8:	231e      	movs	r3, #30
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80023fc:	231e      	movs	r3, #30
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	781b      	ldrb	r3, [r3, #0]
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b008      	add	sp, #32
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	ffff69f3 	.word	0xffff69f3
 8002410:	ffffcfff 	.word	0xffffcfff
 8002414:	fffff4ff 	.word	0xfffff4ff
 8002418:	40013800 	.word	0x40013800
 800241c:	40021000 	.word	0x40021000
 8002420:	40004400 	.word	0x40004400
 8002424:	007a1200 	.word	0x007a1200

08002428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d00b      	beq.n	8002452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a4a      	ldr	r2, [pc, #296]	@ (800256c <UART_AdvFeatureConfig+0x144>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d00b      	beq.n	8002474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a43      	ldr	r2, [pc, #268]	@ (8002570 <UART_AdvFeatureConfig+0x148>)
 8002464:	4013      	ands	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	2204      	movs	r2, #4
 800247a:	4013      	ands	r3, r2
 800247c:	d00b      	beq.n	8002496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a3b      	ldr	r2, [pc, #236]	@ (8002574 <UART_AdvFeatureConfig+0x14c>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	2208      	movs	r2, #8
 800249c:	4013      	ands	r3, r2
 800249e:	d00b      	beq.n	80024b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a34      	ldr	r2, [pc, #208]	@ (8002578 <UART_AdvFeatureConfig+0x150>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	2210      	movs	r2, #16
 80024be:	4013      	ands	r3, r2
 80024c0:	d00b      	beq.n	80024da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a2c      	ldr	r2, [pc, #176]	@ (800257c <UART_AdvFeatureConfig+0x154>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	2220      	movs	r2, #32
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00b      	beq.n	80024fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a25      	ldr	r2, [pc, #148]	@ (8002580 <UART_AdvFeatureConfig+0x158>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	2240      	movs	r2, #64	@ 0x40
 8002502:	4013      	ands	r3, r2
 8002504:	d01d      	beq.n	8002542 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a1d      	ldr	r2, [pc, #116]	@ (8002584 <UART_AdvFeatureConfig+0x15c>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	035b      	lsls	r3, r3, #13
 8002526:	429a      	cmp	r2, r3
 8002528:	d10b      	bne.n	8002542 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a15      	ldr	r2, [pc, #84]	@ (8002588 <UART_AdvFeatureConfig+0x160>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	2280      	movs	r2, #128	@ 0x80
 8002548:	4013      	ands	r3, r2
 800254a:	d00b      	beq.n	8002564 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <UART_AdvFeatureConfig+0x164>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
  }
}
 8002564:	46c0      	nop			@ (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fffdffff 	.word	0xfffdffff
 8002570:	fffeffff 	.word	0xfffeffff
 8002574:	fffbffff 	.word	0xfffbffff
 8002578:	ffff7fff 	.word	0xffff7fff
 800257c:	ffffefff 	.word	0xffffefff
 8002580:	ffffdfff 	.word	0xffffdfff
 8002584:	ffefffff 	.word	0xffefffff
 8002588:	ff9fffff 	.word	0xff9fffff
 800258c:	fff7ffff 	.word	0xfff7ffff

08002590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b092      	sub	sp, #72	@ 0x48
 8002594:	af02      	add	r7, sp, #8
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2284      	movs	r2, #132	@ 0x84
 800259c:	2100      	movs	r1, #0
 800259e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025a0:	f7fd ffc2 	bl	8000528 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2208      	movs	r2, #8
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d12c      	bne.n	8002610 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b8:	2280      	movs	r2, #128	@ 0x80
 80025ba:	0391      	lsls	r1, r2, #14
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4a46      	ldr	r2, [pc, #280]	@ (80026d8 <UART_CheckIdleState+0x148>)
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f000 f88c 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 80025c8:	1e03      	subs	r3, r0, #0
 80025ca:	d021      	beq.n	8002610 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025cc:	f3ef 8310 	mrs	r3, PRIMASK
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025d6:	2301      	movs	r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025dc:	f383 8810 	msr	PRIMASK, r3
}
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	438a      	bics	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	f383 8810 	msr	PRIMASK, r3
}
 80025fc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2278      	movs	r2, #120	@ 0x78
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e05f      	b.n	80026d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2204      	movs	r2, #4
 8002618:	4013      	ands	r3, r2
 800261a:	2b04      	cmp	r3, #4
 800261c:	d146      	bne.n	80026ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800261e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	03d1      	lsls	r1, r2, #15
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4a2c      	ldr	r2, [pc, #176]	@ (80026d8 <UART_CheckIdleState+0x148>)
 8002628:	9200      	str	r2, [sp, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	f000 f858 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d03b      	beq.n	80026ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002634:	f3ef 8310 	mrs	r3, PRIMASK
 8002638:	60fb      	str	r3, [r7, #12]
  return(result);
 800263a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800263c:	637b      	str	r3, [r7, #52]	@ 0x34
 800263e:	2301      	movs	r3, #1
 8002640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f383 8810 	msr	PRIMASK, r3
}
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4921      	ldr	r1, [pc, #132]	@ (80026dc <UART_CheckIdleState+0x14c>)
 8002656:	400a      	ands	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f383 8810 	msr	PRIMASK, r3
}
 8002664:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	61bb      	str	r3, [r7, #24]
  return(result);
 800266c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002670:	2301      	movs	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f383 8810 	msr	PRIMASK, r3
}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	438a      	bics	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2280      	movs	r2, #128	@ 0x80
 800269c:	2120      	movs	r1, #32
 800269e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2278      	movs	r2, #120	@ 0x78
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e011      	b.n	80026d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	@ 0x80
 80026b6:	2120      	movs	r1, #32
 80026b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2278      	movs	r2, #120	@ 0x78
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b010      	add	sp, #64	@ 0x40
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	01ffffff 	.word	0x01ffffff
 80026dc:	fffffedf 	.word	0xfffffedf

080026e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f0:	e04b      	b.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	d048      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7fd ff16 	bl	8000528 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04b      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2204      	movs	r2, #4
 800271a:	4013      	ands	r3, r2
 800271c:	d035      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2208      	movs	r2, #8
 8002726:	4013      	ands	r3, r2
 8002728:	2b08      	cmp	r3, #8
 800272a:	d111      	bne.n	8002750 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2208      	movs	r2, #8
 8002732:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f83c 	bl	80027b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2284      	movs	r2, #132	@ 0x84
 8002740:	2108      	movs	r1, #8
 8002742:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2278      	movs	r2, #120	@ 0x78
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e02c      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	401a      	ands	r2, r3
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	429a      	cmp	r2, r3
 8002762:	d112      	bne.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f81f 	bl	80027b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2284      	movs	r2, #132	@ 0x84
 800277a:	2120      	movs	r1, #32
 800277c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2278      	movs	r2, #120	@ 0x78
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e00f      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	425a      	negs	r2, r3
 800279a:	4153      	adcs	r3, r2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	001a      	movs	r2, r3
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d0a4      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	@ 0x38
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027bc:	f3ef 8310 	mrs	r3, PRIMASK
 80027c0:	617b      	str	r3, [r7, #20]
  return(result);
 80027c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c6:	2301      	movs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f383 8810 	msr	PRIMASK, r3
}
 80027d0:	46c0      	nop			@ (mov r8, r8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4926      	ldr	r1, [pc, #152]	@ (8002878 <UART_EndRxTransfer+0xc4>)
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ee:	f3ef 8310 	mrs	r3, PRIMASK
 80027f2:	623b      	str	r3, [r7, #32]
  return(result);
 80027f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	f383 8810 	msr	PRIMASK, r3
}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2101      	movs	r1, #1
 8002810:	438a      	bics	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002824:	2b01      	cmp	r3, #1
 8002826:	d118      	bne.n	800285a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002828:	f3ef 8310 	mrs	r3, PRIMASK
 800282c:	60bb      	str	r3, [r7, #8]
  return(result);
 800282e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002832:	2301      	movs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f383 8810 	msr	PRIMASK, r3
}
 800283c:	46c0      	nop			@ (mov r8, r8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2110      	movs	r1, #16
 800284a:	438a      	bics	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2280      	movs	r2, #128	@ 0x80
 800285e:	2120      	movs	r1, #32
 8002860:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b00e      	add	sp, #56	@ 0x38
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	fffffedf 	.word	0xfffffedf

0800287c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	0018      	movs	r0, r3
 8002886:	230c      	movs	r3, #12
 8002888:	001a      	movs	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f001 ff4e 	bl	800472c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002890:	4b26      	ldr	r3, [pc, #152]	@ (800292c <MX_ADC_Init+0xb0>)
 8002892:	4a27      	ldr	r2, [pc, #156]	@ (8002930 <MX_ADC_Init+0xb4>)
 8002894:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002896:	4b25      	ldr	r3, [pc, #148]	@ (800292c <MX_ADC_Init+0xb0>)
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800289c:	4b23      	ldr	r3, [pc, #140]	@ (800292c <MX_ADC_Init+0xb0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028a2:	4b22      	ldr	r3, [pc, #136]	@ (800292c <MX_ADC_Init+0xb0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80028a8:	4b20      	ldr	r3, [pc, #128]	@ (800292c <MX_ADC_Init+0xb0>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <MX_ADC_Init+0xb0>)
 80028b0:	2204      	movs	r2, #4
 80028b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <MX_ADC_Init+0xb0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <MX_ADC_Init+0xb0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <MX_ADC_Init+0xb0>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80028c6:	4b19      	ldr	r3, [pc, #100]	@ (800292c <MX_ADC_Init+0xb0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028cc:	4b17      	ldr	r3, [pc, #92]	@ (800292c <MX_ADC_Init+0xb0>)
 80028ce:	22c2      	movs	r2, #194	@ 0xc2
 80028d0:	32ff      	adds	r2, #255	@ 0xff
 80028d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028d4:	4b15      	ldr	r3, [pc, #84]	@ (800292c <MX_ADC_Init+0xb0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80028da:	4b14      	ldr	r3, [pc, #80]	@ (800292c <MX_ADC_Init+0xb0>)
 80028dc:	2224      	movs	r2, #36	@ 0x24
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028e2:	4b12      	ldr	r3, [pc, #72]	@ (800292c <MX_ADC_Init+0xb0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <MX_ADC_Init+0xb0>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7fd fe4a 	bl	8000584 <HAL_ADC_Init>
 80028f0:	1e03      	subs	r3, r0, #0
 80028f2:	d001      	beq.n	80028f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80028f4:	f001 f995 	bl	8003c22 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	0152      	lsls	r2, r2, #5
 8002904:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2280      	movs	r2, #128	@ 0x80
 800290a:	0552      	lsls	r2, r2, #21
 800290c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800290e:	1d3a      	adds	r2, r7, #4
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <MX_ADC_Init+0xb0>)
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f7fe f86d 	bl	80009f4 <HAL_ADC_ConfigChannel>
 800291a:	1e03      	subs	r3, r0, #0
 800291c:	d001      	beq.n	8002922 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800291e:	f001 f980 	bl	8003c22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	20000090 	.word	0x20000090
 8002930:	40012400 	.word	0x40012400

08002934 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08b      	sub	sp, #44	@ 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	2414      	movs	r4, #20
 800293e:	193b      	adds	r3, r7, r4
 8002940:	0018      	movs	r0, r3
 8002942:	2314      	movs	r3, #20
 8002944:	001a      	movs	r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	f001 fef0 	bl	800472c <memset>
  if(adcHandle->Instance==ADC1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <HAL_ADC_MspInit+0x84>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d12b      	bne.n	80029ae <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002956:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_ADC_MspInit+0x88>)
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <HAL_ADC_MspInit+0x88>)
 800295c:	2180      	movs	r1, #128	@ 0x80
 800295e:	0089      	lsls	r1, r1, #2
 8002960:	430a      	orrs	r2, r1
 8002962:	619a      	str	r2, [r3, #24]
 8002964:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <HAL_ADC_MspInit+0x88>)
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_ADC_MspInit+0x88>)
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_ADC_MspInit+0x88>)
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	0289      	lsls	r1, r1, #10
 800297c:	430a      	orrs	r2, r1
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	4b0e      	ldr	r3, [pc, #56]	@ (80029bc <HAL_ADC_MspInit+0x88>)
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2203      	movs	r2, #3
 8002998:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	193b      	adds	r3, r7, r4
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	193a      	adds	r2, r7, r4
 80029a2:	2390      	movs	r3, #144	@ 0x90
 80029a4:	05db      	lsls	r3, r3, #23
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7fe fa7b 	bl	8000ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b00b      	add	sp, #44	@ 0x2c
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	40012400 	.word	0x40012400
 80029bc:	40021000 	.word	0x40021000

080029c0 <anim_ball_run>:
const int IMAGES_LEN = sizeof(IMAGES)/8;
const uint8_t REVERSE_END = 1;


void anim_ball_run()
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	static int currState = 0;
	static uint8_t dirrection = 0;

		screen_display_image(IMAGES[currState]);
 80029c4:	4b22      	ldr	r3, [pc, #136]	@ (8002a50 <anim_ball_run+0x90>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a22      	ldr	r2, [pc, #136]	@ (8002a54 <anim_ball_run+0x94>)
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	18d3      	adds	r3, r2, r3
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	0010      	movs	r0, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	f001 fac9 	bl	8003f6c <screen_display_image>

	if (REVERSE_END)
 80029da:	2301      	movs	r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d022      	beq.n	8002a26 <anim_ball_run+0x66>
	{
		if (dirrection) currState--;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <anim_ball_run+0x98>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <anim_ball_run+0x34>
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <anim_ball_run+0x90>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <anim_ball_run+0x90>)
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e004      	b.n	80029fe <anim_ball_run+0x3e>
		else currState++;
 80029f4:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <anim_ball_run+0x90>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <anim_ball_run+0x90>)
 80029fc:	601a      	str	r2, [r3, #0]
		if(currState == IMAGES_LEN)
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <anim_ball_run+0x90>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2219      	movs	r2, #25
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d106      	bne.n	8002a16 <anim_ball_run+0x56>
		{
			dirrection = 1;
 8002a08:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <anim_ball_run+0x98>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
			currState = IMAGES_LEN - 2;
 8002a0e:	2319      	movs	r3, #25
 8002a10:	1e9a      	subs	r2, r3, #2
 8002a12:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <anim_ball_run+0x90>)
 8002a14:	601a      	str	r2, [r3, #0]
		}
		if(currState == 0)
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <anim_ball_run+0x90>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d110      	bne.n	8002a40 <anim_ball_run+0x80>
			dirrection = 0;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <anim_ball_run+0x98>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e00c      	b.n	8002a40 <anim_ball_run+0x80>
	}
	else
	{
		currState++;
 8002a26:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <anim_ball_run+0x90>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <anim_ball_run+0x90>)
 8002a2e:	601a      	str	r2, [r3, #0]
		if(currState == IMAGES_LEN)
 8002a30:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <anim_ball_run+0x90>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2219      	movs	r2, #25
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d102      	bne.n	8002a40 <anim_ball_run+0x80>
			currState = 0;
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <anim_ball_run+0x90>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
	}



	HAL_Delay(100);
 8002a40:	2064      	movs	r0, #100	@ 0x64
 8002a42:	f7fd fd7b 	bl	800053c <HAL_Delay>
	screen_clear();
 8002a46:	f001 f991 	bl	8003d6c <screen_clear>

}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200000d0 	.word	0x200000d0
 8002a54:	08005510 	.word	0x08005510
 8002a58:	200000d4 	.word	0x200000d4

08002a5c <neighbours>:
static int iterations = 0;
static int threeCells = 0;

const static uint8_t mode = 0;

int neighbours(int x, int y) {
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  int numberOfNeighbours = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  //if the borders overlap to the other side of the matrix
  if(mode) {
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d100      	bne.n	8002a72 <neighbours+0x16>
 8002a70:	e0b9      	b.n	8002be6 <neighbours+0x18a>
    numberOfNeighbours = world[(x + 1) % SIZE][y][0] +
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4aa2      	ldr	r2, [pc, #648]	@ (8002d00 <neighbours+0x2a4>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d504      	bpl.n	8002a86 <neighbours+0x2a>
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4252      	negs	r2, r2
 8002a82:	4313      	orrs	r3, r2
 8002a84:	3301      	adds	r3, #1
 8002a86:	001a      	movs	r2, r3
 8002a88:	4b9e      	ldr	r3, [pc, #632]	@ (8002d04 <neighbours+0x2a8>)
 8002a8a:	00d1      	lsls	r1, r2, #3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	188a      	adds	r2, r1, r2
 8002a90:	0052      	lsls	r2, r2, #1
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	0019      	movs	r1, r3
         world[x][(y + 1) % SIZE][0] +
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	4a99      	ldr	r2, [pc, #612]	@ (8002d00 <neighbours+0x2a4>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d504      	bpl.n	8002aaa <neighbours+0x4e>
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4252      	negs	r2, r2
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	0018      	movs	r0, r3
 8002aac:	4b95      	ldr	r3, [pc, #596]	@ (8002d04 <neighbours+0x2a8>)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	00d2      	lsls	r2, r2, #3
 8002ab2:	1812      	adds	r2, r2, r0
 8002ab4:	0052      	lsls	r2, r2, #1
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
    numberOfNeighbours = world[(x + 1) % SIZE][y][0] +
 8002ab8:	18ca      	adds	r2, r1, r3
         world[(x + SIZE - 1) % SIZE][y][0] +
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3307      	adds	r3, #7
 8002abe:	4990      	ldr	r1, [pc, #576]	@ (8002d00 <neighbours+0x2a4>)
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	d504      	bpl.n	8002ace <neighbours+0x72>
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	4249      	negs	r1, r1
 8002aca:	430b      	orrs	r3, r1
 8002acc:	3301      	adds	r3, #1
 8002ace:	0019      	movs	r1, r3
 8002ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8002d04 <neighbours+0x2a8>)
 8002ad2:	00c8      	lsls	r0, r1, #3
 8002ad4:	6839      	ldr	r1, [r7, #0]
 8002ad6:	1841      	adds	r1, r0, r1
 8002ad8:	0049      	lsls	r1, r1, #1
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
         world[x][(y + 1) % SIZE][0] +
 8002adc:	18d2      	adds	r2, r2, r3
         world[x][(y + SIZE - 1) % SIZE][0] +
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	3307      	adds	r3, #7
 8002ae2:	4987      	ldr	r1, [pc, #540]	@ (8002d00 <neighbours+0x2a4>)
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	d504      	bpl.n	8002af2 <neighbours+0x96>
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	2108      	movs	r1, #8
 8002aec:	4249      	negs	r1, r1
 8002aee:	430b      	orrs	r3, r1
 8002af0:	3301      	adds	r3, #1
 8002af2:	0018      	movs	r0, r3
 8002af4:	4b83      	ldr	r3, [pc, #524]	@ (8002d04 <neighbours+0x2a8>)
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	00c9      	lsls	r1, r1, #3
 8002afa:	1809      	adds	r1, r1, r0
 8002afc:	0049      	lsls	r1, r1, #1
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
         world[(x + SIZE - 1) % SIZE][y][0] +
 8002b00:	18d2      	adds	r2, r2, r3
         world[(x + 1) % SIZE][(y + 1) % SIZE][0] +
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3301      	adds	r3, #1
 8002b06:	497e      	ldr	r1, [pc, #504]	@ (8002d00 <neighbours+0x2a4>)
 8002b08:	400b      	ands	r3, r1
 8002b0a:	d504      	bpl.n	8002b16 <neighbours+0xba>
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	2108      	movs	r1, #8
 8002b10:	4249      	negs	r1, r1
 8002b12:	430b      	orrs	r3, r1
 8002b14:	3301      	adds	r3, #1
 8002b16:	001c      	movs	r4, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4978      	ldr	r1, [pc, #480]	@ (8002d00 <neighbours+0x2a4>)
 8002b1e:	400b      	ands	r3, r1
 8002b20:	d504      	bpl.n	8002b2c <neighbours+0xd0>
 8002b22:	3b01      	subs	r3, #1
 8002b24:	2108      	movs	r1, #8
 8002b26:	4249      	negs	r1, r1
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	4b75      	ldr	r3, [pc, #468]	@ (8002d04 <neighbours+0x2a8>)
 8002b30:	00e1      	lsls	r1, r4, #3
 8002b32:	1809      	adds	r1, r1, r0
 8002b34:	0049      	lsls	r1, r1, #1
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
         world[x][(y + SIZE - 1) % SIZE][0] +
 8002b38:	18d2      	adds	r2, r2, r3
         world[(x + SIZE - 1) % SIZE][(y + 1) % SIZE][0] +
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3307      	adds	r3, #7
 8002b3e:	4970      	ldr	r1, [pc, #448]	@ (8002d00 <neighbours+0x2a4>)
 8002b40:	400b      	ands	r3, r1
 8002b42:	d504      	bpl.n	8002b4e <neighbours+0xf2>
 8002b44:	3b01      	subs	r3, #1
 8002b46:	2108      	movs	r1, #8
 8002b48:	4249      	negs	r1, r1
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	001c      	movs	r4, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	496a      	ldr	r1, [pc, #424]	@ (8002d00 <neighbours+0x2a4>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	d504      	bpl.n	8002b64 <neighbours+0x108>
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	4249      	negs	r1, r1
 8002b60:	430b      	orrs	r3, r1
 8002b62:	3301      	adds	r3, #1
 8002b64:	0018      	movs	r0, r3
 8002b66:	4b67      	ldr	r3, [pc, #412]	@ (8002d04 <neighbours+0x2a8>)
 8002b68:	00e1      	lsls	r1, r4, #3
 8002b6a:	1809      	adds	r1, r1, r0
 8002b6c:	0049      	lsls	r1, r1, #1
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
         world[(x + 1) % SIZE][(y + 1) % SIZE][0] +
 8002b70:	18d2      	adds	r2, r2, r3
         world[(x + SIZE - 1) % SIZE][(y + SIZE - 1) % SIZE][0] +
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3307      	adds	r3, #7
 8002b76:	4962      	ldr	r1, [pc, #392]	@ (8002d00 <neighbours+0x2a4>)
 8002b78:	400b      	ands	r3, r1
 8002b7a:	d504      	bpl.n	8002b86 <neighbours+0x12a>
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	2108      	movs	r1, #8
 8002b80:	4249      	negs	r1, r1
 8002b82:	430b      	orrs	r3, r1
 8002b84:	3301      	adds	r3, #1
 8002b86:	001c      	movs	r4, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	3307      	adds	r3, #7
 8002b8c:	495c      	ldr	r1, [pc, #368]	@ (8002d00 <neighbours+0x2a4>)
 8002b8e:	400b      	ands	r3, r1
 8002b90:	d504      	bpl.n	8002b9c <neighbours+0x140>
 8002b92:	3b01      	subs	r3, #1
 8002b94:	2108      	movs	r1, #8
 8002b96:	4249      	negs	r1, r1
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	4b59      	ldr	r3, [pc, #356]	@ (8002d04 <neighbours+0x2a8>)
 8002ba0:	00e1      	lsls	r1, r4, #3
 8002ba2:	1809      	adds	r1, r1, r0
 8002ba4:	0049      	lsls	r1, r1, #1
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
         world[(x + SIZE - 1) % SIZE][(y + 1) % SIZE][0] +
 8002ba8:	18d2      	adds	r2, r2, r3
         world[(x + 1) % SIZE][(y + SIZE - 1) % SIZE][0];
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4954      	ldr	r1, [pc, #336]	@ (8002d00 <neighbours+0x2a4>)
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	d504      	bpl.n	8002bbe <neighbours+0x162>
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	2108      	movs	r1, #8
 8002bb8:	4249      	negs	r1, r1
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	001c      	movs	r4, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3307      	adds	r3, #7
 8002bc4:	494e      	ldr	r1, [pc, #312]	@ (8002d00 <neighbours+0x2a4>)
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	d504      	bpl.n	8002bd4 <neighbours+0x178>
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	2108      	movs	r1, #8
 8002bce:	4249      	negs	r1, r1
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002d04 <neighbours+0x2a8>)
 8002bd8:	00e1      	lsls	r1, r4, #3
 8002bda:	1809      	adds	r1, r1, r0
 8002bdc:	0049      	lsls	r1, r1, #1
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
    numberOfNeighbours = world[(x + 1) % SIZE][y][0] +
 8002be0:	18d3      	adds	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e087      	b.n	8002cf6 <neighbours+0x29a>
  } else  {
  //if the borders are solid
    if(x != 7) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b07      	cmp	r3, #7
 8002bea:	d00b      	beq.n	8002c04 <neighbours+0x1a8>
      numberOfNeighbours += world[x + 1][y][0];
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	4b44      	ldr	r3, [pc, #272]	@ (8002d04 <neighbours+0x2a8>)
 8002bf2:	00d1      	lsls	r1, r2, #3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	188a      	adds	r2, r1, r2
 8002bf8:	0052      	lsls	r2, r2, #1
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
    }
    if(y != 7) {
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b07      	cmp	r3, #7
 8002c08:	d00b      	beq.n	8002c22 <neighbours+0x1c6>
      numberOfNeighbours += world[x][y + 1][0];
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <neighbours+0x2a8>)
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	00c9      	lsls	r1, r1, #3
 8002c14:	188a      	adds	r2, r1, r2
 8002c16:	0052      	lsls	r2, r2, #1
 8002c18:	5cd3      	ldrb	r3, [r2, r3]
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
    }
    if(x != 0) {
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <neighbours+0x1e4>
      numberOfNeighbours += world[x - 1][y][0];
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <neighbours+0x2a8>)
 8002c2e:	00d1      	lsls	r1, r2, #3
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	188a      	adds	r2, r1, r2
 8002c34:	0052      	lsls	r2, r2, #1
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	001a      	movs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	189b      	adds	r3, r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
    }
    if(y != 0) {
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <neighbours+0x202>
      numberOfNeighbours += world[x][y - 1][0];
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	1e5a      	subs	r2, r3, #1
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d04 <neighbours+0x2a8>)
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	00c9      	lsls	r1, r1, #3
 8002c50:	188a      	adds	r2, r1, r2
 8002c52:	0052      	lsls	r2, r2, #1
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	001a      	movs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	189b      	adds	r3, r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
    }
    if(x != 7 && y != 7) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b07      	cmp	r3, #7
 8002c62:	d00f      	beq.n	8002c84 <neighbours+0x228>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b07      	cmp	r3, #7
 8002c68:	d00c      	beq.n	8002c84 <neighbours+0x228>
      numberOfNeighbours += world[x + 1][y + 1][0];
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	1c59      	adds	r1, r3, #1
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	4b24      	ldr	r3, [pc, #144]	@ (8002d04 <neighbours+0x2a8>)
 8002c74:	00c9      	lsls	r1, r1, #3
 8002c76:	188a      	adds	r2, r1, r2
 8002c78:	0052      	lsls	r2, r2, #1
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	189b      	adds	r3, r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
    }
    if(x != 7 && y != 0) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b07      	cmp	r3, #7
 8002c88:	d00f      	beq.n	8002caa <neighbours+0x24e>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00c      	beq.n	8002caa <neighbours+0x24e>
      numberOfNeighbours += world[x + 1][y - 1][0];
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1c59      	adds	r1, r3, #1
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <neighbours+0x2a8>)
 8002c9a:	00c9      	lsls	r1, r1, #3
 8002c9c:	188a      	adds	r2, r1, r2
 8002c9e:	0052      	lsls	r2, r2, #1
 8002ca0:	5cd3      	ldrb	r3, [r2, r3]
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
    }
    if(x != 0 && y != 7) {
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <neighbours+0x274>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b07      	cmp	r3, #7
 8002cb4:	d00c      	beq.n	8002cd0 <neighbours+0x274>
      numberOfNeighbours += world[x - 1][y + 1][0];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	1e59      	subs	r1, r3, #1
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <neighbours+0x2a8>)
 8002cc0:	00c9      	lsls	r1, r1, #3
 8002cc2:	188a      	adds	r2, r1, r2
 8002cc4:	0052      	lsls	r2, r2, #1
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	001a      	movs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
    }
    if(x != 0 && y != 0) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00f      	beq.n	8002cf6 <neighbours+0x29a>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00c      	beq.n	8002cf6 <neighbours+0x29a>
      numberOfNeighbours += world[x - 1][y - 1][0];
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	1e59      	subs	r1, r3, #1
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	1e5a      	subs	r2, r3, #1
 8002ce4:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <neighbours+0x2a8>)
 8002ce6:	00c9      	lsls	r1, r1, #3
 8002ce8:	188a      	adds	r2, r1, r2
 8002cea:	0052      	lsls	r2, r2, #1
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	001a      	movs	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
    }
  }
  return numberOfNeighbours;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b005      	add	sp, #20
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	80000007 	.word	0x80000007
 8002d04:	20000118 	.word	0x20000118

08002d08 <worldCreation>:


void worldCreation() {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
   for (int i = 0; i < 8; i++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	e033      	b.n	8002d7c <worldCreation+0x74>
    for (int j = 0; j < 8; j++) {
 8002d14:	2300      	movs	r3, #0
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	e02a      	b.n	8002d70 <worldCreation+0x68>
      if (rand()%100 < density) {
 8002d1a:	f001 fbb9 	bl	8004490 <rand>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	2164      	movs	r1, #100	@ 0x64
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fd fb72 	bl	800040c <__aeabi_idivmod>
 8002d28:	000b      	movs	r3, r1
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <worldCreation+0x84>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	da08      	bge.n	8002d46 <worldCreation+0x3e>
        world[i][j][0] = 1;
 8002d34:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <worldCreation+0x88>)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	00d1      	lsls	r1, r2, #3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	188a      	adds	r2, r1, r2
 8002d3e:	0052      	lsls	r2, r2, #1
 8002d40:	2101      	movs	r1, #1
 8002d42:	54d1      	strb	r1, [r2, r3]
 8002d44:	e007      	b.n	8002d56 <worldCreation+0x4e>
      }
      else {
        world[i][j][0] = 0;
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <worldCreation+0x88>)
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	00d1      	lsls	r1, r2, #3
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	188a      	adds	r2, r1, r2
 8002d50:	0052      	lsls	r2, r2, #1
 8002d52:	2100      	movs	r1, #0
 8002d54:	54d1      	strb	r1, [r2, r3]
      }
      world[i][j][1] = 0;
 8002d56:	4a0e      	ldr	r2, [pc, #56]	@ (8002d90 <worldCreation+0x88>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	00d9      	lsls	r1, r3, #3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	18cb      	adds	r3, r1, r3
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	18d3      	adds	r3, r2, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 8; j++) {
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	ddd1      	ble.n	8002d1a <worldCreation+0x12>
   for (int i = 0; i < 8; i++) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b07      	cmp	r3, #7
 8002d80:	ddc8      	ble.n	8002d14 <worldCreation+0xc>
    }
  }
}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	20000118 	.word	0x20000118

08002d94 <anim_life_setup>:

void anim_life_setup() {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0

  //never really figured out if bool[][] initializes to false by default
  for(int i = 0; i < 8; i++) {
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	e013      	b.n	8002dc8 <anim_life_setup+0x34>
    for(int j = 0; j < 8; j++) {
 8002da0:	2300      	movs	r3, #0
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	e00a      	b.n	8002dbc <anim_life_setup+0x28>
      matrix[i][j] = 0;
 8002da6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <anim_life_setup+0x48>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	18d2      	adds	r2, r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	18d3      	adds	r3, r2, r3
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++) {
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b07      	cmp	r3, #7
 8002dc0:	ddf1      	ble.n	8002da6 <anim_life_setup+0x12>
  for(int i = 0; i < 8; i++) {
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	dde8      	ble.n	8002da0 <anim_life_setup+0xc>
    }
  }

  worldCreation();
 8002dce:	f7ff ff9b 	bl	8002d08 <worldCreation>

}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	200000d8 	.word	0x200000d8

08002de0 <anim_life_run>:

void anim_life_run() {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
  // Display current generation
  for (int i = 0; i < SIZE; i++) {
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e01a      	b.n	8002e22 <anim_life_run+0x42>
    for (int j = 0; j < SIZE; j++) {
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e011      	b.n	8002e16 <anim_life_run+0x36>
      matrix[i][j] = world[i][j][0];
 8002df2:	4b80      	ldr	r3, [pc, #512]	@ (8002ff4 <anim_life_run+0x214>)
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	00d1      	lsls	r1, r2, #3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	188a      	adds	r2, r1, r2
 8002dfc:	0052      	lsls	r2, r2, #1
 8002dfe:	5cd1      	ldrb	r1, [r2, r3]
 8002e00:	4a7d      	ldr	r2, [pc, #500]	@ (8002ff8 <anim_life_run+0x218>)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	18d2      	adds	r2, r2, r3
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	18d3      	adds	r3, r2, r3
 8002e0c:	1c0a      	adds	r2, r1, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < SIZE; j++) {
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	3301      	adds	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b07      	cmp	r3, #7
 8002e1a:	ddea      	ble.n	8002df2 <anim_life_run+0x12>
  for (int i = 0; i < SIZE; i++) {
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	dde1      	ble.n	8002dec <anim_life_run+0xc>
    }
  }

  screen_display_array(matrix);
 8002e28:	4b73      	ldr	r3, [pc, #460]	@ (8002ff8 <anim_life_run+0x218>)
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f001 f872 	bl	8003f14 <screen_display_array>

  change = 0;
 8002e30:	4b72      	ldr	r3, [pc, #456]	@ (8002ffc <anim_life_run+0x21c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
  int liveCells = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

  // Birth and death cycle
  for (int x = 0; x < SIZE; x++) {
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e059      	b.n	8002ef4 <anim_life_run+0x114>
    for (int y = 0; y < SIZE; y++) {
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e050      	b.n	8002ee8 <anim_life_run+0x108>
      // Default is for cell to stay the same
      world[x][y][1] = world[x][y][0];
 8002e46:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff4 <anim_life_run+0x214>)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	00d1      	lsls	r1, r2, #3
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	188a      	adds	r2, r1, r2
 8002e50:	0052      	lsls	r2, r2, #1
 8002e52:	5cd0      	ldrb	r0, [r2, r3]
 8002e54:	4a67      	ldr	r2, [pc, #412]	@ (8002ff4 <anim_life_run+0x214>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	00d9      	lsls	r1, r3, #3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	18cb      	adds	r3, r1, r3
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	18d3      	adds	r3, r2, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	1c02      	adds	r2, r0, #0
 8002e66:	701a      	strb	r2, [r3, #0]
      int count = neighbours(x, y);
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	0011      	movs	r1, r2
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7ff fdf4 	bl	8002a5c <neighbours>
 8002e74:	0003      	movs	r3, r0
 8002e76:	603b      	str	r3, [r7, #0]
      if (count == 3 && world[x][y][0] == 0) {
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d115      	bne.n	8002eaa <anim_life_run+0xca>
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff4 <anim_life_run+0x214>)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	00d1      	lsls	r1, r2, #3
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	188a      	adds	r2, r1, r2
 8002e88:	0052      	lsls	r2, r2, #1
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10c      	bne.n	8002eaa <anim_life_run+0xca>
        // A new cell is born
        world[x][y][1] = 1;
 8002e90:	4a58      	ldr	r2, [pc, #352]	@ (8002ff4 <anim_life_run+0x214>)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	00d9      	lsls	r1, r3, #3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	18cb      	adds	r3, r1, r3
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	18d3      	adds	r3, r2, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
        change = 1;
 8002ea4:	4b55      	ldr	r3, [pc, #340]	@ (8002ffc <anim_life_run+0x21c>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
      }
      if ((count < 2 || count > 3) && world[x][y][0] == 1) {
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	dd02      	ble.n	8002eb6 <anim_life_run+0xd6>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	dd15      	ble.n	8002ee2 <anim_life_run+0x102>
 8002eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff4 <anim_life_run+0x214>)
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	00d1      	lsls	r1, r2, #3
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	188a      	adds	r2, r1, r2
 8002ec0:	0052      	lsls	r2, r2, #1
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10c      	bne.n	8002ee2 <anim_life_run+0x102>
        // Cell dies
        world[x][y][1] = 0;
 8002ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <anim_life_run+0x214>)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	00d9      	lsls	r1, r3, #3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	18cb      	adds	r3, r1, r3
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
        change = 1;
 8002edc:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <anim_life_run+0x21c>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
    for (int y = 0; y < SIZE; y++) {
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b07      	cmp	r3, #7
 8002eec:	ddab      	ble.n	8002e46 <anim_life_run+0x66>
  for (int x = 0; x < SIZE; x++) {
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	dda2      	ble.n	8002e40 <anim_life_run+0x60>
      }
    }
  }

  // Copy next generation into place
  for (int x = 0; x < SIZE; x++) {
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	e028      	b.n	8002f52 <anim_life_run+0x172>
    for (int y = 0; y < SIZE; y++) {
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e01f      	b.n	8002f46 <anim_life_run+0x166>
      world[x][y][0] = world[x][y][1];
 8002f06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff4 <anim_life_run+0x214>)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	00d9      	lsls	r1, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	18cb      	adds	r3, r1, r3
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	18d3      	adds	r3, r2, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	7818      	ldrb	r0, [r3, #0]
 8002f18:	4b36      	ldr	r3, [pc, #216]	@ (8002ff4 <anim_life_run+0x214>)
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	00d1      	lsls	r1, r2, #3
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	188a      	adds	r2, r1, r2
 8002f22:	0052      	lsls	r2, r2, #1
 8002f24:	1c01      	adds	r1, r0, #0
 8002f26:	54d1      	strb	r1, [r2, r3]
      if(world[x][y][0]) {
 8002f28:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <anim_life_run+0x214>)
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	00d1      	lsls	r1, r2, #3
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	188a      	adds	r2, r1, r2
 8002f32:	0052      	lsls	r2, r2, #1
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <anim_life_run+0x160>
        liveCells++;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
    for (int y = 0; y < SIZE; y++) {
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3301      	adds	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b07      	cmp	r3, #7
 8002f4a:	dddc      	ble.n	8002f06 <anim_life_run+0x126>
  for (int x = 0; x < SIZE; x++) {
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	ddd3      	ble.n	8002f00 <anim_life_run+0x120>
      }
    }
  }

  if(change == 0 && predeterminedDeath == 0) {
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <anim_life_run+0x21c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d110      	bne.n	8002f82 <anim_life_run+0x1a2>
 8002f60:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <anim_life_run+0x220>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10c      	bne.n	8002f82 <anim_life_run+0x1a2>
    predeterminedDeath = 1;
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <anim_life_run+0x220>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
    //if everything stops moving the grid will reset after 1 iteration (no cells alive) or 6 iterations (some cells alive)
    if(liveCells == 0) {
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d103      	bne.n	8002f7c <anim_life_run+0x19c>
      iterations = 99;
 8002f74:	4b23      	ldr	r3, [pc, #140]	@ (8003004 <anim_life_run+0x224>)
 8002f76:	2263      	movs	r2, #99	@ 0x63
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e002      	b.n	8002f82 <anim_life_run+0x1a2>
    } else {
      iterations = 94;
 8002f7c:	4b21      	ldr	r3, [pc, #132]	@ (8003004 <anim_life_run+0x224>)
 8002f7e:	225e      	movs	r2, #94	@ 0x5e
 8002f80:	601a      	str	r2, [r3, #0]
    }
  }

  if(change == 1 && predeterminedDeath == 0) {
 8002f82:	4b1e      	ldr	r3, [pc, #120]	@ (8002ffc <anim_life_run+0x21c>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d118      	bne.n	8002fbc <anim_life_run+0x1dc>
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <anim_life_run+0x220>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d114      	bne.n	8002fbc <anim_life_run+0x1dc>
    if(liveCells == 3) {
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d104      	bne.n	8002fa2 <anim_life_run+0x1c2>
      threeCells++;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <anim_life_run+0x228>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <anim_life_run+0x228>)
 8002fa0:	601a      	str	r2, [r3, #0]
    }
    if(threeCells >= 5) {
 8002fa2:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <anim_life_run+0x228>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	dd08      	ble.n	8002fbc <anim_life_run+0x1dc>
      threeCells = 0;
 8002faa:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <anim_life_run+0x228>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
      predeterminedDeath = 1;
 8002fb0:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <anim_life_run+0x220>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
      iterations = 96;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <anim_life_run+0x224>)
 8002fb8:	2260      	movs	r2, #96	@ 0x60
 8002fba:	601a      	str	r2, [r3, #0]
    }
  }

  //forced reset
  if(iterations >= 100) {
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <anim_life_run+0x224>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b63      	cmp	r3, #99	@ 0x63
 8002fc2:	dd08      	ble.n	8002fd6 <anim_life_run+0x1f6>
    worldCreation();
 8002fc4:	f7ff fea0 	bl	8002d08 <worldCreation>
    iterations = 0;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <anim_life_run+0x224>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    predeterminedDeath = 0;
 8002fce:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <anim_life_run+0x220>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e004      	b.n	8002fe0 <anim_life_run+0x200>
  } else {
    iterations++;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <anim_life_run+0x224>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <anim_life_run+0x224>)
 8002fde:	601a      	str	r2, [r3, #0]
  }

	HAL_Delay(200);
 8002fe0:	20c8      	movs	r0, #200	@ 0xc8
 8002fe2:	f7fd faab 	bl	800053c <HAL_Delay>
	screen_clear();
 8002fe6:	f000 fec1 	bl	8003d6c <screen_clear>

}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b008      	add	sp, #32
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	20000118 	.word	0x20000118
 8002ff8:	200000d8 	.word	0x200000d8
 8002ffc:	20000198 	.word	0x20000198
 8003000:	20000199 	.word	0x20000199
 8003004:	2000019c 	.word	0x2000019c
 8003008:	200001a0 	.word	0x200001a0

0800300c <anim_name_word>:
#include "screenBuffer.h"
#include "ascii_letter.h"
#include <string.h>

void anim_name_word(char* name)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	static uint8_t index = 0;
	screen_show_letter( name[index] );
 8003014:	4b11      	ldr	r3, [pc, #68]	@ (800305c <anim_name_word+0x50>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	001a      	movs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	189b      	adds	r3, r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 fe3d 	bl	8003ca0 <screen_show_letter>
	index++;
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <anim_name_word+0x50>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <anim_name_word+0x50>)
 8003030:	701a      	strb	r2, [r3, #0]
	if(index >= strlen(name))
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <anim_name_word+0x50>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	001c      	movs	r4, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f7fd f864 	bl	8000108 <strlen>
 8003040:	0003      	movs	r3, r0
 8003042:	429c      	cmp	r4, r3
 8003044:	d302      	bcc.n	800304c <anim_name_word+0x40>
		index = 0;
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <anim_name_word+0x50>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1);
 800304c:	2001      	movs	r0, #1
 800304e:	f7fd fa75 	bl	800053c <HAL_Delay>
}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b003      	add	sp, #12
 8003058:	bd90      	pop	{r4, r7, pc}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	200001a4 	.word	0x200001a4

08003060 <anim_random_run>:
 */

#include "screenBuffer.h"

void anim_random_run()
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
	for(int i=0; i<8; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e022      	b.n	80030b2 <anim_random_run+0x52>
	{
		for(int j=0; j<8; j++)
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	e019      	b.n	80030a6 <anim_random_run+0x46>
		{
			uint8_t state = rand()%2;
 8003072:	f001 fa0d 	bl	8004490 <rand>
 8003076:	0003      	movs	r3, r0
 8003078:	4a14      	ldr	r2, [pc, #80]	@ (80030cc <anim_random_run+0x6c>)
 800307a:	4013      	ands	r3, r2
 800307c:	d504      	bpl.n	8003088 <anim_random_run+0x28>
 800307e:	3b01      	subs	r3, #1
 8003080:	2202      	movs	r2, #2
 8003082:	4252      	negs	r2, r2
 8003084:	4313      	orrs	r3, r2
 8003086:	3301      	adds	r3, #1
 8003088:	001a      	movs	r2, r3
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	701a      	strb	r2, [r3, #0]
			screen_set_bit(i, j, state);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	b2d8      	uxtb	r0, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	b2d9      	uxtb	r1, r3
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	001a      	movs	r2, r3
 800309c:	f000 fde0 	bl	8003c60 <screen_set_bit>
		for(int j=0; j<8; j++)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b07      	cmp	r3, #7
 80030aa:	dde2      	ble.n	8003072 <anim_random_run+0x12>
	for(int i=0; i<8; i++)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	ddd9      	ble.n	800306c <anim_random_run+0xc>
		}
	}
	HAL_Delay(25);
 80030b8:	2019      	movs	r0, #25
 80030ba:	f7fd fa3f 	bl	800053c <HAL_Delay>
	screen_clear();
 80030be:	f000 fe55 	bl	8003d6c <screen_clear>
}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	80000001 	.word	0x80000001

080030d0 <anim_vertical_run>:
 */

#include "screenBuffer.h"

void anim_vertical_run()
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	static uint8_t currCol = 0;
	screen_draw_line(0, currCol, 7, currCol);
 80030d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <anim_vertical_run+0x40>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	0019      	movs	r1, r3
 80030da:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <anim_vertical_run+0x40>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2207      	movs	r2, #7
 80030e0:	2000      	movs	r0, #0
 80030e2:	f000 fea9 	bl	8003e38 <screen_draw_line>

	currCol++;
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <anim_vertical_run+0x40>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <anim_vertical_run+0x40>)
 80030f0:	701a      	strb	r2, [r3, #0]
	if(currCol == 8)
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <anim_vertical_run+0x40>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d102      	bne.n	8003100 <anim_vertical_run+0x30>
		currCol = 0;
 80030fa:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <anim_vertical_run+0x40>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]

	HAL_Delay(25);
 8003100:	2019      	movs	r0, #25
 8003102:	f7fd fa1b 	bl	800053c <HAL_Delay>
	screen_clear();
 8003106:	f000 fe31 	bl	8003d6c <screen_clear>
}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200001a5 	.word	0x200001a5

08003114 <anim_rotate_run>:

void anim_rotate_run()
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
	static uint8_t currState = 0;

	if(currState < 7)
 8003118:	4b18      	ldr	r3, [pc, #96]	@ (800317c <anim_rotate_run+0x68>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d80c      	bhi.n	800313a <anim_rotate_run+0x26>
	{
		screen_draw_line(0, currState, 7, 7-currState);
 8003120:	4b16      	ldr	r3, [pc, #88]	@ (800317c <anim_rotate_run+0x68>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	0019      	movs	r1, r3
 8003126:	4b15      	ldr	r3, [pc, #84]	@ (800317c <anim_rotate_run+0x68>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	001a      	movs	r2, r3
 800312c:	2307      	movs	r3, #7
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	2207      	movs	r2, #7
 8003132:	2000      	movs	r0, #0
 8003134:	f000 fe80 	bl	8003e38 <screen_draw_line>
 8003138:	e00b      	b.n	8003152 <anim_rotate_run+0x3e>
	}
	else
	{
		screen_draw_line(currState-7, 7,14-currState,0);
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <anim_rotate_run+0x68>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	1fd8      	subs	r0, r3, #7
 8003140:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <anim_rotate_run+0x68>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	001a      	movs	r2, r3
 8003146:	230e      	movs	r3, #14
 8003148:	1a9a      	subs	r2, r3, r2
 800314a:	2300      	movs	r3, #0
 800314c:	2107      	movs	r1, #7
 800314e:	f000 fe73 	bl	8003e38 <screen_draw_line>
	}


	currState++;
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <anim_rotate_run+0x68>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <anim_rotate_run+0x68>)
 800315c:	701a      	strb	r2, [r3, #0]
	if(currState == 14)
 800315e:	4b07      	ldr	r3, [pc, #28]	@ (800317c <anim_rotate_run+0x68>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b0e      	cmp	r3, #14
 8003164:	d102      	bne.n	800316c <anim_rotate_run+0x58>
		currState = 0;
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <anim_rotate_run+0x68>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]

	HAL_Delay(25);
 800316c:	2019      	movs	r0, #25
 800316e:	f7fd f9e5 	bl	800053c <HAL_Delay>
	screen_clear();
 8003172:	f000 fdfb 	bl	8003d6c <screen_clear>

}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200001a6 	.word	0x200001a6

08003180 <anim_horizontal_run>:

void anim_horizontal_run()
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	static uint8_t currRow = 0;
	screen_draw_line(currRow, 0 ,currRow, 7);
 8003184:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <anim_horizontal_run+0x44>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	0018      	movs	r0, r3
 800318a:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <anim_horizontal_run+0x44>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	001a      	movs	r2, r3
 8003190:	2307      	movs	r3, #7
 8003192:	2100      	movs	r1, #0
 8003194:	f000 fe50 	bl	8003e38 <screen_draw_line>

	currRow++;
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <anim_horizontal_run+0x44>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <anim_horizontal_run+0x44>)
 80031a2:	701a      	strb	r2, [r3, #0]
	if(currRow == 8)
 80031a4:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <anim_horizontal_run+0x44>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d102      	bne.n	80031b2 <anim_horizontal_run+0x32>
		currRow = 0;
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <anim_horizontal_run+0x44>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(25);
 80031b2:	2019      	movs	r0, #25
 80031b4:	f7fd f9c2 	bl	800053c <HAL_Delay>
	screen_clear();
 80031b8:	f000 fdd8 	bl	8003d6c <screen_clear>
}
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	200001a7 	.word	0x200001a7

080031c8 <anim_diagonal_run>:


void anim_diagonal_run()
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	static uint8_t shifting = 0;
	static uint8_t currIndex = 0;
	for(int i=0; i<8; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e01b      	b.n	800320c <anim_diagonal_run+0x44>
	{
		screen_set_bit(currIndex+shifting, i, 1);
 80031d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <anim_diagonal_run+0x78>)
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <anim_diagonal_run+0x7c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	b2d1      	uxtb	r1, r2
 80031e4:	2201      	movs	r2, #1
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 fd3a 	bl	8003c60 <screen_set_bit>

		currIndex++;
 80031ec:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <anim_diagonal_run+0x78>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <anim_diagonal_run+0x78>)
 80031f6:	701a      	strb	r2, [r3, #0]
		if(currIndex >= 8)
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <anim_diagonal_run+0x78>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d902      	bls.n	8003206 <anim_diagonal_run+0x3e>
			currIndex = 0;
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <anim_diagonal_run+0x78>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3301      	adds	r3, #1
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b07      	cmp	r3, #7
 8003210:	dde0      	ble.n	80031d4 <anim_diagonal_run+0xc>
	}

	shifting++;
 8003212:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <anim_diagonal_run+0x7c>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <anim_diagonal_run+0x7c>)
 800321c:	701a      	strb	r2, [r3, #0]
	if(shifting >= 8)
 800321e:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <anim_diagonal_run+0x7c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b07      	cmp	r3, #7
 8003224:	d902      	bls.n	800322c <anim_diagonal_run+0x64>
		shifting = 0;
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <anim_diagonal_run+0x7c>)
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]

	HAL_Delay(25);
 800322c:	2019      	movs	r0, #25
 800322e:	f7fd f985 	bl	800053c <HAL_Delay>
	screen_clear();
 8003232:	f000 fd9b 	bl	8003d6c <screen_clear>
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	200001a8 	.word	0x200001a8
 8003244:	200001a9 	.word	0x200001a9

08003248 <anim_swipeAll_run>:
#define SWIPEALL_ANIM1 16
#define SWIPEALL_ANIM2 32
#define SWIPEALL_ANIM3 48
#define SWIPEALL_ANIM4 64
void anim_swipeAll_run()
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	static uint8_t counter = 0;
	if(counter < SWIPEALL_ANIM1)
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <anim_swipeAll_run+0x64>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b0f      	cmp	r3, #15
 8003252:	d802      	bhi.n	800325a <anim_swipeAll_run+0x12>
	{
		anim_vertical_run();
 8003254:	f7ff ff3c 	bl	80030d0 <anim_vertical_run>
 8003258:	e017      	b.n	800328a <anim_swipeAll_run+0x42>
	}
	else if(counter >= SWIPEALL_ANIM1 && counter < SWIPEALL_ANIM2)
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <anim_swipeAll_run+0x64>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d906      	bls.n	8003270 <anim_swipeAll_run+0x28>
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <anim_swipeAll_run+0x64>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b1f      	cmp	r3, #31
 8003268:	d802      	bhi.n	8003270 <anim_swipeAll_run+0x28>
	{
		anim_horizontal_run();
 800326a:	f7ff ff89 	bl	8003180 <anim_horizontal_run>
 800326e:	e00c      	b.n	800328a <anim_swipeAll_run+0x42>
	}
	else if(counter >= SWIPEALL_ANIM2 && counter < SWIPEALL_ANIM3)
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <anim_swipeAll_run+0x64>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b1f      	cmp	r3, #31
 8003276:	d906      	bls.n	8003286 <anim_swipeAll_run+0x3e>
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <anim_swipeAll_run+0x64>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b2f      	cmp	r3, #47	@ 0x2f
 800327e:	d802      	bhi.n	8003286 <anim_swipeAll_run+0x3e>
	{
		anim_diagonal_run();
 8003280:	f7ff ffa2 	bl	80031c8 <anim_diagonal_run>
 8003284:	e001      	b.n	800328a <anim_swipeAll_run+0x42>
	}
	else
	{
		anim_rotate_run();
 8003286:	f7ff ff45 	bl	8003114 <anim_rotate_run>
	}

	counter++;
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <anim_swipeAll_run+0x64>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <anim_swipeAll_run+0x64>)
 8003294:	701a      	strb	r2, [r3, #0]
	if(counter > SWIPEALL_ANIM4)
 8003296:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <anim_swipeAll_run+0x64>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b40      	cmp	r3, #64	@ 0x40
 800329c:	d902      	bls.n	80032a4 <anim_swipeAll_run+0x5c>
	{
		counter=0;
 800329e:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <anim_swipeAll_run+0x64>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
	}

}
 80032a4:	46c0      	nop			@ (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	200001aa 	.word	0x200001aa

080032b0 <gameRacer_startNewGame>:
uint32_t gameRacer_level = 0;
uint8_t gameRacer_obstacleCount = 1;
uint8_t gameRacer_carPosition = 3;

void gameRacer_startNewGame()
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	gameRacer_refreshInterval = 1200;
 80032b4:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <gameRacer_startNewGame+0x24>)
 80032b6:	2296      	movs	r2, #150	@ 0x96
 80032b8:	00d2      	lsls	r2, r2, #3
 80032ba:	801a      	strh	r2, [r3, #0]
	gameRacer_level = 0;
 80032bc:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <gameRacer_startNewGame+0x28>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
	gameRacer_obstacleCount = 1;
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <gameRacer_startNewGame+0x2c>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
	gameRacer_carPosition = 3;
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <gameRacer_startNewGame+0x30>)
 80032ca:	2203      	movs	r2, #3
 80032cc:	701a      	strb	r2, [r3, #0]
}
 80032ce:	46c0      	nop			@ (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2000000c 	.word	0x2000000c
 80032d8:	200001ac 	.word	0x200001ac
 80032dc:	2000000e 	.word	0x2000000e
 80032e0:	2000000f 	.word	0x2000000f

080032e4 <initGameOver>:

void initGameOver(uint8_t collision_row, uint8_t collision_col)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	0002      	movs	r2, r0
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	1c0a      	adds	r2, r1, #0
 80032f4:	701a      	strb	r2, [r3, #0]
	screen_clear();
 80032f6:	f000 fd39 	bl	8003d6c <screen_clear>
	for(int i=0; i<20; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e026      	b.n	800334e <initGameOver+0x6a>
	{
		screen_set_bit(collision_row, collision_col, 1);	//highlight obstacle hit
 8003300:	1dbb      	adds	r3, r7, #6
 8003302:	7819      	ldrb	r1, [r3, #0]
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	0018      	movs	r0, r3
 800330c:	f000 fca8 	bl	8003c60 <screen_set_bit>
		screen_set_bit(7, gameRacer_carPosition, 0);	//highlight car
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <initGameOver+0xa4>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2200      	movs	r2, #0
 8003316:	0019      	movs	r1, r3
 8003318:	2007      	movs	r0, #7
 800331a:	f000 fca1 	bl	8003c60 <screen_set_bit>
		HAL_Delay(CAR_BLINK_RATE);
 800331e:	2046      	movs	r0, #70	@ 0x46
 8003320:	f7fd f90c 	bl	800053c <HAL_Delay>
		screen_set_bit(collision_row, collision_col, 0);
 8003324:	1dbb      	adds	r3, r7, #6
 8003326:	7819      	ldrb	r1, [r3, #0]
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2200      	movs	r2, #0
 800332e:	0018      	movs	r0, r3
 8003330:	f000 fc96 	bl	8003c60 <screen_set_bit>
		screen_set_bit(7, gameRacer_carPosition, 1);	//highlight obstacle hit
 8003334:	4b14      	ldr	r3, [pc, #80]	@ (8003388 <initGameOver+0xa4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	0019      	movs	r1, r3
 800333c:	2007      	movs	r0, #7
 800333e:	f000 fc8f 	bl	8003c60 <screen_set_bit>
		HAL_Delay(CAR_BLINK_RATE);
 8003342:	2046      	movs	r0, #70	@ 0x46
 8003344:	f7fd f8fa 	bl	800053c <HAL_Delay>
	for(int i=0; i<20; i++)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b13      	cmp	r3, #19
 8003352:	ddd5      	ble.n	8003300 <initGameOver+0x1c>
	}

	for(int i=0; i<4; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	e00c      	b.n	8003374 <initGameOver+0x90>
	{
		screen_fill();
 800335a:	f000 fce3 	bl	8003d24 <screen_fill>
		HAL_Delay(CAR_BLINK_RATE);
 800335e:	2046      	movs	r0, #70	@ 0x46
 8003360:	f7fd f8ec 	bl	800053c <HAL_Delay>
		screen_clear();
 8003364:	f000 fd02 	bl	8003d6c <screen_clear>
		HAL_Delay(CAR_BLINK_RATE);
 8003368:	2046      	movs	r0, #70	@ 0x46
 800336a:	f7fd f8e7 	bl	800053c <HAL_Delay>
	for(int i=0; i<4; i++)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b03      	cmp	r3, #3
 8003378:	ddef      	ble.n	800335a <initGameOver+0x76>
	}

	gameRacer_startNewGame();
 800337a:	f7ff ff99 	bl	80032b0 <gameRacer_startNewGame>
}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	2000000f 	.word	0x2000000f

0800338c <shiftDownObstacle>:

void shiftDownObstacle()
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
	for(int r=6; r>=0; r--)	//start from bottom up (row 7,6,5...1,0)
 8003392:	2306      	movs	r3, #6
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e037      	b.n	8003408 <shiftDownObstacle+0x7c>
	{
		for(int c=0; c<8; c++)	//go from column left to right
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	e02e      	b.n	80033fc <shiftDownObstacle+0x70>
		{
			uint8_t tempBit = screen_get_bit(r, c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	1dfc      	adds	r4, r7, #7
 80033a8:	0011      	movs	r1, r2
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 fc40 	bl	8003c30 <screen_get_bit>
 80033b0:	0003      	movs	r3, r0
 80033b2:	7023      	strb	r3, [r4, #0]

			//check if the car collides with the incoming obstacle
			if(r == 6 && tempBit == 1 && c == gameRacer_carPosition)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d112      	bne.n	80033e0 <shiftDownObstacle+0x54>
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10e      	bne.n	80033e0 <shiftDownObstacle+0x54>
 80033c2:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <shiftDownObstacle+0x88>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	001a      	movs	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <shiftDownObstacle+0x54>
			{
				initGameOver(r, c);	//collision detected, start game-over animation
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	0011      	movs	r1, r2
 80033d8:	0018      	movs	r0, r3
 80033da:	f7ff ff83 	bl	80032e4 <initGameOver>
				return;
 80033de:	e016      	b.n	800340e <shiftDownObstacle+0x82>
			}

			//no collision detected, move pixel down 1 row
			screen_set_bit(r+1, c, tempBit);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	b2d8      	uxtb	r0, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	b2d9      	uxtb	r1, r3
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	001a      	movs	r2, r3
 80033f2:	f000 fc35 	bl	8003c60 <screen_set_bit>
		for(int c=0; c<8; c++)	//go from column left to right
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b07      	cmp	r3, #7
 8003400:	ddcd      	ble.n	800339e <shiftDownObstacle+0x12>
	for(int r=6; r>=0; r--)	//start from bottom up (row 7,6,5...1,0)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	dac4      	bge.n	8003398 <shiftDownObstacle+0xc>
		}
	}
}
 800340e:	46bd      	mov	sp, r7
 8003410:	b005      	add	sp, #20
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	2000000f 	.word	0x2000000f

08003418 <clearTopRow>:

void clearTopRow()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
	//clear top row once everything has been shifted down
	for(int col=0; col<8; col++)
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	e009      	b.n	8003438 <clearTopRow+0x20>
	{
		screen_set_bit(0, col, 0);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2200      	movs	r2, #0
 800342a:	0019      	movs	r1, r3
 800342c:	2000      	movs	r0, #0
 800342e:	f000 fc17 	bl	8003c60 <screen_set_bit>
	for(int col=0; col<8; col++)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3301      	adds	r3, #1
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b07      	cmp	r3, #7
 800343c:	ddf2      	ble.n	8003424 <clearTopRow+0xc>
	}
}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <generateNewRow>:

void generateNewRow(uint8_t numOfObstacle)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	0002      	movs	r2, r0
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	701a      	strb	r2, [r3, #0]
	//make sure to limit obstacles to 4 per row
	if(numOfObstacle > 4)
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d902      	bls.n	8003462 <generateNewRow+0x1a>
		numOfObstacle = 4;
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	2204      	movs	r2, #4
 8003460:	701a      	strb	r2, [r3, #0]

	//shift all the obstacle down 1 row
	shiftDownObstacle();
 8003462:	f7ff ff93 	bl	800338c <shiftDownObstacle>
	clearTopRow();
 8003466:	f7ff ffd7 	bl	8003418 <clearTopRow>

	//generate requested number of obstacle
	int8_t firstObstaclePos = -1;
 800346a:	2317      	movs	r3, #23
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	22ff      	movs	r2, #255	@ 0xff
 8003470:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<numOfObstacle; i++)
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	e052      	b.n	800351e <generateNewRow+0xd6>
	{
		int8_t tempCol = -1;
 8003478:	230f      	movs	r3, #15
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	22ff      	movs	r2, #255	@ 0xff
 800347e:	701a      	strb	r2, [r3, #0]
		while(tempCol == -1)
 8003480:	e038      	b.n	80034f4 <generateNewRow+0xac>
		{
			uint8_t random = rand()%8;
 8003482:	f001 f805 	bl	8004490 <rand>
 8003486:	0003      	movs	r3, r0
 8003488:	4a2a      	ldr	r2, [pc, #168]	@ (8003534 <generateNewRow+0xec>)
 800348a:	4013      	ands	r3, r2
 800348c:	d504      	bpl.n	8003498 <generateNewRow+0x50>
 800348e:	3b01      	subs	r3, #1
 8003490:	2208      	movs	r2, #8
 8003492:	4252      	negs	r2, r2
 8003494:	4313      	orrs	r3, r2
 8003496:	3301      	adds	r3, #1
 8003498:	001a      	movs	r2, r3
 800349a:	240e      	movs	r4, #14
 800349c:	193b      	adds	r3, r7, r4
 800349e:	701a      	strb	r2, [r3, #0]
			if(screen_get_bit(0, random) == 0)	//if that pixel is OFF then continue
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	0019      	movs	r1, r3
 80034a6:	2000      	movs	r0, #0
 80034a8:	f000 fbc2 	bl	8003c30 <screen_get_bit>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d121      	bne.n	80034f4 <generateNewRow+0xac>
			{
				if(firstObstaclePos != -1) //if there was already a first obstacle generated, we need to check for edge-cases
 80034b0:	2117      	movs	r1, #23
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	d015      	beq.n	80034e8 <generateNewRow+0xa0>
				{
					if(random-firstObstaclePos != -1 && random-firstObstaclePos != 1) 	// only accept the proposed 2nd obstacle
 80034bc:	193b      	adds	r3, r7, r4
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	d013      	beq.n	80034f4 <generateNewRow+0xac>
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d00b      	beq.n	80034f4 <generateNewRow+0xac>
						tempCol = random;												// if it is not beside an existing one.
 80034dc:	230f      	movs	r3, #15
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	193a      	adds	r2, r7, r4
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e005      	b.n	80034f4 <generateNewRow+0xac>
				}																		// (leave at least a 1 pixel gap to avoid un-winnable scenarios)
				else
					tempCol = random;
 80034e8:	230f      	movs	r3, #15
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	220e      	movs	r2, #14
 80034ee:	18ba      	adds	r2, r7, r2
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	701a      	strb	r2, [r3, #0]
		while(tempCol == -1)
 80034f4:	240f      	movs	r4, #15
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	d0c0      	beq.n	8003482 <generateNewRow+0x3a>
			}
		}
		screen_set_bit(0, tempCol, 1);
 8003500:	193b      	adds	r3, r7, r4
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	0019      	movs	r1, r3
 8003508:	2000      	movs	r0, #0
 800350a:	f000 fba9 	bl	8003c60 <screen_set_bit>
		firstObstaclePos = tempCol;	//save temporarily the position of the first obstacle
 800350e:	2317      	movs	r3, #23
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	193a      	adds	r2, r7, r4
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<numOfObstacle; i++)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3301      	adds	r3, #1
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	1dfb      	adds	r3, r7, #7
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	dba7      	blt.n	8003478 <generateNewRow+0x30>
	}
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b007      	add	sp, #28
 8003530:	bd90      	pop	{r4, r7, pc}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	80000007 	.word	0x80000007

08003538 <updateDifficulty>:

void updateDifficulty()
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	if		(gameRacer_level == 10) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=1000;	}
 800353c:	4b65      	ldr	r3, [pc, #404]	@ (80036d4 <updateDifficulty+0x19c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b0a      	cmp	r3, #10
 8003542:	d107      	bne.n	8003554 <updateDifficulty+0x1c>
 8003544:	4b64      	ldr	r3, [pc, #400]	@ (80036d8 <updateDifficulty+0x1a0>)
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	4b64      	ldr	r3, [pc, #400]	@ (80036dc <updateDifficulty+0x1a4>)
 800354c:	22fa      	movs	r2, #250	@ 0xfa
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	801a      	strh	r2, [r3, #0]
	else if	(gameRacer_level == 130) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=600; 	}
	else if	(gameRacer_level == 140) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=500;	}
	else if	(gameRacer_level == 150) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=400;	}
	else if	(gameRacer_level == 160) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=300;	}
	else if	(gameRacer_level == 170) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=200;	}
}
 8003552:	e0bc      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 20) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=900;	}
 8003554:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <updateDifficulty+0x19c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b14      	cmp	r3, #20
 800355a:	d107      	bne.n	800356c <updateDifficulty+0x34>
 800355c:	4b5e      	ldr	r3, [pc, #376]	@ (80036d8 <updateDifficulty+0x1a0>)
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	4b5e      	ldr	r3, [pc, #376]	@ (80036dc <updateDifficulty+0x1a4>)
 8003564:	22e1      	movs	r2, #225	@ 0xe1
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	801a      	strh	r2, [r3, #0]
}
 800356a:	e0b0      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 30) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=800;	}
 800356c:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <updateDifficulty+0x19c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b1e      	cmp	r3, #30
 8003572:	d107      	bne.n	8003584 <updateDifficulty+0x4c>
 8003574:	4b58      	ldr	r3, [pc, #352]	@ (80036d8 <updateDifficulty+0x1a0>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	4b58      	ldr	r3, [pc, #352]	@ (80036dc <updateDifficulty+0x1a4>)
 800357c:	22c8      	movs	r2, #200	@ 0xc8
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	801a      	strh	r2, [r3, #0]
}
 8003582:	e0a4      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 40) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=700;	}
 8003584:	4b53      	ldr	r3, [pc, #332]	@ (80036d4 <updateDifficulty+0x19c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b28      	cmp	r3, #40	@ 0x28
 800358a:	d107      	bne.n	800359c <updateDifficulty+0x64>
 800358c:	4b52      	ldr	r3, [pc, #328]	@ (80036d8 <updateDifficulty+0x1a0>)
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	4b52      	ldr	r3, [pc, #328]	@ (80036dc <updateDifficulty+0x1a4>)
 8003594:	22af      	movs	r2, #175	@ 0xaf
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	801a      	strh	r2, [r3, #0]
}
 800359a:	e098      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 50) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=600; 	}
 800359c:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <updateDifficulty+0x19c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b32      	cmp	r3, #50	@ 0x32
 80035a2:	d107      	bne.n	80035b4 <updateDifficulty+0x7c>
 80035a4:	4b4c      	ldr	r3, [pc, #304]	@ (80036d8 <updateDifficulty+0x1a0>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	4b4c      	ldr	r3, [pc, #304]	@ (80036dc <updateDifficulty+0x1a4>)
 80035ac:	2296      	movs	r2, #150	@ 0x96
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	801a      	strh	r2, [r3, #0]
}
 80035b2:	e08c      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 60) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=500;	}
 80035b4:	4b47      	ldr	r3, [pc, #284]	@ (80036d4 <updateDifficulty+0x19c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b3c      	cmp	r3, #60	@ 0x3c
 80035ba:	d107      	bne.n	80035cc <updateDifficulty+0x94>
 80035bc:	4b46      	ldr	r3, [pc, #280]	@ (80036d8 <updateDifficulty+0x1a0>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	4b46      	ldr	r3, [pc, #280]	@ (80036dc <updateDifficulty+0x1a4>)
 80035c4:	22fa      	movs	r2, #250	@ 0xfa
 80035c6:	0052      	lsls	r2, r2, #1
 80035c8:	801a      	strh	r2, [r3, #0]
}
 80035ca:	e080      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 70) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=400;	}
 80035cc:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <updateDifficulty+0x19c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b46      	cmp	r3, #70	@ 0x46
 80035d2:	d107      	bne.n	80035e4 <updateDifficulty+0xac>
 80035d4:	4b40      	ldr	r3, [pc, #256]	@ (80036d8 <updateDifficulty+0x1a0>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	4b40      	ldr	r3, [pc, #256]	@ (80036dc <updateDifficulty+0x1a4>)
 80035dc:	22c8      	movs	r2, #200	@ 0xc8
 80035de:	0052      	lsls	r2, r2, #1
 80035e0:	801a      	strh	r2, [r3, #0]
}
 80035e2:	e074      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 80) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=300;	}
 80035e4:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <updateDifficulty+0x19c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b50      	cmp	r3, #80	@ 0x50
 80035ea:	d107      	bne.n	80035fc <updateDifficulty+0xc4>
 80035ec:	4b3a      	ldr	r3, [pc, #232]	@ (80036d8 <updateDifficulty+0x1a0>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	4b3a      	ldr	r3, [pc, #232]	@ (80036dc <updateDifficulty+0x1a4>)
 80035f4:	2296      	movs	r2, #150	@ 0x96
 80035f6:	0052      	lsls	r2, r2, #1
 80035f8:	801a      	strh	r2, [r3, #0]
}
 80035fa:	e068      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 90) 	{ gameRacer_obstacleCount=1; 	gameRacer_refreshInterval=200;	}
 80035fc:	4b35      	ldr	r3, [pc, #212]	@ (80036d4 <updateDifficulty+0x19c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b5a      	cmp	r3, #90	@ 0x5a
 8003602:	d106      	bne.n	8003612 <updateDifficulty+0xda>
 8003604:	4b34      	ldr	r3, [pc, #208]	@ (80036d8 <updateDifficulty+0x1a0>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <updateDifficulty+0x1a4>)
 800360c:	22c8      	movs	r2, #200	@ 0xc8
 800360e:	801a      	strh	r2, [r3, #0]
}
 8003610:	e05d      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 100) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=900;	}
 8003612:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <updateDifficulty+0x19c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d107      	bne.n	800362a <updateDifficulty+0xf2>
 800361a:	4b2f      	ldr	r3, [pc, #188]	@ (80036d8 <updateDifficulty+0x1a0>)
 800361c:	2202      	movs	r2, #2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	4b2e      	ldr	r3, [pc, #184]	@ (80036dc <updateDifficulty+0x1a4>)
 8003622:	22e1      	movs	r2, #225	@ 0xe1
 8003624:	0092      	lsls	r2, r2, #2
 8003626:	801a      	strh	r2, [r3, #0]
}
 8003628:	e051      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 110) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=800;	}
 800362a:	4b2a      	ldr	r3, [pc, #168]	@ (80036d4 <updateDifficulty+0x19c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b6e      	cmp	r3, #110	@ 0x6e
 8003630:	d107      	bne.n	8003642 <updateDifficulty+0x10a>
 8003632:	4b29      	ldr	r3, [pc, #164]	@ (80036d8 <updateDifficulty+0x1a0>)
 8003634:	2202      	movs	r2, #2
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <updateDifficulty+0x1a4>)
 800363a:	22c8      	movs	r2, #200	@ 0xc8
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	801a      	strh	r2, [r3, #0]
}
 8003640:	e045      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 120) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=700;	}
 8003642:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <updateDifficulty+0x19c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b78      	cmp	r3, #120	@ 0x78
 8003648:	d107      	bne.n	800365a <updateDifficulty+0x122>
 800364a:	4b23      	ldr	r3, [pc, #140]	@ (80036d8 <updateDifficulty+0x1a0>)
 800364c:	2202      	movs	r2, #2
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <updateDifficulty+0x1a4>)
 8003652:	22af      	movs	r2, #175	@ 0xaf
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	801a      	strh	r2, [r3, #0]
}
 8003658:	e039      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 130) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=600; 	}
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <updateDifficulty+0x19c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b82      	cmp	r3, #130	@ 0x82
 8003660:	d107      	bne.n	8003672 <updateDifficulty+0x13a>
 8003662:	4b1d      	ldr	r3, [pc, #116]	@ (80036d8 <updateDifficulty+0x1a0>)
 8003664:	2202      	movs	r2, #2
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	4b1c      	ldr	r3, [pc, #112]	@ (80036dc <updateDifficulty+0x1a4>)
 800366a:	2296      	movs	r2, #150	@ 0x96
 800366c:	0092      	lsls	r2, r2, #2
 800366e:	801a      	strh	r2, [r3, #0]
}
 8003670:	e02d      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 140) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=500;	}
 8003672:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <updateDifficulty+0x19c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b8c      	cmp	r3, #140	@ 0x8c
 8003678:	d107      	bne.n	800368a <updateDifficulty+0x152>
 800367a:	4b17      	ldr	r3, [pc, #92]	@ (80036d8 <updateDifficulty+0x1a0>)
 800367c:	2202      	movs	r2, #2
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <updateDifficulty+0x1a4>)
 8003682:	22fa      	movs	r2, #250	@ 0xfa
 8003684:	0052      	lsls	r2, r2, #1
 8003686:	801a      	strh	r2, [r3, #0]
}
 8003688:	e021      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 150) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=400;	}
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <updateDifficulty+0x19c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b96      	cmp	r3, #150	@ 0x96
 8003690:	d107      	bne.n	80036a2 <updateDifficulty+0x16a>
 8003692:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <updateDifficulty+0x1a0>)
 8003694:	2202      	movs	r2, #2
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <updateDifficulty+0x1a4>)
 800369a:	22c8      	movs	r2, #200	@ 0xc8
 800369c:	0052      	lsls	r2, r2, #1
 800369e:	801a      	strh	r2, [r3, #0]
}
 80036a0:	e015      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 160) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=300;	}
 80036a2:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <updateDifficulty+0x19c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80036a8:	d107      	bne.n	80036ba <updateDifficulty+0x182>
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <updateDifficulty+0x1a0>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <updateDifficulty+0x1a4>)
 80036b2:	2296      	movs	r2, #150	@ 0x96
 80036b4:	0052      	lsls	r2, r2, #1
 80036b6:	801a      	strh	r2, [r3, #0]
}
 80036b8:	e009      	b.n	80036ce <updateDifficulty+0x196>
	else if	(gameRacer_level == 170) 	{ gameRacer_obstacleCount=2; 	gameRacer_refreshInterval=200;	}
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <updateDifficulty+0x19c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2baa      	cmp	r3, #170	@ 0xaa
 80036c0:	d105      	bne.n	80036ce <updateDifficulty+0x196>
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <updateDifficulty+0x1a0>)
 80036c4:	2202      	movs	r2, #2
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <updateDifficulty+0x1a4>)
 80036ca:	22c8      	movs	r2, #200	@ 0xc8
 80036cc:	801a      	strh	r2, [r3, #0]
}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	200001ac 	.word	0x200001ac
 80036d8:	2000000e 	.word	0x2000000e
 80036dc:	2000000c 	.word	0x2000000c

080036e0 <updateCarPosition>:

void updateCarPosition()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BTB_GPIO_Port, BTB_Pin) == GPIO_PIN_RESET)
 80036e4:	2390      	movs	r3, #144	@ 0x90
 80036e6:	05db      	lsls	r3, r3, #23
 80036e8:	2140      	movs	r1, #64	@ 0x40
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7fd fd4a 	bl	8001184 <HAL_GPIO_ReadPin>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d128      	bne.n	8003746 <updateCarPosition+0x66>
	{
		//Check for collision
		if(screen_get_bit(7, gameRacer_carPosition+1) == 1)
 80036f4:	4b15      	ldr	r3, [pc, #84]	@ (800374c <updateCarPosition+0x6c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	0019      	movs	r1, r3
 80036fe:	2007      	movs	r0, #7
 8003700:	f000 fa96 	bl	8003c30 <screen_get_bit>
 8003704:	0003      	movs	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <updateCarPosition+0x3c>
		{
			initGameOver(7, gameRacer_carPosition+1);	//collision detected, start game-over animation
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <updateCarPosition+0x6c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	0019      	movs	r1, r3
 8003714:	2007      	movs	r0, #7
 8003716:	f7ff fde5 	bl	80032e4 <initGameOver>
			return;
 800371a:	e014      	b.n	8003746 <updateCarPosition+0x66>
		}

		//no collision detected, proceed
		screen_set_bit(7, gameRacer_carPosition, 0);	//clear pixel in previous car position
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <updateCarPosition+0x6c>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	0019      	movs	r1, r3
 8003724:	2007      	movs	r0, #7
 8003726:	f000 fa9b 	bl	8003c60 <screen_set_bit>
		if(gameRacer_carPosition==7)
 800372a:	4b08      	ldr	r3, [pc, #32]	@ (800374c <updateCarPosition+0x6c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b07      	cmp	r3, #7
 8003730:	d103      	bne.n	800373a <updateCarPosition+0x5a>
			gameRacer_carPosition = 0; //wrap around to the right side
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <updateCarPosition+0x6c>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e005      	b.n	8003746 <updateCarPosition+0x66>
		else
			gameRacer_carPosition++;
 800373a:	4b04      	ldr	r3, [pc, #16]	@ (800374c <updateCarPosition+0x6c>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b02      	ldr	r3, [pc, #8]	@ (800374c <updateCarPosition+0x6c>)
 8003744:	701a      	strb	r2, [r3, #0]
		if(gameRacer_carPosition==0)
			gameRacer_carPosition=7; //wrap around to the left side
		else
			gameRacer_carPosition--;
	}*/
}
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	2000000f 	.word	0x2000000f

08003750 <gameRacer_run>:

void gameRacer_run()
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
	static uint32_t ts_lastExec = 0;
	if(HAL_GetTick() - ts_lastExec > gameRacer_refreshInterval)
 8003754:	f7fc fee8 	bl	8000528 <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	4b2f      	ldr	r3, [pc, #188]	@ (8003818 <gameRacer_run+0xc8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	4a2e      	ldr	r2, [pc, #184]	@ (800381c <gameRacer_run+0xcc>)
 8003762:	8812      	ldrh	r2, [r2, #0]
 8003764:	4293      	cmp	r3, r2
 8003766:	d910      	bls.n	800378a <gameRacer_run+0x3a>
	{
		ts_lastExec = HAL_GetTick();
 8003768:	f7fc fede 	bl	8000528 <HAL_GetTick>
 800376c:	0002      	movs	r2, r0
 800376e:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <gameRacer_run+0xc8>)
 8003770:	601a      	str	r2, [r3, #0]
		generateNewRow(gameRacer_obstacleCount);
 8003772:	4b2b      	ldr	r3, [pc, #172]	@ (8003820 <gameRacer_run+0xd0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff fe66 	bl	8003448 <generateNewRow>
		gameRacer_level++;
 800377c:	4b29      	ldr	r3, [pc, #164]	@ (8003824 <gameRacer_run+0xd4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	4b28      	ldr	r3, [pc, #160]	@ (8003824 <gameRacer_run+0xd4>)
 8003784:	601a      	str	r2, [r3, #0]
		updateDifficulty();
 8003786:	f7ff fed7 	bl	8003538 <updateDifficulty>
	}

	static uint32_t ts_blinkingCar = 0;
	if(HAL_GetTick() - ts_blinkingCar > CAR_BLINK_RATE)
 800378a:	f7fc fecd 	bl	8000528 <HAL_GetTick>
 800378e:	0002      	movs	r2, r0
 8003790:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <gameRacer_run+0xd8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b46      	cmp	r3, #70	@ 0x46
 8003798:	d92c      	bls.n	80037f4 <gameRacer_run+0xa4>
	{
		ts_blinkingCar = HAL_GetTick();
 800379a:	f7fc fec5 	bl	8000528 <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <gameRacer_run+0xd8>)
 80037a2:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(BTB_GPIO_Port, BTB_Pin) == GPIO_PIN_RESET /*|| HAL_GPIO_ReadPin(BTA_GPIO_Port, BTA_Pin) == GPIO_PIN_RESET*/)
 80037a4:	2390      	movs	r3, #144	@ 0x90
 80037a6:	05db      	lsls	r3, r3, #23
 80037a8:	2140      	movs	r1, #64	@ 0x40
 80037aa:	0018      	movs	r0, r3
 80037ac:	f7fd fcea 	bl	8001184 <HAL_GPIO_ReadPin>
 80037b0:	1e03      	subs	r3, r0, #0
 80037b2:	d107      	bne.n	80037c4 <gameRacer_run+0x74>
		{
			screen_set_bit(7, gameRacer_carPosition, 1);	//force the LED to stay ON when the player is moving the car
 80037b4:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <gameRacer_run+0xdc>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2201      	movs	r2, #1
 80037ba:	0019      	movs	r1, r3
 80037bc:	2007      	movs	r0, #7
 80037be:	f000 fa4f 	bl	8003c60 <screen_set_bit>
 80037c2:	e017      	b.n	80037f4 <gameRacer_run+0xa4>
		}
		else
		{
			if(screen_get_bit(7, gameRacer_carPosition) == 1)	//IF led is ON then turned it off
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <gameRacer_run+0xdc>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	0019      	movs	r1, r3
 80037ca:	2007      	movs	r0, #7
 80037cc:	f000 fa30 	bl	8003c30 <screen_get_bit>
 80037d0:	0003      	movs	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <gameRacer_run+0x96>
				screen_set_bit(7, gameRacer_carPosition, 0);
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <gameRacer_run+0xdc>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	0019      	movs	r1, r3
 80037de:	2007      	movs	r0, #7
 80037e0:	f000 fa3e 	bl	8003c60 <screen_set_bit>
 80037e4:	e006      	b.n	80037f4 <gameRacer_run+0xa4>
			else
				screen_set_bit(7, gameRacer_carPosition, 1);
 80037e6:	4b11      	ldr	r3, [pc, #68]	@ (800382c <gameRacer_run+0xdc>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	0019      	movs	r1, r3
 80037ee:	2007      	movs	r0, #7
 80037f0:	f000 fa36 	bl	8003c60 <screen_set_bit>
		}
	}

	static uint32_t ts_btnListen = 0;
	if(HAL_GetTick() - ts_btnListen > 100)
 80037f4:	f7fc fe98 	bl	8000528 <HAL_GetTick>
 80037f8:	0002      	movs	r2, r0
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <gameRacer_run+0xe0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b64      	cmp	r3, #100	@ 0x64
 8003802:	d906      	bls.n	8003812 <gameRacer_run+0xc2>
	{
		ts_btnListen = HAL_GetTick();
 8003804:	f7fc fe90 	bl	8000528 <HAL_GetTick>
 8003808:	0002      	movs	r2, r0
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <gameRacer_run+0xe0>)
 800380c:	601a      	str	r2, [r3, #0]
		updateCarPosition();
 800380e:	f7ff ff67 	bl	80036e0 <updateCarPosition>
	}
}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200001b0 	.word	0x200001b0
 800381c:	2000000c 	.word	0x2000000c
 8003820:	2000000e 	.word	0x2000000e
 8003824:	200001ac 	.word	0x200001ac
 8003828:	200001b4 	.word	0x200001b4
 800382c:	2000000f 	.word	0x2000000f
 8003830:	200001b8 	.word	0x200001b8

08003834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b089      	sub	sp, #36	@ 0x24
 8003838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383a:	240c      	movs	r4, #12
 800383c:	193b      	adds	r3, r7, r4
 800383e:	0018      	movs	r0, r3
 8003840:	2314      	movs	r3, #20
 8003842:	001a      	movs	r2, r3
 8003844:	2100      	movs	r1, #0
 8003846:	f000 ff71 	bl	800472c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	4b2e      	ldr	r3, [pc, #184]	@ (8003904 <MX_GPIO_Init+0xd0>)
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	4b2d      	ldr	r3, [pc, #180]	@ (8003904 <MX_GPIO_Init+0xd0>)
 8003850:	2180      	movs	r1, #128	@ 0x80
 8003852:	0289      	lsls	r1, r1, #10
 8003854:	430a      	orrs	r2, r1
 8003856:	615a      	str	r2, [r3, #20]
 8003858:	4b2a      	ldr	r3, [pc, #168]	@ (8003904 <MX_GPIO_Init+0xd0>)
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003866:	4b27      	ldr	r3, [pc, #156]	@ (8003904 <MX_GPIO_Init+0xd0>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <MX_GPIO_Init+0xd0>)
 800386c:	2180      	movs	r1, #128	@ 0x80
 800386e:	02c9      	lsls	r1, r1, #11
 8003870:	430a      	orrs	r2, r1
 8003872:	615a      	str	r2, [r3, #20]
 8003874:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <MX_GPIO_Init+0xd0>)
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	02db      	lsls	r3, r3, #11
 800387c:	4013      	ands	r3, r2
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_P_0_Pin|LED_P_1_Pin|LED_P_2_Pin|LED_N_2_Pin
 8003882:	4921      	ldr	r1, [pc, #132]	@ (8003908 <MX_GPIO_Init+0xd4>)
 8003884:	4b21      	ldr	r3, [pc, #132]	@ (800390c <MX_GPIO_Init+0xd8>)
 8003886:	2200      	movs	r2, #0
 8003888:	0018      	movs	r0, r3
 800388a:	f7fd fc98 	bl	80011be <HAL_GPIO_WritePin>
                          |LED_N_3_Pin|LED_N_4_Pin|LED_N_5_Pin|LED_N_6_Pin
                          |LED_N_7_Pin|LED_P_3_Pin|LED_P_4_Pin|LED_P_5_Pin
                          |LED_P_6_Pin|LED_P_7_Pin|LED_N_0_Pin|LED_N_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTB_Pin;
 800388e:	193b      	adds	r3, r7, r4
 8003890:	2240      	movs	r2, #64	@ 0x40
 8003892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003894:	193b      	adds	r3, r7, r4
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800389a:	193b      	adds	r3, r7, r4
 800389c:	2201      	movs	r2, #1
 800389e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTB_GPIO_Port, &GPIO_InitStruct);
 80038a0:	193a      	adds	r2, r7, r4
 80038a2:	2390      	movs	r3, #144	@ 0x90
 80038a4:	05db      	lsls	r3, r3, #23
 80038a6:	0011      	movs	r1, r2
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fd fafb 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_P_0_Pin|LED_P_1_Pin|LED_P_2_Pin|LED_P_3_Pin
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	22ff      	movs	r2, #255	@ 0xff
 80038b2:	601a      	str	r2, [r3, #0]
                          |LED_P_4_Pin|LED_P_5_Pin|LED_P_6_Pin|LED_P_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b4:	193b      	adds	r3, r7, r4
 80038b6:	2201      	movs	r2, #1
 80038b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	193b      	adds	r3, r7, r4
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c0:	193b      	adds	r3, r7, r4
 80038c2:	2203      	movs	r2, #3
 80038c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	193b      	adds	r3, r7, r4
 80038c8:	4a10      	ldr	r2, [pc, #64]	@ (800390c <MX_GPIO_Init+0xd8>)
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f7fd fae9 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_N_2_Pin|LED_N_3_Pin|LED_N_4_Pin|LED_N_5_Pin
 80038d2:	0021      	movs	r1, r4
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	22ff      	movs	r2, #255	@ 0xff
 80038d8:	0212      	lsls	r2, r2, #8
 80038da:	601a      	str	r2, [r3, #0]
                          |LED_N_6_Pin|LED_N_7_Pin|LED_N_0_Pin|LED_N_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	2211      	movs	r2, #17
 80038e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	2203      	movs	r2, #3
 80038ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	4a06      	ldr	r2, [pc, #24]	@ (800390c <MX_GPIO_Init+0xd8>)
 80038f2:	0019      	movs	r1, r3
 80038f4:	0010      	movs	r0, r2
 80038f6:	f7fd fad5 	bl	8000ea4 <HAL_GPIO_Init>

}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b009      	add	sp, #36	@ 0x24
 8003900:	bd90      	pop	{r4, r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	40021000 	.word	0x40021000
 8003908:	0000ffff 	.word	0x0000ffff
 800390c:	48000400 	.word	0x48000400

08003910 <matrix_setLed_on>:
#include "ledHandler.h"

void matrix_setLed_on(uint8_t row, uint8_t col)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	1dfb      	adds	r3, r7, #7
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	1c0a      	adds	r2, r1, #0
 8003920:	701a      	strb	r2, [r3, #0]
	//turn on all leds
	matrix_setLed_allOff();
 8003922:	f000 f81d 	bl	8003960 <matrix_setLed_allOff>
	
	HAL_GPIO_WritePin(GPIOB, 0x01<<row, GPIO_PIN_SET);
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	0013      	movs	r3, r2
 8003930:	b29b      	uxth	r3, r3
 8003932:	480a      	ldr	r0, [pc, #40]	@ (800395c <matrix_setLed_on+0x4c>)
 8003934:	2201      	movs	r2, #1
 8003936:	0019      	movs	r1, r3
 8003938:	f7fd fc41 	bl	80011be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 0x01<<(col+8), GPIO_PIN_RESET);
 800393c:	1dbb      	adds	r3, r7, #6
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	0013      	movs	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	4804      	ldr	r0, [pc, #16]	@ (800395c <matrix_setLed_on+0x4c>)
 800394c:	2200      	movs	r2, #0
 800394e:	0019      	movs	r1, r3
 8003950:	f7fd fc35 	bl	80011be <HAL_GPIO_WritePin>
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}
 800395c:	48000400 	.word	0x48000400

08003960 <matrix_setLed_allOff>:

void matrix_setLed_allOff()
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 0x00FFU, GPIO_PIN_RESET);
 8003964:	4b07      	ldr	r3, [pc, #28]	@ (8003984 <matrix_setLed_allOff+0x24>)
 8003966:	2200      	movs	r2, #0
 8003968:	21ff      	movs	r1, #255	@ 0xff
 800396a:	0018      	movs	r0, r3
 800396c:	f7fd fc27 	bl	80011be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 0xFF00U, GPIO_PIN_SET);
 8003970:	23ff      	movs	r3, #255	@ 0xff
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	4803      	ldr	r0, [pc, #12]	@ (8003984 <matrix_setLed_allOff+0x24>)
 8003976:	2201      	movs	r2, #1
 8003978:	0019      	movs	r1, r3
 800397a:	f7fd fc20 	bl	80011be <HAL_GPIO_WritePin>
}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	48000400 	.word	0x48000400

08003988 <animationSelector>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void animationSelector()
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	static uint32_t schedulerTimestamp_updateName = 0;
	if( HAL_GPIO_ReadPin(BTB_GPIO_Port, BTB_Pin) == GPIO_PIN_RESET )
 800398c:	2390      	movs	r3, #144	@ 0x90
 800398e:	05db      	lsls	r3, r3, #23
 8003990:	2140      	movs	r1, #64	@ 0x40
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd fbf6 	bl	8001184 <HAL_GPIO_ReadPin>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d128      	bne.n	80039ee <animationSelector+0x66>
	{
		currentAnimation++;
 800399c:	4b41      	ldr	r3, [pc, #260]	@ (8003aa4 <animationSelector+0x11c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <animationSelector+0x11c>)
 80039a6:	701a      	strb	r2, [r3, #0]
		if(currentAnimation == MAX_ANIM_ID)
 80039a8:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa4 <animationSelector+0x11c>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b0a      	cmp	r3, #10
 80039ae:	d116      	bne.n	80039de <animationSelector+0x56>
			currentAnimation = 0;
 80039b0:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa4 <animationSelector+0x11c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]

		//HAL_Delay(100);
		while(HAL_GPIO_ReadPin(BTB_GPIO_Port, BTB_Pin) == GPIO_PIN_RESET)
 80039b6:	e012      	b.n	80039de <animationSelector+0x56>
		{
			screen_show_letter((currentAnimation < 9)?(ASCII_ONE + currentAnimation):(ASCII_LOWER_A + currentAnimation - 9));
 80039b8:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa4 <animationSelector+0x11c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d804      	bhi.n	80039ca <animationSelector+0x42>
 80039c0:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <animationSelector+0x11c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	3331      	adds	r3, #49	@ 0x31
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e003      	b.n	80039d2 <animationSelector+0x4a>
 80039ca:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <animationSelector+0x11c>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	3358      	adds	r3, #88	@ 0x58
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f964 	bl	8003ca0 <screen_show_letter>
			HAL_Delay(100);
 80039d8:	2064      	movs	r0, #100	@ 0x64
 80039da:	f7fc fdaf 	bl	800053c <HAL_Delay>
		while(HAL_GPIO_ReadPin(BTB_GPIO_Port, BTB_Pin) == GPIO_PIN_RESET)
 80039de:	2390      	movs	r3, #144	@ 0x90
 80039e0:	05db      	lsls	r3, r3, #23
 80039e2:	2140      	movs	r1, #64	@ 0x40
 80039e4:	0018      	movs	r0, r3
 80039e6:	f7fd fbcd 	bl	8001184 <HAL_GPIO_ReadPin>
 80039ea:	1e03      	subs	r3, r0, #0
 80039ec:	d0e4      	beq.n	80039b8 <animationSelector+0x30>
		}
	}

	switch(currentAnimation)
 80039ee:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <animationSelector+0x11c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	d844      	bhi.n	8003a80 <animationSelector+0xf8>
 80039f6:	009a      	lsls	r2, r3, #2
 80039f8:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa8 <animationSelector+0x120>)
 80039fa:	18d3      	adds	r3, r2, r3
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	469f      	mov	pc, r3
	{
		 case 0:
			 anim_random_run();
 8003a00:	f7ff fb2e 	bl	8003060 <anim_random_run>
			 break;
 8003a04:	e04a      	b.n	8003a9c <animationSelector+0x114>
		 case 1:
			 if(HAL_GetTick() - schedulerTimestamp_updateName > DELAY_PER_LETTER)
 8003a06:	f7fc fd8f 	bl	8000528 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	4b27      	ldr	r3, [pc, #156]	@ (8003aac <animationSelector+0x124>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	1ad2      	subs	r2, r2, r3
 8003a12:	23fa      	movs	r3, #250	@ 0xfa
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d93d      	bls.n	8003a96 <animationSelector+0x10e>
			 {
				 schedulerTimestamp_updateName = HAL_GetTick();
 8003a1a:	f7fc fd85 	bl	8000528 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	4b22      	ldr	r3, [pc, #136]	@ (8003aac <animationSelector+0x124>)
 8003a22:	601a      	str	r2, [r3, #0]
				 anim_name_word("DEFCON32! ");
 8003a24:	4b22      	ldr	r3, [pc, #136]	@ (8003ab0 <animationSelector+0x128>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff faf0 	bl	800300c <anim_name_word>
			 }
			 break;
 8003a2c:	e033      	b.n	8003a96 <animationSelector+0x10e>
		 case 2:
			 anim_horizontal_run();
 8003a2e:	f7ff fba7 	bl	8003180 <anim_horizontal_run>
			 break;
 8003a32:	e033      	b.n	8003a9c <animationSelector+0x114>
		 case 3:
			 anim_vertical_run();
 8003a34:	f7ff fb4c 	bl	80030d0 <anim_vertical_run>
			 break;
 8003a38:	e030      	b.n	8003a9c <animationSelector+0x114>
		 case 4:
			 anim_diagonal_run();
 8003a3a:	f7ff fbc5 	bl	80031c8 <anim_diagonal_run>
			 break;
 8003a3e:	e02d      	b.n	8003a9c <animationSelector+0x114>
		 case 5:
			 anim_rotate_run();
 8003a40:	f7ff fb68 	bl	8003114 <anim_rotate_run>
			 break;
 8003a44:	e02a      	b.n	8003a9c <animationSelector+0x114>
		 case 6:
			 if(HAL_GetTick() - schedulerTimestamp_updateName > DELAY_PER_LETTER)
 8003a46:	f7fc fd6f 	bl	8000528 <HAL_GetTick>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	4b17      	ldr	r3, [pc, #92]	@ (8003aac <animationSelector+0x124>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1ad2      	subs	r2, r2, r3
 8003a52:	23fa      	movs	r3, #250	@ 0xfa
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d91f      	bls.n	8003a9a <animationSelector+0x112>
			 {
				 schedulerTimestamp_updateName = HAL_GetTick();
 8003a5a:	f7fc fd65 	bl	8000528 <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <animationSelector+0x124>)
 8003a62:	601a      	str	r2, [r3, #0]
				 anim_name_word("RAWR! ^.^ ");
 8003a64:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <animationSelector+0x12c>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff fad0 	bl	800300c <anim_name_word>
			 }
			 break;
 8003a6c:	e015      	b.n	8003a9a <animationSelector+0x112>
		 case 7:
			 anim_swipeAll_run();
 8003a6e:	f7ff fbeb 	bl	8003248 <anim_swipeAll_run>
			 break;
 8003a72:	e013      	b.n	8003a9c <animationSelector+0x114>
		 case 8:
			 anim_ball_run();
 8003a74:	f7fe ffa4 	bl	80029c0 <anim_ball_run>
			 break;
 8003a78:	e010      	b.n	8003a9c <animationSelector+0x114>
		 case 9:
			 anim_life_run();
 8003a7a:	f7ff f9b1 	bl	8002de0 <anim_life_run>
			 break;
 8003a7e:	e00d      	b.n	8003a9c <animationSelector+0x114>
		 default:
			 screen_fill(); HAL_Delay(10);
 8003a80:	f000 f950 	bl	8003d24 <screen_fill>
 8003a84:	200a      	movs	r0, #10
 8003a86:	f7fc fd59 	bl	800053c <HAL_Delay>
			 screen_clear(); HAL_Delay(10);
 8003a8a:	f000 f96f 	bl	8003d6c <screen_clear>
 8003a8e:	200a      	movs	r0, #10
 8003a90:	f7fc fd54 	bl	800053c <HAL_Delay>
			 break;
 8003a94:	e002      	b.n	8003a9c <animationSelector+0x114>
			 break;
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	e000      	b.n	8003a9c <animationSelector+0x114>
			 break;
 8003a9a:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			@ (mov r8, r8)
 8003aa4:	200001bc 	.word	0x200001bc
 8003aa8:	080055d8 	.word	0x080055d8
 8003aac:	200001c0 	.word	0x200001c0
 8003ab0:	080054d8 	.word	0x080054d8
 8003ab4:	080054e4 	.word	0x080054e4

08003ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003abe:	f7fc fcd9 	bl	8000474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ac2:	f000 f851 	bl	8003b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ac6:	f7ff feb5 	bl	8003834 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003aca:	f000 fc09 	bl	80042e0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8003ace:	f000 fbb7 	bl	8004240 <MX_TIM16_Init>
  MX_ADC_Init();
 8003ad2:	f7fe fed3 	bl	800287c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  //Generate seed from floating ADC pin
  HAL_ADC_Start(&hadc);
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <main+0xa8>)
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7fc fe93 	bl	8000804 <HAL_ADC_Start>
  uint32_t seed = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
  uint32_t currentVal = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
  for(int i=0; i<10; i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	e014      	b.n	8003b16 <main+0x5e>
  {
	  HAL_ADC_PollForConversion(&hadc, 0xFF);
 8003aec:	4b1c      	ldr	r3, [pc, #112]	@ (8003b60 <main+0xa8>)
 8003aee:	21ff      	movs	r1, #255	@ 0xff
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7fc fedb 	bl	80008ac <HAL_ADC_PollForConversion>
	  currentVal = HAL_ADC_GetValue(&hadc);
 8003af6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <main+0xa8>)
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fc ff6f 	bl	80009dc <HAL_ADC_GetValue>
 8003afe:	0003      	movs	r3, r0
 8003b00:	603b      	str	r3, [r7, #0]
	  seed = seed + currentVal;
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(2);
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f7fc fd16 	bl	800053c <HAL_Delay>
  for(int i=0; i<10; i++)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b09      	cmp	r3, #9
 8003b1a:	dde7      	ble.n	8003aec <main+0x34>
  }
  srand(seed);	//input seed into sRand
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 fc86 	bl	8004430 <srand>

  //start timer for screen refresh
  HAL_TIM_Base_Start_IT(&htim16);
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <main+0xac>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fe f8e2 	bl	8001cf0 <HAL_TIM_Base_Start_IT>

  // Initiate matrix for conway
  anim_life_setup();
 8003b2c:	f7ff f932 	bl	8002d94 <anim_life_setup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t gameSelector = 0;
 8003b30:	1dfb      	adds	r3, r7, #7
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
  if( HAL_GPIO_ReadPin(BTB_GPIO_Port, BTB_Pin) == GPIO_PIN_RESET ) //IF button is held during boot, enter different game mode
 8003b36:	2390      	movs	r3, #144	@ 0x90
 8003b38:	05db      	lsls	r3, r3, #23
 8003b3a:	2140      	movs	r1, #64	@ 0x40
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7fd fb21 	bl	8001184 <HAL_GPIO_ReadPin>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d102      	bne.n	8003b4c <main+0x94>
  {
	  gameSelector = 1;
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
  }
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
  if(gameSelector == 0)
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <main+0xa2>
  {
	while(1)
		gameRacer_run();
 8003b54:	f7ff fdfc 	bl	8003750 <gameRacer_run>
 8003b58:	e7fc      	b.n	8003b54 <main+0x9c>
  }
  else
  {
	while (1)
		animationSelector();
 8003b5a:	f7ff ff15 	bl	8003988 <animationSelector>
 8003b5e:	e7fc      	b.n	8003b5a <main+0xa2>
 8003b60:	20000090 	.word	0x20000090
 8003b64:	2000020c 	.word	0x2000020c

08003b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b095      	sub	sp, #84	@ 0x54
 8003b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b6e:	2420      	movs	r4, #32
 8003b70:	193b      	adds	r3, r7, r4
 8003b72:	0018      	movs	r0, r3
 8003b74:	2330      	movs	r3, #48	@ 0x30
 8003b76:	001a      	movs	r2, r3
 8003b78:	2100      	movs	r1, #0
 8003b7a:	f000 fdd7 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b7e:	2310      	movs	r3, #16
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	0018      	movs	r0, r3
 8003b84:	2310      	movs	r3, #16
 8003b86:	001a      	movs	r2, r3
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f000 fdcf 	bl	800472c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b8e:	003b      	movs	r3, r7
 8003b90:	0018      	movs	r0, r3
 8003b92:	2310      	movs	r3, #16
 8003b94:	001a      	movs	r2, r3
 8003b96:	2100      	movs	r1, #0
 8003b98:	f000 fdc8 	bl	800472c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003b9c:	0021      	movs	r1, r4
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2212      	movs	r2, #18
 8003ba2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	2201      	movs	r2, #1
 8003bae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	2210      	movs	r2, #16
 8003bba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7fd fb17 	bl	80011f8 <HAL_RCC_OscConfig>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d001      	beq.n	8003bd2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003bce:	f000 f828 	bl	8003c22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	2207      	movs	r2, #7
 8003bd8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2200      	movs	r2, #0
 8003bde:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	2200      	movs	r2, #0
 8003bea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	2100      	movs	r1, #0
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7fd fe1b 	bl	800182c <HAL_RCC_ClockConfig>
 8003bf6:	1e03      	subs	r3, r0, #0
 8003bf8:	d001      	beq.n	8003bfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003bfa:	f000 f812 	bl	8003c22 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003bfe:	003b      	movs	r3, r7
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003c04:	003b      	movs	r3, r7
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c0a:	003b      	movs	r3, r7
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7fd ff51 	bl	8001ab4 <HAL_RCCEx_PeriphCLKConfig>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d001      	beq.n	8003c1a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003c16:	f000 f804 	bl	8003c22 <Error_Handler>
  }
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b015      	add	sp, #84	@ 0x54
 8003c20:	bd90      	pop	{r4, r7, pc}

08003c22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c26:	b672      	cpsid	i
}
 8003c28:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	e7fd      	b.n	8003c2a <Error_Handler+0x8>
	...

08003c30 <screen_get_bit>:
	 {0, 0, 0, 0, 	0, 0, 0, 0}
 };

 
uint8_t screen_get_bit(uint8_t row, uint8_t col)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	0002      	movs	r2, r0
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	1dbb      	adds	r3, r7, #6
 8003c3e:	1c0a      	adds	r2, r1, #0
 8003c40:	701a      	strb	r2, [r3, #0]
	return screenBuffer[col][row];
 8003c42:	1dbb      	adds	r3, r7, #6
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	1dfb      	adds	r3, r7, #7
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	4904      	ldr	r1, [pc, #16]	@ (8003c5c <screen_get_bit+0x2c>)
 8003c4c:	00d2      	lsls	r2, r2, #3
 8003c4e:	188a      	adds	r2, r1, r2
 8003c50:	5cd3      	ldrb	r3, [r2, r3]
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b002      	add	sp, #8
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	200001c4 	.word	0x200001c4

08003c60 <screen_set_bit>:

void screen_set_bit(uint8_t row, uint8_t col, uint8_t dataBit)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	0004      	movs	r4, r0
 8003c68:	0008      	movs	r0, r1
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	1dfb      	adds	r3, r7, #7
 8003c6e:	1c22      	adds	r2, r4, #0
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	1dbb      	adds	r3, r7, #6
 8003c74:	1c02      	adds	r2, r0, #0
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	1d7b      	adds	r3, r7, #5
 8003c7a:	1c0a      	adds	r2, r1, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
	screenBuffer[col][row] = dataBit;
 8003c7e:	1dbb      	adds	r3, r7, #6
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	1dfb      	adds	r3, r7, #7
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	4905      	ldr	r1, [pc, #20]	@ (8003c9c <screen_set_bit+0x3c>)
 8003c88:	00d2      	lsls	r2, r2, #3
 8003c8a:	188a      	adds	r2, r1, r2
 8003c8c:	1d79      	adds	r1, r7, #5
 8003c8e:	7809      	ldrb	r1, [r1, #0]
 8003c90:	54d1      	strb	r1, [r2, r3]
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b003      	add	sp, #12
 8003c98:	bd90      	pop	{r4, r7, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	200001c4 	.word	0x200001c4

08003ca0 <screen_show_letter>:
 
void screen_show_letter(uint8_t ascii_id)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	1dfb      	adds	r3, r7, #7
 8003caa:	701a      	strb	r2, [r3, #0]
	for(int row=0; row<8; row++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e02b      	b.n	8003d0a <screen_show_letter+0x6a>
	{
		for(int col=0; col<8; col++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	e022      	b.n	8003cfe <screen_show_letter+0x5e>
		{
			uint8_t dataBit = font8x8_basic[ascii_id][col]; //load byte from correct column
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	200f      	movs	r0, #15
 8003cbe:	183b      	adds	r3, r7, r0
 8003cc0:	4916      	ldr	r1, [pc, #88]	@ (8003d1c <screen_show_letter+0x7c>)
 8003cc2:	00d2      	lsls	r2, r2, #3
 8003cc4:	1889      	adds	r1, r1, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	188a      	adds	r2, r1, r2
 8003cca:	7812      	ldrb	r2, [r2, #0]
 8003ccc:	701a      	strb	r2, [r3, #0]
			
			dataBit = dataBit >> row; 	//bit shift down by the amount of "rows"
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	411a      	asrs	r2, r3
 8003cd6:	183b      	adds	r3, r7, r0
 8003cd8:	701a      	strb	r2, [r3, #0]
			dataBit = dataBit & 0x01; 	//keep only the first bit
 8003cda:	183b      	adds	r3, r7, r0
 8003cdc:	183a      	adds	r2, r7, r0
 8003cde:	7812      	ldrb	r2, [r2, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	701a      	strb	r2, [r3, #0]
						
			screenBuffer[row][col] = dataBit;
 8003ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8003d20 <screen_show_letter+0x80>)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	18d2      	adds	r2, r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	18d3      	adds	r3, r2, r3
 8003cf2:	183a      	adds	r2, r7, r0
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	701a      	strb	r2, [r3, #0]
		for(int col=0; col<8; col++)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	ddd9      	ble.n	8003cb8 <screen_show_letter+0x18>
	for(int row=0; row<8; row++)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3301      	adds	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b07      	cmp	r3, #7
 8003d0e:	ddd0      	ble.n	8003cb2 <screen_show_letter+0x12>
		}	
	}
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b006      	add	sp, #24
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	08005600 	.word	0x08005600
 8003d20:	200001c4 	.word	0x200001c4

08003d24 <screen_fill>:
 
void screen_fill()
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
	for(int row=0; row<8; row++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	e013      	b.n	8003d58 <screen_fill+0x34>
	{
		for(int col=0; col<8; col++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	e00a      	b.n	8003d4c <screen_fill+0x28>
		{
				screenBuffer[row][col] = 1;
 8003d36:	4a0c      	ldr	r2, [pc, #48]	@ (8003d68 <screen_fill+0x44>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	18d2      	adds	r2, r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
		for(int col=0; col<8; col++)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b07      	cmp	r3, #7
 8003d50:	ddf1      	ble.n	8003d36 <screen_fill+0x12>
	for(int row=0; row<8; row++)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3301      	adds	r3, #1
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	dde8      	ble.n	8003d30 <screen_fill+0xc>
		}	
	}
}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200001c4 	.word	0x200001c4

08003d6c <screen_clear>:

void screen_clear()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
	for(int row=0; row<8; row++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	e013      	b.n	8003da0 <screen_clear+0x34>
	{
		for(int col=0; col<8; col++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	e00a      	b.n	8003d94 <screen_clear+0x28>
		{
				screenBuffer[row][col] = 0;
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003db0 <screen_clear+0x44>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	18d2      	adds	r2, r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
		for(int col=0; col<8; col++)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b07      	cmp	r3, #7
 8003d98:	ddf1      	ble.n	8003d7e <screen_clear+0x12>
	for(int row=0; row<8; row++)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b07      	cmp	r3, #7
 8003da4:	dde8      	ble.n	8003d78 <screen_clear+0xc>
		}	
	}
}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	46c0      	nop			@ (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200001c4 	.word	0x200001c4

08003db4 <screen_interruptUpdate>:

void screen_interruptUpdate()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
	static uint8_t col = 0;
	static uint8_t row = 0;
	
	uint8_t dataBit = screenBuffer[row][col];
 8003dba:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <screen_interruptUpdate+0x78>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <screen_interruptUpdate+0x7c>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	1dfb      	adds	r3, r7, #7
 8003dc8:	491a      	ldr	r1, [pc, #104]	@ (8003e34 <screen_interruptUpdate+0x80>)
 8003dca:	00d2      	lsls	r2, r2, #3
 8003dcc:	188a      	adds	r2, r1, r2
 8003dce:	5c12      	ldrb	r2, [r2, r0]
 8003dd0:	701a      	strb	r2, [r3, #0]
	if( dataBit != 0)
 8003dd2:	1dfb      	adds	r3, r7, #7
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <screen_interruptUpdate+0x38>
	{
		matrix_setLed_on(row, col);
 8003dda:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <screen_interruptUpdate+0x78>)
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <screen_interruptUpdate+0x7c>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	0019      	movs	r1, r3
 8003de4:	0010      	movs	r0, r2
 8003de6:	f7ff fd93 	bl	8003910 <matrix_setLed_on>
 8003dea:	e001      	b.n	8003df0 <screen_interruptUpdate+0x3c>
	}
	else
	{
		matrix_setLed_allOff();
 8003dec:	f7ff fdb8 	bl	8003960 <matrix_setLed_allOff>
	}	
		
	col++;
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <screen_interruptUpdate+0x7c>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <screen_interruptUpdate+0x7c>)
 8003dfa:	701a      	strb	r2, [r3, #0]
	if(col==8)
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <screen_interruptUpdate+0x7c>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d108      	bne.n	8003e16 <screen_interruptUpdate+0x62>
	{
		col=0;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <screen_interruptUpdate+0x7c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	701a      	strb	r2, [r3, #0]
		row++;
 8003e0a:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <screen_interruptUpdate+0x78>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <screen_interruptUpdate+0x78>)
 8003e14:	701a      	strb	r2, [r3, #0]
	}
	if(row==8)
 8003e16:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <screen_interruptUpdate+0x78>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d102      	bne.n	8003e24 <screen_interruptUpdate+0x70>
		row=0;
 8003e1e:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <screen_interruptUpdate+0x78>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000204 	.word	0x20000204
 8003e30:	20000205 	.word	0x20000205
 8003e34:	200001c4 	.word	0x200001c4

08003e38 <screen_draw_line>:

// Modified from  https://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm#C
void screen_draw_line(int x0, int y0, int x1, int y1) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	@ 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
    int dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	17da      	asrs	r2, r3, #31
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	4053      	eors	r3, r2
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	da01      	bge.n	8003e60 <screen_draw_line+0x28>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e001      	b.n	8003e64 <screen_draw_line+0x2c>
 8003e60:	2301      	movs	r3, #1
 8003e62:	425b      	negs	r3, r3
 8003e64:	61fb      	str	r3, [r7, #28]
    int dy = abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	17da      	asrs	r2, r3, #31
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	4053      	eors	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	da01      	bge.n	8003e80 <screen_draw_line+0x48>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e001      	b.n	8003e84 <screen_draw_line+0x4c>
 8003e80:	2301      	movs	r3, #1
 8003e82:	425b      	negs	r3, r3
 8003e84:	617b      	str	r3, [r7, #20]
    int err = (dx > dy ? dx : -dy) / 2;
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	dc06      	bgt.n	8003e9c <screen_draw_line+0x64>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da00      	bge.n	8003e96 <screen_draw_line+0x5e>
 8003e94:	3301      	adds	r3, #1
 8003e96:	105b      	asrs	r3, r3, #1
 8003e98:	425b      	negs	r3, r3
 8003e9a:	e004      	b.n	8003ea6 <screen_draw_line+0x6e>
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da00      	bge.n	8003ea4 <screen_draw_line+0x6c>
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	105b      	asrs	r3, r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24

    while (screen_set_bit(x0, y0, 1), x0 != x1 || y0 != y1) {
 8003ea8:	e01a      	b.n	8003ee0 <screen_draw_line+0xa8>
        int e2 = err;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	613b      	str	r3, [r7, #16]
        if (e2 > -dx) { err -= dy; x0 += sx; }
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	425b      	negs	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	dd07      	ble.n	8003ec8 <screen_draw_line+0x90>
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	60fb      	str	r3, [r7, #12]
        if (e2 <  dy) { err += dx; y0 += sy; }
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	da07      	bge.n	8003ee0 <screen_draw_line+0xa8>
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	60bb      	str	r3, [r7, #8]
    while (screen_set_bit(x0, y0, 1), x0 != x1 || y0 != y1) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	b2d1      	uxtb	r1, r2
 8003ee8:	2201      	movs	r2, #1
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7ff feb8 	bl	8003c60 <screen_set_bit>
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d103      	bne.n	8003f00 <screen_draw_line+0xc8>
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <screen_draw_line+0xcc>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <screen_draw_line+0xce>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1cf      	bne.n	8003eaa <screen_draw_line+0x72>
    }
}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	46c0      	nop			@ (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b00a      	add	sp, #40	@ 0x28
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <screen_display_array>:

void screen_display_array(uint8_t array[8][8])
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	for(int row=0; row<8; row++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e01a      	b.n	8003f58 <screen_display_array+0x44>
	{
		for(int col=0; col<8; col++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	e011      	b.n	8003f4c <screen_display_array+0x38>
		{
				screenBuffer[row][col] = array[row][col];
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	18d2      	adds	r2, r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	18d3      	adds	r3, r2, r3
 8003f34:	7819      	ldrb	r1, [r3, #0]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	@ (8003f68 <screen_display_array+0x54>)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	18d2      	adds	r2, r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	1c0a      	adds	r2, r1, #0
 8003f44:	701a      	strb	r2, [r3, #0]
		for(int col=0; col<8; col++)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b07      	cmp	r3, #7
 8003f50:	ddea      	ble.n	8003f28 <screen_display_array+0x14>
	for(int row=0; row<8; row++)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3301      	adds	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	dde1      	ble.n	8003f22 <screen_display_array+0xe>
		}
	}
}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	46c0      	nop			@ (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b004      	add	sp, #16
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	200001c4 	.word	0x200001c4

08003f6c <screen_display_image>:

void screen_display_image(uint64_t image)
{
 8003f6c:	b5b0      	push	{r4, r5, r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6038      	str	r0, [r7, #0]
 8003f74:	6079      	str	r1, [r7, #4]
  screen_clear();
 8003f76:	f7ff fef9 	bl	8003d6c <screen_clear>
  for (int i = 0; i < 8; i++) {
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e036      	b.n	8003fee <screen_display_image+0x82>
    uint8_t row = (image >> i * 8) & 0xFF;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	001a      	movs	r2, r3
 8003f86:	3a20      	subs	r2, #32
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	db03      	blt.n	8003f94 <screen_display_image+0x28>
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	40d1      	lsrs	r1, r2
 8003f90:	000c      	movs	r4, r1
 8003f92:	e008      	b.n	8003fa6 <screen_display_image+0x3a>
 8003f94:	2220      	movs	r2, #32
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4091      	lsls	r1, r2
 8003f9c:	000a      	movs	r2, r1
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	40d9      	lsrs	r1, r3
 8003fa2:	000c      	movs	r4, r1
 8003fa4:	4314      	orrs	r4, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	40da      	lsrs	r2, r3
 8003faa:	0015      	movs	r5, r2
 8003fac:	230f      	movs	r3, #15
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	1c22      	adds	r2, r4, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 8; j++) {
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e013      	b.n	8003fe2 <screen_display_image+0x76>
    	screen_set_bit(i, j, ((row >> j)  & 0x01));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	b2d8      	uxtb	r0, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	b2d9      	uxtb	r1, r3
 8003fc2:	230f      	movs	r3, #15
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	411a      	asrs	r2, r3
 8003fcc:	0013      	movs	r3, r2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	f7ff fe42 	bl	8003c60 <screen_set_bit>
    for (int j = 0; j < 8; j++) {
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b07      	cmp	r3, #7
 8003fe6:	dde8      	ble.n	8003fba <screen_display_image+0x4e>
  for (int i = 0; i < 8; i++) {
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3301      	adds	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	ddc5      	ble.n	8003f80 <screen_display_image+0x14>
    }
  }
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b006      	add	sp, #24
 8003ffc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004006:	4b0f      	ldr	r3, [pc, #60]	@ (8004044 <HAL_MspInit+0x44>)
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	4b0e      	ldr	r3, [pc, #56]	@ (8004044 <HAL_MspInit+0x44>)
 800400c:	2101      	movs	r1, #1
 800400e:	430a      	orrs	r2, r1
 8004010:	619a      	str	r2, [r3, #24]
 8004012:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <HAL_MspInit+0x44>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2201      	movs	r2, #1
 8004018:	4013      	ands	r3, r2
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800401e:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <HAL_MspInit+0x44>)
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <HAL_MspInit+0x44>)
 8004024:	2180      	movs	r1, #128	@ 0x80
 8004026:	0549      	lsls	r1, r1, #21
 8004028:	430a      	orrs	r2, r1
 800402a:	61da      	str	r2, [r3, #28]
 800402c:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <HAL_MspInit+0x44>)
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	055b      	lsls	r3, r3, #21
 8004034:	4013      	ands	r3, r2
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	40021000 	.word	0x40021000

08004048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800404c:	46c0      	nop			@ (mov r8, r8)
 800404e:	e7fd      	b.n	800404c <NMI_Handler+0x4>

08004050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	e7fd      	b.n	8004054 <HardFault_Handler+0x4>

08004058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004070:	f7fc fa48 	bl	8000504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004080:	4b03      	ldr	r3, [pc, #12]	@ (8004090 <TIM16_IRQHandler+0x14>)
 8004082:	0018      	movs	r0, r3
 8004084:	f7fd fe80 	bl	8001d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	2000020c 	.word	0x2000020c

08004094 <HAL_TIM_PeriodElapsedCallback>:



#include "screenBuffer.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		screen_interruptUpdate();
 80040a6:	f7ff fe85 	bl	8003db4 <screen_interruptUpdate>
	}
}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b002      	add	sp, #8
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	40014400 	.word	0x40014400

080040b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
	return 1;
 80040bc:	2301      	movs	r3, #1
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_kill>:

int _kill(int pid, int sig)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040ce:	f000 fb83 	bl	80047d8 <__errno>
 80040d2:	0003      	movs	r3, r0
 80040d4:	2216      	movs	r2, #22
 80040d6:	601a      	str	r2, [r3, #0]
	return -1;
 80040d8:	2301      	movs	r3, #1
 80040da:	425b      	negs	r3, r3
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b002      	add	sp, #8
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_exit>:

void _exit (int status)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040ec:	2301      	movs	r3, #1
 80040ee:	425a      	negs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	0011      	movs	r1, r2
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff ffe5 	bl	80040c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	e7fd      	b.n	80040fa <_exit+0x16>

080040fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e00a      	b.n	8004126 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004110:	e000      	b.n	8004114 <_read+0x16>
 8004112:	bf00      	nop
 8004114:	0001      	movs	r1, r0
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	60ba      	str	r2, [r7, #8]
 800411c:	b2ca      	uxtb	r2, r1
 800411e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	3301      	adds	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	dbf0      	blt.n	8004110 <_read+0x12>
	}

return len;
 800412e:	687b      	ldr	r3, [r7, #4]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b006      	add	sp, #24
 8004136:	bd80      	pop	{r7, pc}

08004138 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e009      	b.n	800415e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	60ba      	str	r2, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	0018      	movs	r0, r3
 8004154:	e000      	b.n	8004158 <_write+0x20>
 8004156:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3301      	adds	r3, #1
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	dbf1      	blt.n	800414a <_write+0x12>
	}
	return len;
 8004166:	687b      	ldr	r3, [r7, #4]
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b006      	add	sp, #24
 800416e:	bd80      	pop	{r7, pc}

08004170 <_close>:

int _close(int file)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	return -1;
 8004178:	2301      	movs	r3, #1
 800417a:	425b      	negs	r3, r3
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2280      	movs	r2, #128	@ 0x80
 8004192:	0192      	lsls	r2, r2, #6
 8004194:	605a      	str	r2, [r3, #4]
	return 0;
 8004196:	2300      	movs	r3, #0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_isatty>:

int _isatty(int file)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	return 1;
 80041a8:	2301      	movs	r3, #1
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b002      	add	sp, #8
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
	return 0;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b004      	add	sp, #16
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041d0:	4a14      	ldr	r2, [pc, #80]	@ (8004224 <_sbrk+0x5c>)
 80041d2:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <_sbrk+0x60>)
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041dc:	4b13      	ldr	r3, [pc, #76]	@ (800422c <_sbrk+0x64>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041e4:	4b11      	ldr	r3, [pc, #68]	@ (800422c <_sbrk+0x64>)
 80041e6:	4a12      	ldr	r2, [pc, #72]	@ (8004230 <_sbrk+0x68>)
 80041e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ea:	4b10      	ldr	r3, [pc, #64]	@ (800422c <_sbrk+0x64>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d207      	bcs.n	8004208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f8:	f000 faee 	bl	80047d8 <__errno>
 80041fc:	0003      	movs	r3, r0
 80041fe:	220c      	movs	r2, #12
 8004200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004202:	2301      	movs	r3, #1
 8004204:	425b      	negs	r3, r3
 8004206:	e009      	b.n	800421c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004208:	4b08      	ldr	r3, [pc, #32]	@ (800422c <_sbrk+0x64>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800420e:	4b07      	ldr	r3, [pc, #28]	@ (800422c <_sbrk+0x64>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	18d2      	adds	r2, r2, r3
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <_sbrk+0x64>)
 8004218:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800421a:	68fb      	ldr	r3, [r7, #12]
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b006      	add	sp, #24
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20002000 	.word	0x20002000
 8004228:	00000400 	.word	0x00000400
 800422c:	20000208 	.word	0x20000208
 8004230:	20000428 	.word	0x20000428

08004234 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004238:	46c0      	nop			@ (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004244:	4b10      	ldr	r3, [pc, #64]	@ (8004288 <MX_TIM16_Init+0x48>)
 8004246:	4a11      	ldr	r2, [pc, #68]	@ (800428c <MX_TIM16_Init+0x4c>)
 8004248:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800424a:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <MX_TIM16_Init+0x48>)
 800424c:	2200      	movs	r2, #0
 800424e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004250:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <MX_TIM16_Init+0x48>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8004256:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <MX_TIM16_Init+0x48>)
 8004258:	22fa      	movs	r2, #250	@ 0xfa
 800425a:	0092      	lsls	r2, r2, #2
 800425c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425e:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <MX_TIM16_Init+0x48>)
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004264:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <MX_TIM16_Init+0x48>)
 8004266:	2200      	movs	r2, #0
 8004268:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800426a:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <MX_TIM16_Init+0x48>)
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <MX_TIM16_Init+0x48>)
 8004272:	0018      	movs	r0, r3
 8004274:	f7fd fcec 	bl	8001c50 <HAL_TIM_Base_Init>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d001      	beq.n	8004280 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800427c:	f7ff fcd1 	bl	8003c22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004280:	46c0      	nop			@ (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	2000020c 	.word	0x2000020c
 800428c:	40014400 	.word	0x40014400

08004290 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a0e      	ldr	r2, [pc, #56]	@ (80042d8 <HAL_TIM_Base_MspInit+0x48>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d115      	bne.n	80042ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80042a2:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <HAL_TIM_Base_MspInit+0x4c>)
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <HAL_TIM_Base_MspInit+0x4c>)
 80042a8:	2180      	movs	r1, #128	@ 0x80
 80042aa:	0289      	lsls	r1, r1, #10
 80042ac:	430a      	orrs	r2, r1
 80042ae:	619a      	str	r2, [r3, #24]
 80042b0:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <HAL_TIM_Base_MspInit+0x4c>)
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	2015      	movs	r0, #21
 80042c4:	f7fc fdbc 	bl	8000e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80042c8:	2015      	movs	r0, #21
 80042ca:	f7fc fdce 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40021000 	.word	0x40021000

080042e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042e4:	4b14      	ldr	r3, [pc, #80]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 80042e6:	4a15      	ldr	r2, [pc, #84]	@ (800433c <MX_USART1_UART_Init+0x5c>)
 80042e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042ea:	4b13      	ldr	r3, [pc, #76]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 80042ec:	22e1      	movs	r2, #225	@ 0xe1
 80042ee:	0252      	lsls	r2, r2, #9
 80042f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042f2:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 8004300:	2200      	movs	r2, #0
 8004302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 8004306:	220c      	movs	r2, #12
 8004308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 800430c:	2200      	movs	r2, #0
 800430e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004310:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 8004312:	2200      	movs	r2, #0
 8004314:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004316:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800431c:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 800431e:	2200      	movs	r2, #0
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004322:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <MX_USART1_UART_Init+0x58>)
 8004324:	0018      	movs	r0, r3
 8004326:	f7fd feeb 	bl	8002100 <HAL_UART_Init>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d001      	beq.n	8004332 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800432e:	f7ff fc78 	bl	8003c22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000254 	.word	0x20000254
 800433c:	40013800 	.word	0x40013800

08004340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b08b      	sub	sp, #44	@ 0x2c
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004348:	2414      	movs	r4, #20
 800434a:	193b      	adds	r3, r7, r4
 800434c:	0018      	movs	r0, r3
 800434e:	2314      	movs	r3, #20
 8004350:	001a      	movs	r2, r3
 8004352:	2100      	movs	r1, #0
 8004354:	f000 f9ea 	bl	800472c <memset>
  if(uartHandle->Instance==USART1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_UART_MspInit+0x94>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d133      	bne.n	80043ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004362:	4b1d      	ldr	r3, [pc, #116]	@ (80043d8 <HAL_UART_MspInit+0x98>)
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	4b1c      	ldr	r3, [pc, #112]	@ (80043d8 <HAL_UART_MspInit+0x98>)
 8004368:	2180      	movs	r1, #128	@ 0x80
 800436a:	01c9      	lsls	r1, r1, #7
 800436c:	430a      	orrs	r2, r1
 800436e:	619a      	str	r2, [r3, #24]
 8004370:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <HAL_UART_MspInit+0x98>)
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	01db      	lsls	r3, r3, #7
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437e:	4b16      	ldr	r3, [pc, #88]	@ (80043d8 <HAL_UART_MspInit+0x98>)
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	4b15      	ldr	r3, [pc, #84]	@ (80043d8 <HAL_UART_MspInit+0x98>)
 8004384:	2180      	movs	r1, #128	@ 0x80
 8004386:	0289      	lsls	r1, r1, #10
 8004388:	430a      	orrs	r2, r1
 800438a:	615a      	str	r2, [r3, #20]
 800438c:	4b12      	ldr	r3, [pc, #72]	@ (80043d8 <HAL_UART_MspInit+0x98>)
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	4013      	ands	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800439a:	193b      	adds	r3, r7, r4
 800439c:	22c0      	movs	r2, #192	@ 0xc0
 800439e:	00d2      	lsls	r2, r2, #3
 80043a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	0021      	movs	r1, r4
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	2202      	movs	r2, #2
 80043a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043b0:	187b      	adds	r3, r7, r1
 80043b2:	2203      	movs	r2, #3
 80043b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	2201      	movs	r2, #1
 80043ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043bc:	187a      	adds	r2, r7, r1
 80043be:	2390      	movs	r3, #144	@ 0x90
 80043c0:	05db      	lsls	r3, r3, #23
 80043c2:	0011      	movs	r1, r2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fc fd6d 	bl	8000ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b00b      	add	sp, #44	@ 0x2c
 80043d0:	bd90      	pop	{r4, r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	40013800 	.word	0x40013800
 80043d8:	40021000 	.word	0x40021000

080043dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043dc:	480d      	ldr	r0, [pc, #52]	@ (8004414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043e0:	480d      	ldr	r0, [pc, #52]	@ (8004418 <LoopForever+0x6>)
  ldr r1, =_edata
 80043e2:	490e      	ldr	r1, [pc, #56]	@ (800441c <LoopForever+0xa>)
  ldr r2, =_sidata
 80043e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004420 <LoopForever+0xe>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e8:	e002      	b.n	80043f0 <LoopCopyDataInit>

080043ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ee:	3304      	adds	r3, #4

080043f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043f4:	d3f9      	bcc.n	80043ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043f8:	4c0b      	ldr	r4, [pc, #44]	@ (8004428 <LoopForever+0x16>)
  movs r3, #0
 80043fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043fc:	e001      	b.n	8004402 <LoopFillZerobss>

080043fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004400:	3204      	adds	r2, #4

08004402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004404:	d3fb      	bcc.n	80043fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004406:	f7ff ff15 	bl	8004234 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800440a:	f000 f9eb 	bl	80047e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800440e:	f7ff fb53 	bl	8003ab8 <main>

08004412 <LoopForever>:

LoopForever:
    b LoopForever
 8004412:	e7fe      	b.n	8004412 <LoopForever>
  ldr   r0, =_estack
 8004414:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800441c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004420:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 8004424:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004428:	20000428 	.word	0x20000428

0800442c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800442c:	e7fe      	b.n	800442c <ADC1_IRQHandler>
	...

08004430 <srand>:
 8004430:	4b11      	ldr	r3, [pc, #68]	@ (8004478 <srand+0x48>)
 8004432:	b570      	push	{r4, r5, r6, lr}
 8004434:	681d      	ldr	r5, [r3, #0]
 8004436:	0004      	movs	r4, r0
 8004438:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d116      	bne.n	800446c <srand+0x3c>
 800443e:	2018      	movs	r0, #24
 8004440:	f000 fa60 	bl	8004904 <malloc>
 8004444:	1e02      	subs	r2, r0, #0
 8004446:	6328      	str	r0, [r5, #48]	@ 0x30
 8004448:	d104      	bne.n	8004454 <srand+0x24>
 800444a:	2146      	movs	r1, #70	@ 0x46
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <srand+0x4c>)
 800444e:	480c      	ldr	r0, [pc, #48]	@ (8004480 <srand+0x50>)
 8004450:	f000 f9f0 	bl	8004834 <__assert_func>
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <srand+0x54>)
 8004456:	2100      	movs	r1, #0
 8004458:	6003      	str	r3, [r0, #0]
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <srand+0x58>)
 800445c:	6043      	str	r3, [r0, #4]
 800445e:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <srand+0x5c>)
 8004460:	6083      	str	r3, [r0, #8]
 8004462:	230b      	movs	r3, #11
 8004464:	8183      	strh	r3, [r0, #12]
 8004466:	2001      	movs	r0, #1
 8004468:	6110      	str	r0, [r2, #16]
 800446a:	6151      	str	r1, [r2, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004470:	611c      	str	r4, [r3, #16]
 8004472:	615a      	str	r2, [r3, #20]
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	20000020 	.word	0x20000020
 800447c:	08005a18 	.word	0x08005a18
 8004480:	08005a2f 	.word	0x08005a2f
 8004484:	abcd330e 	.word	0xabcd330e
 8004488:	e66d1234 	.word	0xe66d1234
 800448c:	0005deec 	.word	0x0005deec

08004490 <rand>:
 8004490:	4b16      	ldr	r3, [pc, #88]	@ (80044ec <rand+0x5c>)
 8004492:	b510      	push	{r4, lr}
 8004494:	681c      	ldr	r4, [r3, #0]
 8004496:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004498:	2b00      	cmp	r3, #0
 800449a:	d116      	bne.n	80044ca <rand+0x3a>
 800449c:	2018      	movs	r0, #24
 800449e:	f000 fa31 	bl	8004904 <malloc>
 80044a2:	1e02      	subs	r2, r0, #0
 80044a4:	6320      	str	r0, [r4, #48]	@ 0x30
 80044a6:	d104      	bne.n	80044b2 <rand+0x22>
 80044a8:	2152      	movs	r1, #82	@ 0x52
 80044aa:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <rand+0x60>)
 80044ac:	4811      	ldr	r0, [pc, #68]	@ (80044f4 <rand+0x64>)
 80044ae:	f000 f9c1 	bl	8004834 <__assert_func>
 80044b2:	4b11      	ldr	r3, [pc, #68]	@ (80044f8 <rand+0x68>)
 80044b4:	2100      	movs	r1, #0
 80044b6:	6003      	str	r3, [r0, #0]
 80044b8:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <rand+0x6c>)
 80044ba:	6043      	str	r3, [r0, #4]
 80044bc:	4b10      	ldr	r3, [pc, #64]	@ (8004500 <rand+0x70>)
 80044be:	6083      	str	r3, [r0, #8]
 80044c0:	230b      	movs	r3, #11
 80044c2:	8183      	strh	r3, [r0, #12]
 80044c4:	2001      	movs	r0, #1
 80044c6:	6110      	str	r0, [r2, #16]
 80044c8:	6151      	str	r1, [r2, #20]
 80044ca:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80044cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004504 <rand+0x74>)
 80044ce:	6920      	ldr	r0, [r4, #16]
 80044d0:	6961      	ldr	r1, [r4, #20]
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <rand+0x78>)
 80044d4:	f7fb ffa0 	bl	8000418 <__aeabi_lmul>
 80044d8:	2201      	movs	r2, #1
 80044da:	2300      	movs	r3, #0
 80044dc:	1880      	adds	r0, r0, r2
 80044de:	4159      	adcs	r1, r3
 80044e0:	6120      	str	r0, [r4, #16]
 80044e2:	6161      	str	r1, [r4, #20]
 80044e4:	0048      	lsls	r0, r1, #1
 80044e6:	0840      	lsrs	r0, r0, #1
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	20000020 	.word	0x20000020
 80044f0:	08005a18 	.word	0x08005a18
 80044f4:	08005a2f 	.word	0x08005a2f
 80044f8:	abcd330e 	.word	0xabcd330e
 80044fc:	e66d1234 	.word	0xe66d1234
 8004500:	0005deec 	.word	0x0005deec
 8004504:	4c957f2d 	.word	0x4c957f2d
 8004508:	5851f42d 	.word	0x5851f42d

0800450c <std>:
 800450c:	2300      	movs	r3, #0
 800450e:	b510      	push	{r4, lr}
 8004510:	0004      	movs	r4, r0
 8004512:	6003      	str	r3, [r0, #0]
 8004514:	6043      	str	r3, [r0, #4]
 8004516:	6083      	str	r3, [r0, #8]
 8004518:	8181      	strh	r1, [r0, #12]
 800451a:	6643      	str	r3, [r0, #100]	@ 0x64
 800451c:	81c2      	strh	r2, [r0, #14]
 800451e:	6103      	str	r3, [r0, #16]
 8004520:	6143      	str	r3, [r0, #20]
 8004522:	6183      	str	r3, [r0, #24]
 8004524:	0019      	movs	r1, r3
 8004526:	2208      	movs	r2, #8
 8004528:	305c      	adds	r0, #92	@ 0x5c
 800452a:	f000 f8ff 	bl	800472c <memset>
 800452e:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <std+0x50>)
 8004530:	6224      	str	r4, [r4, #32]
 8004532:	6263      	str	r3, [r4, #36]	@ 0x24
 8004534:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <std+0x54>)
 8004536:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004538:	4b0a      	ldr	r3, [pc, #40]	@ (8004564 <std+0x58>)
 800453a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800453c:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <std+0x5c>)
 800453e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004540:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <std+0x60>)
 8004542:	429c      	cmp	r4, r3
 8004544:	d005      	beq.n	8004552 <std+0x46>
 8004546:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <std+0x64>)
 8004548:	429c      	cmp	r4, r3
 800454a:	d002      	beq.n	8004552 <std+0x46>
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <std+0x68>)
 800454e:	429c      	cmp	r4, r3
 8004550:	d103      	bne.n	800455a <std+0x4e>
 8004552:	0020      	movs	r0, r4
 8004554:	3058      	adds	r0, #88	@ 0x58
 8004556:	f000 f969 	bl	800482c <__retarget_lock_init_recursive>
 800455a:	bd10      	pop	{r4, pc}
 800455c:	08004695 	.word	0x08004695
 8004560:	080046bd 	.word	0x080046bd
 8004564:	080046f5 	.word	0x080046f5
 8004568:	08004721 	.word	0x08004721
 800456c:	200002dc 	.word	0x200002dc
 8004570:	20000344 	.word	0x20000344
 8004574:	200003ac 	.word	0x200003ac

08004578 <stdio_exit_handler>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4a03      	ldr	r2, [pc, #12]	@ (8004588 <stdio_exit_handler+0x10>)
 800457c:	4903      	ldr	r1, [pc, #12]	@ (800458c <stdio_exit_handler+0x14>)
 800457e:	4804      	ldr	r0, [pc, #16]	@ (8004590 <stdio_exit_handler+0x18>)
 8004580:	f000 f86c 	bl	800465c <_fwalk_sglue>
 8004584:	bd10      	pop	{r4, pc}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	20000014 	.word	0x20000014
 800458c:	08004b89 	.word	0x08004b89
 8004590:	20000024 	.word	0x20000024

08004594 <cleanup_stdio>:
 8004594:	6841      	ldr	r1, [r0, #4]
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <cleanup_stdio+0x30>)
 8004598:	b510      	push	{r4, lr}
 800459a:	0004      	movs	r4, r0
 800459c:	4299      	cmp	r1, r3
 800459e:	d001      	beq.n	80045a4 <cleanup_stdio+0x10>
 80045a0:	f000 faf2 	bl	8004b88 <_fflush_r>
 80045a4:	68a1      	ldr	r1, [r4, #8]
 80045a6:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <cleanup_stdio+0x34>)
 80045a8:	4299      	cmp	r1, r3
 80045aa:	d002      	beq.n	80045b2 <cleanup_stdio+0x1e>
 80045ac:	0020      	movs	r0, r4
 80045ae:	f000 faeb 	bl	8004b88 <_fflush_r>
 80045b2:	68e1      	ldr	r1, [r4, #12]
 80045b4:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <cleanup_stdio+0x38>)
 80045b6:	4299      	cmp	r1, r3
 80045b8:	d002      	beq.n	80045c0 <cleanup_stdio+0x2c>
 80045ba:	0020      	movs	r0, r4
 80045bc:	f000 fae4 	bl	8004b88 <_fflush_r>
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	46c0      	nop			@ (mov r8, r8)
 80045c4:	200002dc 	.word	0x200002dc
 80045c8:	20000344 	.word	0x20000344
 80045cc:	200003ac 	.word	0x200003ac

080045d0 <global_stdio_init.part.0>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <global_stdio_init.part.0+0x28>)
 80045d4:	4a09      	ldr	r2, [pc, #36]	@ (80045fc <global_stdio_init.part.0+0x2c>)
 80045d6:	2104      	movs	r1, #4
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	4809      	ldr	r0, [pc, #36]	@ (8004600 <global_stdio_init.part.0+0x30>)
 80045dc:	2200      	movs	r2, #0
 80045de:	f7ff ff95 	bl	800450c <std>
 80045e2:	2201      	movs	r2, #1
 80045e4:	2109      	movs	r1, #9
 80045e6:	4807      	ldr	r0, [pc, #28]	@ (8004604 <global_stdio_init.part.0+0x34>)
 80045e8:	f7ff ff90 	bl	800450c <std>
 80045ec:	2202      	movs	r2, #2
 80045ee:	2112      	movs	r1, #18
 80045f0:	4805      	ldr	r0, [pc, #20]	@ (8004608 <global_stdio_init.part.0+0x38>)
 80045f2:	f7ff ff8b 	bl	800450c <std>
 80045f6:	bd10      	pop	{r4, pc}
 80045f8:	20000414 	.word	0x20000414
 80045fc:	08004579 	.word	0x08004579
 8004600:	200002dc 	.word	0x200002dc
 8004604:	20000344 	.word	0x20000344
 8004608:	200003ac 	.word	0x200003ac

0800460c <__sfp_lock_acquire>:
 800460c:	b510      	push	{r4, lr}
 800460e:	4802      	ldr	r0, [pc, #8]	@ (8004618 <__sfp_lock_acquire+0xc>)
 8004610:	f000 f90d 	bl	800482e <__retarget_lock_acquire_recursive>
 8004614:	bd10      	pop	{r4, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	2000041d 	.word	0x2000041d

0800461c <__sfp_lock_release>:
 800461c:	b510      	push	{r4, lr}
 800461e:	4802      	ldr	r0, [pc, #8]	@ (8004628 <__sfp_lock_release+0xc>)
 8004620:	f000 f906 	bl	8004830 <__retarget_lock_release_recursive>
 8004624:	bd10      	pop	{r4, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	2000041d 	.word	0x2000041d

0800462c <__sinit>:
 800462c:	b510      	push	{r4, lr}
 800462e:	0004      	movs	r4, r0
 8004630:	f7ff ffec 	bl	800460c <__sfp_lock_acquire>
 8004634:	6a23      	ldr	r3, [r4, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <__sinit+0x14>
 800463a:	f7ff ffef 	bl	800461c <__sfp_lock_release>
 800463e:	bd10      	pop	{r4, pc}
 8004640:	4b04      	ldr	r3, [pc, #16]	@ (8004654 <__sinit+0x28>)
 8004642:	6223      	str	r3, [r4, #32]
 8004644:	4b04      	ldr	r3, [pc, #16]	@ (8004658 <__sinit+0x2c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f6      	bne.n	800463a <__sinit+0xe>
 800464c:	f7ff ffc0 	bl	80045d0 <global_stdio_init.part.0>
 8004650:	e7f3      	b.n	800463a <__sinit+0xe>
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	08004595 	.word	0x08004595
 8004658:	20000414 	.word	0x20000414

0800465c <_fwalk_sglue>:
 800465c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800465e:	0014      	movs	r4, r2
 8004660:	2600      	movs	r6, #0
 8004662:	9000      	str	r0, [sp, #0]
 8004664:	9101      	str	r1, [sp, #4]
 8004666:	68a5      	ldr	r5, [r4, #8]
 8004668:	6867      	ldr	r7, [r4, #4]
 800466a:	3f01      	subs	r7, #1
 800466c:	d504      	bpl.n	8004678 <_fwalk_sglue+0x1c>
 800466e:	6824      	ldr	r4, [r4, #0]
 8004670:	2c00      	cmp	r4, #0
 8004672:	d1f8      	bne.n	8004666 <_fwalk_sglue+0xa>
 8004674:	0030      	movs	r0, r6
 8004676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004678:	89ab      	ldrh	r3, [r5, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d908      	bls.n	8004690 <_fwalk_sglue+0x34>
 800467e:	220e      	movs	r2, #14
 8004680:	5eab      	ldrsh	r3, [r5, r2]
 8004682:	3301      	adds	r3, #1
 8004684:	d004      	beq.n	8004690 <_fwalk_sglue+0x34>
 8004686:	0029      	movs	r1, r5
 8004688:	9800      	ldr	r0, [sp, #0]
 800468a:	9b01      	ldr	r3, [sp, #4]
 800468c:	4798      	blx	r3
 800468e:	4306      	orrs	r6, r0
 8004690:	3568      	adds	r5, #104	@ 0x68
 8004692:	e7ea      	b.n	800466a <_fwalk_sglue+0xe>

08004694 <__sread>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	000c      	movs	r4, r1
 8004698:	250e      	movs	r5, #14
 800469a:	5f49      	ldrsh	r1, [r1, r5]
 800469c:	f000 f874 	bl	8004788 <_read_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	db03      	blt.n	80046ac <__sread+0x18>
 80046a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80046a6:	181b      	adds	r3, r3, r0
 80046a8:	6563      	str	r3, [r4, #84]	@ 0x54
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	4a02      	ldr	r2, [pc, #8]	@ (80046b8 <__sread+0x24>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	e7f9      	b.n	80046aa <__sread+0x16>
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	ffffefff 	.word	0xffffefff

080046bc <__swrite>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	001f      	movs	r7, r3
 80046c0:	898b      	ldrh	r3, [r1, #12]
 80046c2:	0005      	movs	r5, r0
 80046c4:	000c      	movs	r4, r1
 80046c6:	0016      	movs	r6, r2
 80046c8:	05db      	lsls	r3, r3, #23
 80046ca:	d505      	bpl.n	80046d8 <__swrite+0x1c>
 80046cc:	230e      	movs	r3, #14
 80046ce:	5ec9      	ldrsh	r1, [r1, r3]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2302      	movs	r3, #2
 80046d4:	f000 f844 	bl	8004760 <_lseek_r>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	4a05      	ldr	r2, [pc, #20]	@ (80046f0 <__swrite+0x34>)
 80046dc:	0028      	movs	r0, r5
 80046de:	4013      	ands	r3, r2
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	0032      	movs	r2, r6
 80046e4:	230e      	movs	r3, #14
 80046e6:	5ee1      	ldrsh	r1, [r4, r3]
 80046e8:	003b      	movs	r3, r7
 80046ea:	f000 f861 	bl	80047b0 <_write_r>
 80046ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f0:	ffffefff 	.word	0xffffefff

080046f4 <__sseek>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	000c      	movs	r4, r1
 80046f8:	250e      	movs	r5, #14
 80046fa:	5f49      	ldrsh	r1, [r1, r5]
 80046fc:	f000 f830 	bl	8004760 <_lseek_r>
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	1c42      	adds	r2, r0, #1
 8004704:	d103      	bne.n	800470e <__sseek+0x1a>
 8004706:	4a05      	ldr	r2, [pc, #20]	@ (800471c <__sseek+0x28>)
 8004708:	4013      	ands	r3, r2
 800470a:	81a3      	strh	r3, [r4, #12]
 800470c:	bd70      	pop	{r4, r5, r6, pc}
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	0152      	lsls	r2, r2, #5
 8004712:	4313      	orrs	r3, r2
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	6560      	str	r0, [r4, #84]	@ 0x54
 8004718:	e7f8      	b.n	800470c <__sseek+0x18>
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	ffffefff 	.word	0xffffefff

08004720 <__sclose>:
 8004720:	b510      	push	{r4, lr}
 8004722:	230e      	movs	r3, #14
 8004724:	5ec9      	ldrsh	r1, [r1, r3]
 8004726:	f000 f809 	bl	800473c <_close_r>
 800472a:	bd10      	pop	{r4, pc}

0800472c <memset>:
 800472c:	0003      	movs	r3, r0
 800472e:	1882      	adds	r2, r0, r2
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	7019      	strb	r1, [r3, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <_close_r>:
 800473c:	2300      	movs	r3, #0
 800473e:	b570      	push	{r4, r5, r6, lr}
 8004740:	4d06      	ldr	r5, [pc, #24]	@ (800475c <_close_r+0x20>)
 8004742:	0004      	movs	r4, r0
 8004744:	0008      	movs	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f7ff fd12 	bl	8004170 <_close>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d103      	bne.n	8004758 <_close_r+0x1c>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d000      	beq.n	8004758 <_close_r+0x1c>
 8004756:	6023      	str	r3, [r4, #0]
 8004758:	bd70      	pop	{r4, r5, r6, pc}
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	20000418 	.word	0x20000418

08004760 <_lseek_r>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	0004      	movs	r4, r0
 8004764:	0008      	movs	r0, r1
 8004766:	0011      	movs	r1, r2
 8004768:	001a      	movs	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	4d05      	ldr	r5, [pc, #20]	@ (8004784 <_lseek_r+0x24>)
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7ff fd1f 	bl	80041b2 <_lseek>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d103      	bne.n	8004780 <_lseek_r+0x20>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d000      	beq.n	8004780 <_lseek_r+0x20>
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	bd70      	pop	{r4, r5, r6, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	20000418 	.word	0x20000418

08004788 <_read_r>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	0004      	movs	r4, r0
 800478c:	0008      	movs	r0, r1
 800478e:	0011      	movs	r1, r2
 8004790:	001a      	movs	r2, r3
 8004792:	2300      	movs	r3, #0
 8004794:	4d05      	ldr	r5, [pc, #20]	@ (80047ac <_read_r+0x24>)
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	f7ff fcb1 	bl	80040fe <_read>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d103      	bne.n	80047a8 <_read_r+0x20>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d000      	beq.n	80047a8 <_read_r+0x20>
 80047a6:	6023      	str	r3, [r4, #0]
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	20000418 	.word	0x20000418

080047b0 <_write_r>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	0004      	movs	r4, r0
 80047b4:	0008      	movs	r0, r1
 80047b6:	0011      	movs	r1, r2
 80047b8:	001a      	movs	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	4d05      	ldr	r5, [pc, #20]	@ (80047d4 <_write_r+0x24>)
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	f7ff fcba 	bl	8004138 <_write>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d103      	bne.n	80047d0 <_write_r+0x20>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d000      	beq.n	80047d0 <_write_r+0x20>
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	20000418 	.word	0x20000418

080047d8 <__errno>:
 80047d8:	4b01      	ldr	r3, [pc, #4]	@ (80047e0 <__errno+0x8>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	4770      	bx	lr
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	20000020 	.word	0x20000020

080047e4 <__libc_init_array>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	2600      	movs	r6, #0
 80047e8:	4c0c      	ldr	r4, [pc, #48]	@ (800481c <__libc_init_array+0x38>)
 80047ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004820 <__libc_init_array+0x3c>)
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	42a6      	cmp	r6, r4
 80047f2:	d109      	bne.n	8004808 <__libc_init_array+0x24>
 80047f4:	2600      	movs	r6, #0
 80047f6:	f000 fe63 	bl	80054c0 <_init>
 80047fa:	4c0a      	ldr	r4, [pc, #40]	@ (8004824 <__libc_init_array+0x40>)
 80047fc:	4d0a      	ldr	r5, [pc, #40]	@ (8004828 <__libc_init_array+0x44>)
 80047fe:	1b64      	subs	r4, r4, r5
 8004800:	10a4      	asrs	r4, r4, #2
 8004802:	42a6      	cmp	r6, r4
 8004804:	d105      	bne.n	8004812 <__libc_init_array+0x2e>
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	00b3      	lsls	r3, r6, #2
 800480a:	58eb      	ldr	r3, [r5, r3]
 800480c:	4798      	blx	r3
 800480e:	3601      	adds	r6, #1
 8004810:	e7ee      	b.n	80047f0 <__libc_init_array+0xc>
 8004812:	00b3      	lsls	r3, r6, #2
 8004814:	58eb      	ldr	r3, [r5, r3]
 8004816:	4798      	blx	r3
 8004818:	3601      	adds	r6, #1
 800481a:	e7f2      	b.n	8004802 <__libc_init_array+0x1e>
 800481c:	08005af8 	.word	0x08005af8
 8004820:	08005af8 	.word	0x08005af8
 8004824:	08005afc 	.word	0x08005afc
 8004828:	08005af8 	.word	0x08005af8

0800482c <__retarget_lock_init_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_acquire_recursive>:
 800482e:	4770      	bx	lr

08004830 <__retarget_lock_release_recursive>:
 8004830:	4770      	bx	lr
	...

08004834 <__assert_func>:
 8004834:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004836:	0014      	movs	r4, r2
 8004838:	001a      	movs	r2, r3
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <__assert_func+0x2c>)
 800483c:	0005      	movs	r5, r0
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	000e      	movs	r6, r1
 8004842:	68d8      	ldr	r0, [r3, #12]
 8004844:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <__assert_func+0x30>)
 8004846:	2c00      	cmp	r4, #0
 8004848:	d101      	bne.n	800484e <__assert_func+0x1a>
 800484a:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <__assert_func+0x34>)
 800484c:	001c      	movs	r4, r3
 800484e:	4907      	ldr	r1, [pc, #28]	@ (800486c <__assert_func+0x38>)
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	9402      	str	r4, [sp, #8]
 8004854:	002b      	movs	r3, r5
 8004856:	9600      	str	r6, [sp, #0]
 8004858:	f000 f9c2 	bl	8004be0 <fiprintf>
 800485c:	f000 f9e2 	bl	8004c24 <abort>
 8004860:	20000020 	.word	0x20000020
 8004864:	08005a87 	.word	0x08005a87
 8004868:	08005ac2 	.word	0x08005ac2
 800486c:	08005a94 	.word	0x08005a94

08004870 <_free_r>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	0005      	movs	r5, r0
 8004874:	1e0c      	subs	r4, r1, #0
 8004876:	d010      	beq.n	800489a <_free_r+0x2a>
 8004878:	3c04      	subs	r4, #4
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	da00      	bge.n	8004882 <_free_r+0x12>
 8004880:	18e4      	adds	r4, r4, r3
 8004882:	0028      	movs	r0, r5
 8004884:	f000 f8ea 	bl	8004a5c <__malloc_lock>
 8004888:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <_free_r+0x90>)
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <_free_r+0x2c>
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	6014      	str	r4, [r2, #0]
 8004894:	0028      	movs	r0, r5
 8004896:	f000 f8e9 	bl	8004a6c <__malloc_unlock>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	42a3      	cmp	r3, r4
 800489e:	d908      	bls.n	80048b2 <_free_r+0x42>
 80048a0:	6820      	ldr	r0, [r4, #0]
 80048a2:	1821      	adds	r1, r4, r0
 80048a4:	428b      	cmp	r3, r1
 80048a6:	d1f3      	bne.n	8004890 <_free_r+0x20>
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	1809      	adds	r1, r1, r0
 80048ae:	6021      	str	r1, [r4, #0]
 80048b0:	e7ee      	b.n	8004890 <_free_r+0x20>
 80048b2:	001a      	movs	r2, r3
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <_free_r+0x4e>
 80048ba:	42a3      	cmp	r3, r4
 80048bc:	d9f9      	bls.n	80048b2 <_free_r+0x42>
 80048be:	6811      	ldr	r1, [r2, #0]
 80048c0:	1850      	adds	r0, r2, r1
 80048c2:	42a0      	cmp	r0, r4
 80048c4:	d10b      	bne.n	80048de <_free_r+0x6e>
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	1809      	adds	r1, r1, r0
 80048ca:	1850      	adds	r0, r2, r1
 80048cc:	6011      	str	r1, [r2, #0]
 80048ce:	4283      	cmp	r3, r0
 80048d0:	d1e0      	bne.n	8004894 <_free_r+0x24>
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	1841      	adds	r1, r0, r1
 80048d8:	6011      	str	r1, [r2, #0]
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e7da      	b.n	8004894 <_free_r+0x24>
 80048de:	42a0      	cmp	r0, r4
 80048e0:	d902      	bls.n	80048e8 <_free_r+0x78>
 80048e2:	230c      	movs	r3, #12
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	e7d5      	b.n	8004894 <_free_r+0x24>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	1821      	adds	r1, r4, r0
 80048ec:	428b      	cmp	r3, r1
 80048ee:	d103      	bne.n	80048f8 <_free_r+0x88>
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	1809      	adds	r1, r1, r0
 80048f6:	6021      	str	r1, [r4, #0]
 80048f8:	6063      	str	r3, [r4, #4]
 80048fa:	6054      	str	r4, [r2, #4]
 80048fc:	e7ca      	b.n	8004894 <_free_r+0x24>
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	20000424 	.word	0x20000424

08004904 <malloc>:
 8004904:	b510      	push	{r4, lr}
 8004906:	4b03      	ldr	r3, [pc, #12]	@ (8004914 <malloc+0x10>)
 8004908:	0001      	movs	r1, r0
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	f000 f826 	bl	800495c <_malloc_r>
 8004910:	bd10      	pop	{r4, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	20000020 	.word	0x20000020

08004918 <sbrk_aligned>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4e0f      	ldr	r6, [pc, #60]	@ (8004958 <sbrk_aligned+0x40>)
 800491c:	000d      	movs	r5, r1
 800491e:	6831      	ldr	r1, [r6, #0]
 8004920:	0004      	movs	r4, r0
 8004922:	2900      	cmp	r1, #0
 8004924:	d102      	bne.n	800492c <sbrk_aligned+0x14>
 8004926:	f000 f96b 	bl	8004c00 <_sbrk_r>
 800492a:	6030      	str	r0, [r6, #0]
 800492c:	0029      	movs	r1, r5
 800492e:	0020      	movs	r0, r4
 8004930:	f000 f966 	bl	8004c00 <_sbrk_r>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d103      	bne.n	8004940 <sbrk_aligned+0x28>
 8004938:	2501      	movs	r5, #1
 800493a:	426d      	negs	r5, r5
 800493c:	0028      	movs	r0, r5
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	2303      	movs	r3, #3
 8004942:	1cc5      	adds	r5, r0, #3
 8004944:	439d      	bics	r5, r3
 8004946:	42a8      	cmp	r0, r5
 8004948:	d0f8      	beq.n	800493c <sbrk_aligned+0x24>
 800494a:	1a29      	subs	r1, r5, r0
 800494c:	0020      	movs	r0, r4
 800494e:	f000 f957 	bl	8004c00 <_sbrk_r>
 8004952:	3001      	adds	r0, #1
 8004954:	d1f2      	bne.n	800493c <sbrk_aligned+0x24>
 8004956:	e7ef      	b.n	8004938 <sbrk_aligned+0x20>
 8004958:	20000420 	.word	0x20000420

0800495c <_malloc_r>:
 800495c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495e:	2203      	movs	r2, #3
 8004960:	1ccb      	adds	r3, r1, #3
 8004962:	4393      	bics	r3, r2
 8004964:	3308      	adds	r3, #8
 8004966:	0005      	movs	r5, r0
 8004968:	001f      	movs	r7, r3
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d234      	bcs.n	80049d8 <_malloc_r+0x7c>
 800496e:	270c      	movs	r7, #12
 8004970:	42b9      	cmp	r1, r7
 8004972:	d833      	bhi.n	80049dc <_malloc_r+0x80>
 8004974:	0028      	movs	r0, r5
 8004976:	f000 f871 	bl	8004a5c <__malloc_lock>
 800497a:	4e37      	ldr	r6, [pc, #220]	@ (8004a58 <_malloc_r+0xfc>)
 800497c:	6833      	ldr	r3, [r6, #0]
 800497e:	001c      	movs	r4, r3
 8004980:	2c00      	cmp	r4, #0
 8004982:	d12f      	bne.n	80049e4 <_malloc_r+0x88>
 8004984:	0039      	movs	r1, r7
 8004986:	0028      	movs	r0, r5
 8004988:	f7ff ffc6 	bl	8004918 <sbrk_aligned>
 800498c:	0004      	movs	r4, r0
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d15f      	bne.n	8004a52 <_malloc_r+0xf6>
 8004992:	6834      	ldr	r4, [r6, #0]
 8004994:	9400      	str	r4, [sp, #0]
 8004996:	9b00      	ldr	r3, [sp, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d14a      	bne.n	8004a32 <_malloc_r+0xd6>
 800499c:	2c00      	cmp	r4, #0
 800499e:	d052      	beq.n	8004a46 <_malloc_r+0xea>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	0028      	movs	r0, r5
 80049a4:	18e3      	adds	r3, r4, r3
 80049a6:	9900      	ldr	r1, [sp, #0]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	f000 f929 	bl	8004c00 <_sbrk_r>
 80049ae:	9b01      	ldr	r3, [sp, #4]
 80049b0:	4283      	cmp	r3, r0
 80049b2:	d148      	bne.n	8004a46 <_malloc_r+0xea>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	0028      	movs	r0, r5
 80049b8:	1aff      	subs	r7, r7, r3
 80049ba:	0039      	movs	r1, r7
 80049bc:	f7ff ffac 	bl	8004918 <sbrk_aligned>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d040      	beq.n	8004a46 <_malloc_r+0xea>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	19db      	adds	r3, r3, r7
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	6833      	ldr	r3, [r6, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	d133      	bne.n	8004a3a <_malloc_r+0xde>
 80049d2:	9b00      	ldr	r3, [sp, #0]
 80049d4:	6033      	str	r3, [r6, #0]
 80049d6:	e019      	b.n	8004a0c <_malloc_r+0xb0>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	dac9      	bge.n	8004970 <_malloc_r+0x14>
 80049dc:	230c      	movs	r3, #12
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	2000      	movs	r0, #0
 80049e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e4:	6821      	ldr	r1, [r4, #0]
 80049e6:	1bc9      	subs	r1, r1, r7
 80049e8:	d420      	bmi.n	8004a2c <_malloc_r+0xd0>
 80049ea:	290b      	cmp	r1, #11
 80049ec:	d90a      	bls.n	8004a04 <_malloc_r+0xa8>
 80049ee:	19e2      	adds	r2, r4, r7
 80049f0:	6027      	str	r7, [r4, #0]
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	d104      	bne.n	8004a00 <_malloc_r+0xa4>
 80049f6:	6032      	str	r2, [r6, #0]
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	6011      	str	r1, [r2, #0]
 80049fc:	6053      	str	r3, [r2, #4]
 80049fe:	e005      	b.n	8004a0c <_malloc_r+0xb0>
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	e7f9      	b.n	80049f8 <_malloc_r+0x9c>
 8004a04:	6862      	ldr	r2, [r4, #4]
 8004a06:	42a3      	cmp	r3, r4
 8004a08:	d10e      	bne.n	8004a28 <_malloc_r+0xcc>
 8004a0a:	6032      	str	r2, [r6, #0]
 8004a0c:	0028      	movs	r0, r5
 8004a0e:	f000 f82d 	bl	8004a6c <__malloc_unlock>
 8004a12:	0020      	movs	r0, r4
 8004a14:	2207      	movs	r2, #7
 8004a16:	300b      	adds	r0, #11
 8004a18:	1d23      	adds	r3, r4, #4
 8004a1a:	4390      	bics	r0, r2
 8004a1c:	1ac2      	subs	r2, r0, r3
 8004a1e:	4298      	cmp	r0, r3
 8004a20:	d0df      	beq.n	80049e2 <_malloc_r+0x86>
 8004a22:	1a1b      	subs	r3, r3, r0
 8004a24:	50a3      	str	r3, [r4, r2]
 8004a26:	e7dc      	b.n	80049e2 <_malloc_r+0x86>
 8004a28:	605a      	str	r2, [r3, #4]
 8004a2a:	e7ef      	b.n	8004a0c <_malloc_r+0xb0>
 8004a2c:	0023      	movs	r3, r4
 8004a2e:	6864      	ldr	r4, [r4, #4]
 8004a30:	e7a6      	b.n	8004980 <_malloc_r+0x24>
 8004a32:	9c00      	ldr	r4, [sp, #0]
 8004a34:	6863      	ldr	r3, [r4, #4]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	e7ad      	b.n	8004996 <_malloc_r+0x3a>
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	42a3      	cmp	r3, r4
 8004a40:	d1fb      	bne.n	8004a3a <_malloc_r+0xde>
 8004a42:	2300      	movs	r3, #0
 8004a44:	e7da      	b.n	80049fc <_malloc_r+0xa0>
 8004a46:	230c      	movs	r3, #12
 8004a48:	0028      	movs	r0, r5
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	f000 f80e 	bl	8004a6c <__malloc_unlock>
 8004a50:	e7c6      	b.n	80049e0 <_malloc_r+0x84>
 8004a52:	6007      	str	r7, [r0, #0]
 8004a54:	e7da      	b.n	8004a0c <_malloc_r+0xb0>
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	20000424 	.word	0x20000424

08004a5c <__malloc_lock>:
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	4802      	ldr	r0, [pc, #8]	@ (8004a68 <__malloc_lock+0xc>)
 8004a60:	f7ff fee5 	bl	800482e <__retarget_lock_acquire_recursive>
 8004a64:	bd10      	pop	{r4, pc}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	2000041c 	.word	0x2000041c

08004a6c <__malloc_unlock>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	4802      	ldr	r0, [pc, #8]	@ (8004a78 <__malloc_unlock+0xc>)
 8004a70:	f7ff fede 	bl	8004830 <__retarget_lock_release_recursive>
 8004a74:	bd10      	pop	{r4, pc}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	2000041c 	.word	0x2000041c

08004a7c <__sflush_r>:
 8004a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a7e:	220c      	movs	r2, #12
 8004a80:	5e8b      	ldrsh	r3, [r1, r2]
 8004a82:	0005      	movs	r5, r0
 8004a84:	000c      	movs	r4, r1
 8004a86:	071a      	lsls	r2, r3, #28
 8004a88:	d456      	bmi.n	8004b38 <__sflush_r+0xbc>
 8004a8a:	684a      	ldr	r2, [r1, #4]
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	dc02      	bgt.n	8004a96 <__sflush_r+0x1a>
 8004a90:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	dd4e      	ble.n	8004b34 <__sflush_r+0xb8>
 8004a96:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a98:	2f00      	cmp	r7, #0
 8004a9a:	d04b      	beq.n	8004b34 <__sflush_r+0xb8>
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2080      	movs	r0, #128	@ 0x80
 8004aa0:	682e      	ldr	r6, [r5, #0]
 8004aa2:	602a      	str	r2, [r5, #0]
 8004aa4:	001a      	movs	r2, r3
 8004aa6:	0140      	lsls	r0, r0, #5
 8004aa8:	6a21      	ldr	r1, [r4, #32]
 8004aaa:	4002      	ands	r2, r0
 8004aac:	4203      	tst	r3, r0
 8004aae:	d033      	beq.n	8004b18 <__sflush_r+0x9c>
 8004ab0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	075b      	lsls	r3, r3, #29
 8004ab6:	d506      	bpl.n	8004ac6 <__sflush_r+0x4a>
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	1ad2      	subs	r2, r2, r3
 8004abc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <__sflush_r+0x4a>
 8004ac2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ac4:	1ad2      	subs	r2, r2, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	0028      	movs	r0, r5
 8004aca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004acc:	6a21      	ldr	r1, [r4, #32]
 8004ace:	47b8      	blx	r7
 8004ad0:	89a2      	ldrh	r2, [r4, #12]
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	d106      	bne.n	8004ae4 <__sflush_r+0x68>
 8004ad6:	6829      	ldr	r1, [r5, #0]
 8004ad8:	291d      	cmp	r1, #29
 8004ada:	d846      	bhi.n	8004b6a <__sflush_r+0xee>
 8004adc:	4b29      	ldr	r3, [pc, #164]	@ (8004b84 <__sflush_r+0x108>)
 8004ade:	410b      	asrs	r3, r1
 8004ae0:	07db      	lsls	r3, r3, #31
 8004ae2:	d442      	bmi.n	8004b6a <__sflush_r+0xee>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	6923      	ldr	r3, [r4, #16]
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	04d2      	lsls	r2, r2, #19
 8004aee:	d505      	bpl.n	8004afc <__sflush_r+0x80>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <__sflush_r+0x7e>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d100      	bne.n	8004afc <__sflush_r+0x80>
 8004afa:	6560      	str	r0, [r4, #84]	@ 0x54
 8004afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004afe:	602e      	str	r6, [r5, #0]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d017      	beq.n	8004b34 <__sflush_r+0xb8>
 8004b04:	0023      	movs	r3, r4
 8004b06:	3344      	adds	r3, #68	@ 0x44
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	d002      	beq.n	8004b12 <__sflush_r+0x96>
 8004b0c:	0028      	movs	r0, r5
 8004b0e:	f7ff feaf 	bl	8004870 <_free_r>
 8004b12:	2300      	movs	r3, #0
 8004b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b16:	e00d      	b.n	8004b34 <__sflush_r+0xb8>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	0028      	movs	r0, r5
 8004b1c:	47b8      	blx	r7
 8004b1e:	0002      	movs	r2, r0
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d1c6      	bne.n	8004ab2 <__sflush_r+0x36>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0c3      	beq.n	8004ab2 <__sflush_r+0x36>
 8004b2a:	2b1d      	cmp	r3, #29
 8004b2c:	d001      	beq.n	8004b32 <__sflush_r+0xb6>
 8004b2e:	2b16      	cmp	r3, #22
 8004b30:	d11a      	bne.n	8004b68 <__sflush_r+0xec>
 8004b32:	602e      	str	r6, [r5, #0]
 8004b34:	2000      	movs	r0, #0
 8004b36:	e01e      	b.n	8004b76 <__sflush_r+0xfa>
 8004b38:	690e      	ldr	r6, [r1, #16]
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	d0fa      	beq.n	8004b34 <__sflush_r+0xb8>
 8004b3e:	680f      	ldr	r7, [r1, #0]
 8004b40:	600e      	str	r6, [r1, #0]
 8004b42:	1bba      	subs	r2, r7, r6
 8004b44:	9201      	str	r2, [sp, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	079b      	lsls	r3, r3, #30
 8004b4a:	d100      	bne.n	8004b4e <__sflush_r+0xd2>
 8004b4c:	694a      	ldr	r2, [r1, #20]
 8004b4e:	60a2      	str	r2, [r4, #8]
 8004b50:	9b01      	ldr	r3, [sp, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	ddee      	ble.n	8004b34 <__sflush_r+0xb8>
 8004b56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004b58:	0032      	movs	r2, r6
 8004b5a:	001f      	movs	r7, r3
 8004b5c:	0028      	movs	r0, r5
 8004b5e:	9b01      	ldr	r3, [sp, #4]
 8004b60:	6a21      	ldr	r1, [r4, #32]
 8004b62:	47b8      	blx	r7
 8004b64:	2800      	cmp	r0, #0
 8004b66:	dc07      	bgt.n	8004b78 <__sflush_r+0xfc>
 8004b68:	89a2      	ldrh	r2, [r4, #12]
 8004b6a:	2340      	movs	r3, #64	@ 0x40
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	b21b      	sxth	r3, r3
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	4240      	negs	r0, r0
 8004b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b78:	9b01      	ldr	r3, [sp, #4]
 8004b7a:	1836      	adds	r6, r6, r0
 8004b7c:	1a1b      	subs	r3, r3, r0
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	e7e6      	b.n	8004b50 <__sflush_r+0xd4>
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	dfbffffe 	.word	0xdfbffffe

08004b88 <_fflush_r>:
 8004b88:	690b      	ldr	r3, [r1, #16]
 8004b8a:	b570      	push	{r4, r5, r6, lr}
 8004b8c:	0005      	movs	r5, r0
 8004b8e:	000c      	movs	r4, r1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <_fflush_r+0x12>
 8004b94:	2500      	movs	r5, #0
 8004b96:	0028      	movs	r0, r5
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d004      	beq.n	8004ba8 <_fflush_r+0x20>
 8004b9e:	6a03      	ldr	r3, [r0, #32]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <_fflush_r+0x20>
 8004ba4:	f7ff fd42 	bl	800462c <__sinit>
 8004ba8:	220c      	movs	r2, #12
 8004baa:	5ea3      	ldrsh	r3, [r4, r2]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f1      	beq.n	8004b94 <_fflush_r+0xc>
 8004bb0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bb2:	07d2      	lsls	r2, r2, #31
 8004bb4:	d404      	bmi.n	8004bc0 <_fflush_r+0x38>
 8004bb6:	059b      	lsls	r3, r3, #22
 8004bb8:	d402      	bmi.n	8004bc0 <_fflush_r+0x38>
 8004bba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bbc:	f7ff fe37 	bl	800482e <__retarget_lock_acquire_recursive>
 8004bc0:	0028      	movs	r0, r5
 8004bc2:	0021      	movs	r1, r4
 8004bc4:	f7ff ff5a 	bl	8004a7c <__sflush_r>
 8004bc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bca:	0005      	movs	r5, r0
 8004bcc:	07db      	lsls	r3, r3, #31
 8004bce:	d4e2      	bmi.n	8004b96 <_fflush_r+0xe>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	059b      	lsls	r3, r3, #22
 8004bd4:	d4df      	bmi.n	8004b96 <_fflush_r+0xe>
 8004bd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bd8:	f7ff fe2a 	bl	8004830 <__retarget_lock_release_recursive>
 8004bdc:	e7db      	b.n	8004b96 <_fflush_r+0xe>
	...

08004be0 <fiprintf>:
 8004be0:	b40e      	push	{r1, r2, r3}
 8004be2:	b517      	push	{r0, r1, r2, r4, lr}
 8004be4:	4c05      	ldr	r4, [pc, #20]	@ (8004bfc <fiprintf+0x1c>)
 8004be6:	ab05      	add	r3, sp, #20
 8004be8:	cb04      	ldmia	r3!, {r2}
 8004bea:	0001      	movs	r1, r0
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	f000 f846 	bl	8004c80 <_vfiprintf_r>
 8004bf4:	bc1e      	pop	{r1, r2, r3, r4}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	b003      	add	sp, #12
 8004bfa:	4718      	bx	r3
 8004bfc:	20000020 	.word	0x20000020

08004c00 <_sbrk_r>:
 8004c00:	2300      	movs	r3, #0
 8004c02:	b570      	push	{r4, r5, r6, lr}
 8004c04:	4d06      	ldr	r5, [pc, #24]	@ (8004c20 <_sbrk_r+0x20>)
 8004c06:	0004      	movs	r4, r0
 8004c08:	0008      	movs	r0, r1
 8004c0a:	602b      	str	r3, [r5, #0]
 8004c0c:	f7ff fadc 	bl	80041c8 <_sbrk>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d103      	bne.n	8004c1c <_sbrk_r+0x1c>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d000      	beq.n	8004c1c <_sbrk_r+0x1c>
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	20000418 	.word	0x20000418

08004c24 <abort>:
 8004c24:	2006      	movs	r0, #6
 8004c26:	b510      	push	{r4, lr}
 8004c28:	f000 fb8e 	bl	8005348 <raise>
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	f7ff fa59 	bl	80040e4 <_exit>

08004c32 <__sfputc_r>:
 8004c32:	6893      	ldr	r3, [r2, #8]
 8004c34:	b510      	push	{r4, lr}
 8004c36:	3b01      	subs	r3, #1
 8004c38:	6093      	str	r3, [r2, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	da04      	bge.n	8004c48 <__sfputc_r+0x16>
 8004c3e:	6994      	ldr	r4, [r2, #24]
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	db07      	blt.n	8004c54 <__sfputc_r+0x22>
 8004c44:	290a      	cmp	r1, #10
 8004c46:	d005      	beq.n	8004c54 <__sfputc_r+0x22>
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	1c58      	adds	r0, r3, #1
 8004c4c:	6010      	str	r0, [r2, #0]
 8004c4e:	7019      	strb	r1, [r3, #0]
 8004c50:	0008      	movs	r0, r1
 8004c52:	bd10      	pop	{r4, pc}
 8004c54:	f000 faae 	bl	80051b4 <__swbuf_r>
 8004c58:	0001      	movs	r1, r0
 8004c5a:	e7f9      	b.n	8004c50 <__sfputc_r+0x1e>

08004c5c <__sfputs_r>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	0006      	movs	r6, r0
 8004c60:	000f      	movs	r7, r1
 8004c62:	0014      	movs	r4, r2
 8004c64:	18d5      	adds	r5, r2, r3
 8004c66:	42ac      	cmp	r4, r5
 8004c68:	d101      	bne.n	8004c6e <__sfputs_r+0x12>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e007      	b.n	8004c7e <__sfputs_r+0x22>
 8004c6e:	7821      	ldrb	r1, [r4, #0]
 8004c70:	003a      	movs	r2, r7
 8004c72:	0030      	movs	r0, r6
 8004c74:	f7ff ffdd 	bl	8004c32 <__sfputc_r>
 8004c78:	3401      	adds	r4, #1
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d1f3      	bne.n	8004c66 <__sfputs_r+0xa>
 8004c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c80 <_vfiprintf_r>:
 8004c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c82:	b0a1      	sub	sp, #132	@ 0x84
 8004c84:	000f      	movs	r7, r1
 8004c86:	0015      	movs	r5, r2
 8004c88:	001e      	movs	r6, r3
 8004c8a:	9003      	str	r0, [sp, #12]
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d004      	beq.n	8004c9a <_vfiprintf_r+0x1a>
 8004c90:	6a03      	ldr	r3, [r0, #32]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <_vfiprintf_r+0x1a>
 8004c96:	f7ff fcc9 	bl	800462c <__sinit>
 8004c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c9c:	07db      	lsls	r3, r3, #31
 8004c9e:	d405      	bmi.n	8004cac <_vfiprintf_r+0x2c>
 8004ca0:	89bb      	ldrh	r3, [r7, #12]
 8004ca2:	059b      	lsls	r3, r3, #22
 8004ca4:	d402      	bmi.n	8004cac <_vfiprintf_r+0x2c>
 8004ca6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ca8:	f7ff fdc1 	bl	800482e <__retarget_lock_acquire_recursive>
 8004cac:	89bb      	ldrh	r3, [r7, #12]
 8004cae:	071b      	lsls	r3, r3, #28
 8004cb0:	d502      	bpl.n	8004cb8 <_vfiprintf_r+0x38>
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d113      	bne.n	8004ce0 <_vfiprintf_r+0x60>
 8004cb8:	0039      	movs	r1, r7
 8004cba:	9803      	ldr	r0, [sp, #12]
 8004cbc:	f000 fabc 	bl	8005238 <__swsetup_r>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d00d      	beq.n	8004ce0 <_vfiprintf_r+0x60>
 8004cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cc6:	07db      	lsls	r3, r3, #31
 8004cc8:	d503      	bpl.n	8004cd2 <_vfiprintf_r+0x52>
 8004cca:	2001      	movs	r0, #1
 8004ccc:	4240      	negs	r0, r0
 8004cce:	b021      	add	sp, #132	@ 0x84
 8004cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd2:	89bb      	ldrh	r3, [r7, #12]
 8004cd4:	059b      	lsls	r3, r3, #22
 8004cd6:	d4f8      	bmi.n	8004cca <_vfiprintf_r+0x4a>
 8004cd8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004cda:	f7ff fda9 	bl	8004830 <__retarget_lock_release_recursive>
 8004cde:	e7f4      	b.n	8004cca <_vfiprintf_r+0x4a>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	ac08      	add	r4, sp, #32
 8004ce4:	6163      	str	r3, [r4, #20]
 8004ce6:	3320      	adds	r3, #32
 8004ce8:	7663      	strb	r3, [r4, #25]
 8004cea:	3310      	adds	r3, #16
 8004cec:	76a3      	strb	r3, [r4, #26]
 8004cee:	9607      	str	r6, [sp, #28]
 8004cf0:	002e      	movs	r6, r5
 8004cf2:	7833      	ldrb	r3, [r6, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <_vfiprintf_r+0x7c>
 8004cf8:	2b25      	cmp	r3, #37	@ 0x25
 8004cfa:	d148      	bne.n	8004d8e <_vfiprintf_r+0x10e>
 8004cfc:	1b73      	subs	r3, r6, r5
 8004cfe:	9305      	str	r3, [sp, #20]
 8004d00:	42ae      	cmp	r6, r5
 8004d02:	d00b      	beq.n	8004d1c <_vfiprintf_r+0x9c>
 8004d04:	002a      	movs	r2, r5
 8004d06:	0039      	movs	r1, r7
 8004d08:	9803      	ldr	r0, [sp, #12]
 8004d0a:	f7ff ffa7 	bl	8004c5c <__sfputs_r>
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d100      	bne.n	8004d14 <_vfiprintf_r+0x94>
 8004d12:	e0ae      	b.n	8004e72 <_vfiprintf_r+0x1f2>
 8004d14:	6963      	ldr	r3, [r4, #20]
 8004d16:	9a05      	ldr	r2, [sp, #20]
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	6163      	str	r3, [r4, #20]
 8004d1c:	7833      	ldrb	r3, [r6, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d100      	bne.n	8004d24 <_vfiprintf_r+0xa4>
 8004d22:	e0a6      	b.n	8004e72 <_vfiprintf_r+0x1f2>
 8004d24:	2201      	movs	r2, #1
 8004d26:	2300      	movs	r3, #0
 8004d28:	4252      	negs	r2, r2
 8004d2a:	6062      	str	r2, [r4, #4]
 8004d2c:	a904      	add	r1, sp, #16
 8004d2e:	3254      	adds	r2, #84	@ 0x54
 8004d30:	1852      	adds	r2, r2, r1
 8004d32:	1c75      	adds	r5, r6, #1
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	60e3      	str	r3, [r4, #12]
 8004d38:	60a3      	str	r3, [r4, #8]
 8004d3a:	7013      	strb	r3, [r2, #0]
 8004d3c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004d3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ea4 <_vfiprintf_r+0x224>)
 8004d40:	2205      	movs	r2, #5
 8004d42:	0018      	movs	r0, r3
 8004d44:	7829      	ldrb	r1, [r5, #0]
 8004d46:	9305      	str	r3, [sp, #20]
 8004d48:	f000 fb1e 	bl	8005388 <memchr>
 8004d4c:	1c6e      	adds	r6, r5, #1
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d11f      	bne.n	8004d92 <_vfiprintf_r+0x112>
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	06d3      	lsls	r3, r2, #27
 8004d56:	d504      	bpl.n	8004d62 <_vfiprintf_r+0xe2>
 8004d58:	2353      	movs	r3, #83	@ 0x53
 8004d5a:	a904      	add	r1, sp, #16
 8004d5c:	185b      	adds	r3, r3, r1
 8004d5e:	2120      	movs	r1, #32
 8004d60:	7019      	strb	r1, [r3, #0]
 8004d62:	0713      	lsls	r3, r2, #28
 8004d64:	d504      	bpl.n	8004d70 <_vfiprintf_r+0xf0>
 8004d66:	2353      	movs	r3, #83	@ 0x53
 8004d68:	a904      	add	r1, sp, #16
 8004d6a:	185b      	adds	r3, r3, r1
 8004d6c:	212b      	movs	r1, #43	@ 0x2b
 8004d6e:	7019      	strb	r1, [r3, #0]
 8004d70:	782b      	ldrb	r3, [r5, #0]
 8004d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d74:	d016      	beq.n	8004da4 <_vfiprintf_r+0x124>
 8004d76:	002e      	movs	r6, r5
 8004d78:	2100      	movs	r1, #0
 8004d7a:	200a      	movs	r0, #10
 8004d7c:	68e3      	ldr	r3, [r4, #12]
 8004d7e:	7832      	ldrb	r2, [r6, #0]
 8004d80:	1c75      	adds	r5, r6, #1
 8004d82:	3a30      	subs	r2, #48	@ 0x30
 8004d84:	2a09      	cmp	r2, #9
 8004d86:	d950      	bls.n	8004e2a <_vfiprintf_r+0x1aa>
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	d111      	bne.n	8004db0 <_vfiprintf_r+0x130>
 8004d8c:	e017      	b.n	8004dbe <_vfiprintf_r+0x13e>
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7af      	b.n	8004cf2 <_vfiprintf_r+0x72>
 8004d92:	9b05      	ldr	r3, [sp, #20]
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	1ac0      	subs	r0, r0, r3
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4083      	lsls	r3, r0
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	0035      	movs	r5, r6
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	e7cc      	b.n	8004d3e <_vfiprintf_r+0xbe>
 8004da4:	9b07      	ldr	r3, [sp, #28]
 8004da6:	1d19      	adds	r1, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	9107      	str	r1, [sp, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	db01      	blt.n	8004db4 <_vfiprintf_r+0x134>
 8004db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004db2:	e004      	b.n	8004dbe <_vfiprintf_r+0x13e>
 8004db4:	425b      	negs	r3, r3
 8004db6:	60e3      	str	r3, [r4, #12]
 8004db8:	2302      	movs	r3, #2
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	7833      	ldrb	r3, [r6, #0]
 8004dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dc2:	d10c      	bne.n	8004dde <_vfiprintf_r+0x15e>
 8004dc4:	7873      	ldrb	r3, [r6, #1]
 8004dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc8:	d134      	bne.n	8004e34 <_vfiprintf_r+0x1b4>
 8004dca:	9b07      	ldr	r3, [sp, #28]
 8004dcc:	3602      	adds	r6, #2
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	9207      	str	r2, [sp, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	da01      	bge.n	8004ddc <_vfiprintf_r+0x15c>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	425b      	negs	r3, r3
 8004ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dde:	4d32      	ldr	r5, [pc, #200]	@ (8004ea8 <_vfiprintf_r+0x228>)
 8004de0:	2203      	movs	r2, #3
 8004de2:	0028      	movs	r0, r5
 8004de4:	7831      	ldrb	r1, [r6, #0]
 8004de6:	f000 facf 	bl	8005388 <memchr>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d006      	beq.n	8004dfc <_vfiprintf_r+0x17c>
 8004dee:	2340      	movs	r3, #64	@ 0x40
 8004df0:	1b40      	subs	r0, r0, r5
 8004df2:	4083      	lsls	r3, r0
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	3601      	adds	r6, #1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	7831      	ldrb	r1, [r6, #0]
 8004dfe:	2206      	movs	r2, #6
 8004e00:	482a      	ldr	r0, [pc, #168]	@ (8004eac <_vfiprintf_r+0x22c>)
 8004e02:	1c75      	adds	r5, r6, #1
 8004e04:	7621      	strb	r1, [r4, #24]
 8004e06:	f000 fabf 	bl	8005388 <memchr>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d040      	beq.n	8004e90 <_vfiprintf_r+0x210>
 8004e0e:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <_vfiprintf_r+0x230>)
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d122      	bne.n	8004e5a <_vfiprintf_r+0x1da>
 8004e14:	2207      	movs	r2, #7
 8004e16:	9b07      	ldr	r3, [sp, #28]
 8004e18:	3307      	adds	r3, #7
 8004e1a:	4393      	bics	r3, r2
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	9307      	str	r3, [sp, #28]
 8004e20:	6963      	ldr	r3, [r4, #20]
 8004e22:	9a04      	ldr	r2, [sp, #16]
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	6163      	str	r3, [r4, #20]
 8004e28:	e762      	b.n	8004cf0 <_vfiprintf_r+0x70>
 8004e2a:	4343      	muls	r3, r0
 8004e2c:	002e      	movs	r6, r5
 8004e2e:	2101      	movs	r1, #1
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	e7a4      	b.n	8004d7e <_vfiprintf_r+0xfe>
 8004e34:	2300      	movs	r3, #0
 8004e36:	200a      	movs	r0, #10
 8004e38:	0019      	movs	r1, r3
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	7832      	ldrb	r2, [r6, #0]
 8004e40:	1c75      	adds	r5, r6, #1
 8004e42:	3a30      	subs	r2, #48	@ 0x30
 8004e44:	2a09      	cmp	r2, #9
 8004e46:	d903      	bls.n	8004e50 <_vfiprintf_r+0x1d0>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0c8      	beq.n	8004dde <_vfiprintf_r+0x15e>
 8004e4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e4e:	e7c6      	b.n	8004dde <_vfiprintf_r+0x15e>
 8004e50:	4341      	muls	r1, r0
 8004e52:	002e      	movs	r6, r5
 8004e54:	2301      	movs	r3, #1
 8004e56:	1889      	adds	r1, r1, r2
 8004e58:	e7f1      	b.n	8004e3e <_vfiprintf_r+0x1be>
 8004e5a:	aa07      	add	r2, sp, #28
 8004e5c:	9200      	str	r2, [sp, #0]
 8004e5e:	0021      	movs	r1, r4
 8004e60:	003a      	movs	r2, r7
 8004e62:	4b14      	ldr	r3, [pc, #80]	@ (8004eb4 <_vfiprintf_r+0x234>)
 8004e64:	9803      	ldr	r0, [sp, #12]
 8004e66:	e000      	b.n	8004e6a <_vfiprintf_r+0x1ea>
 8004e68:	bf00      	nop
 8004e6a:	9004      	str	r0, [sp, #16]
 8004e6c:	9b04      	ldr	r3, [sp, #16]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	d1d6      	bne.n	8004e20 <_vfiprintf_r+0x1a0>
 8004e72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e74:	07db      	lsls	r3, r3, #31
 8004e76:	d405      	bmi.n	8004e84 <_vfiprintf_r+0x204>
 8004e78:	89bb      	ldrh	r3, [r7, #12]
 8004e7a:	059b      	lsls	r3, r3, #22
 8004e7c:	d402      	bmi.n	8004e84 <_vfiprintf_r+0x204>
 8004e7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e80:	f7ff fcd6 	bl	8004830 <__retarget_lock_release_recursive>
 8004e84:	89bb      	ldrh	r3, [r7, #12]
 8004e86:	065b      	lsls	r3, r3, #25
 8004e88:	d500      	bpl.n	8004e8c <_vfiprintf_r+0x20c>
 8004e8a:	e71e      	b.n	8004cca <_vfiprintf_r+0x4a>
 8004e8c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e8e:	e71e      	b.n	8004cce <_vfiprintf_r+0x4e>
 8004e90:	aa07      	add	r2, sp, #28
 8004e92:	9200      	str	r2, [sp, #0]
 8004e94:	0021      	movs	r1, r4
 8004e96:	003a      	movs	r2, r7
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <_vfiprintf_r+0x234>)
 8004e9a:	9803      	ldr	r0, [sp, #12]
 8004e9c:	f000 f87c 	bl	8004f98 <_printf_i>
 8004ea0:	e7e3      	b.n	8004e6a <_vfiprintf_r+0x1ea>
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	08005ac3 	.word	0x08005ac3
 8004ea8:	08005ac9 	.word	0x08005ac9
 8004eac:	08005acd 	.word	0x08005acd
 8004eb0:	00000000 	.word	0x00000000
 8004eb4:	08004c5d 	.word	0x08004c5d

08004eb8 <_printf_common>:
 8004eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eba:	0016      	movs	r6, r2
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	688a      	ldr	r2, [r1, #8]
 8004ec0:	690b      	ldr	r3, [r1, #16]
 8004ec2:	000c      	movs	r4, r1
 8004ec4:	9000      	str	r0, [sp, #0]
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	da00      	bge.n	8004ecc <_printf_common+0x14>
 8004eca:	0013      	movs	r3, r2
 8004ecc:	0022      	movs	r2, r4
 8004ece:	6033      	str	r3, [r6, #0]
 8004ed0:	3243      	adds	r2, #67	@ 0x43
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	2a00      	cmp	r2, #0
 8004ed6:	d001      	beq.n	8004edc <_printf_common+0x24>
 8004ed8:	3301      	adds	r3, #1
 8004eda:	6033      	str	r3, [r6, #0]
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	069b      	lsls	r3, r3, #26
 8004ee0:	d502      	bpl.n	8004ee8 <_printf_common+0x30>
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	2306      	movs	r3, #6
 8004eec:	0015      	movs	r5, r2
 8004eee:	401d      	ands	r5, r3
 8004ef0:	421a      	tst	r2, r3
 8004ef2:	d027      	beq.n	8004f44 <_printf_common+0x8c>
 8004ef4:	0023      	movs	r3, r4
 8004ef6:	3343      	adds	r3, #67	@ 0x43
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	1e5a      	subs	r2, r3, #1
 8004efc:	4193      	sbcs	r3, r2
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	0692      	lsls	r2, r2, #26
 8004f02:	d430      	bmi.n	8004f66 <_printf_common+0xae>
 8004f04:	0022      	movs	r2, r4
 8004f06:	9901      	ldr	r1, [sp, #4]
 8004f08:	9800      	ldr	r0, [sp, #0]
 8004f0a:	9d08      	ldr	r5, [sp, #32]
 8004f0c:	3243      	adds	r2, #67	@ 0x43
 8004f0e:	47a8      	blx	r5
 8004f10:	3001      	adds	r0, #1
 8004f12:	d025      	beq.n	8004f60 <_printf_common+0xa8>
 8004f14:	2206      	movs	r2, #6
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	2500      	movs	r5, #0
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d105      	bne.n	8004f2c <_printf_common+0x74>
 8004f20:	6833      	ldr	r3, [r6, #0]
 8004f22:	68e5      	ldr	r5, [r4, #12]
 8004f24:	1aed      	subs	r5, r5, r3
 8004f26:	43eb      	mvns	r3, r5
 8004f28:	17db      	asrs	r3, r3, #31
 8004f2a:	401d      	ands	r5, r3
 8004f2c:	68a3      	ldr	r3, [r4, #8]
 8004f2e:	6922      	ldr	r2, [r4, #16]
 8004f30:	4293      	cmp	r3, r2
 8004f32:	dd01      	ble.n	8004f38 <_printf_common+0x80>
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	18ed      	adds	r5, r5, r3
 8004f38:	2600      	movs	r6, #0
 8004f3a:	42b5      	cmp	r5, r6
 8004f3c:	d120      	bne.n	8004f80 <_printf_common+0xc8>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e010      	b.n	8004f64 <_printf_common+0xac>
 8004f42:	3501      	adds	r5, #1
 8004f44:	68e3      	ldr	r3, [r4, #12]
 8004f46:	6832      	ldr	r2, [r6, #0]
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	42ab      	cmp	r3, r5
 8004f4c:	ddd2      	ble.n	8004ef4 <_printf_common+0x3c>
 8004f4e:	0022      	movs	r2, r4
 8004f50:	2301      	movs	r3, #1
 8004f52:	9901      	ldr	r1, [sp, #4]
 8004f54:	9800      	ldr	r0, [sp, #0]
 8004f56:	9f08      	ldr	r7, [sp, #32]
 8004f58:	3219      	adds	r2, #25
 8004f5a:	47b8      	blx	r7
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d1f0      	bne.n	8004f42 <_printf_common+0x8a>
 8004f60:	2001      	movs	r0, #1
 8004f62:	4240      	negs	r0, r0
 8004f64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f66:	2030      	movs	r0, #48	@ 0x30
 8004f68:	18e1      	adds	r1, r4, r3
 8004f6a:	3143      	adds	r1, #67	@ 0x43
 8004f6c:	7008      	strb	r0, [r1, #0]
 8004f6e:	0021      	movs	r1, r4
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	3145      	adds	r1, #69	@ 0x45
 8004f74:	7809      	ldrb	r1, [r1, #0]
 8004f76:	18a2      	adds	r2, r4, r2
 8004f78:	3243      	adds	r2, #67	@ 0x43
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	7011      	strb	r1, [r2, #0]
 8004f7e:	e7c1      	b.n	8004f04 <_printf_common+0x4c>
 8004f80:	0022      	movs	r2, r4
 8004f82:	2301      	movs	r3, #1
 8004f84:	9901      	ldr	r1, [sp, #4]
 8004f86:	9800      	ldr	r0, [sp, #0]
 8004f88:	9f08      	ldr	r7, [sp, #32]
 8004f8a:	321a      	adds	r2, #26
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d0e6      	beq.n	8004f60 <_printf_common+0xa8>
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7d1      	b.n	8004f3a <_printf_common+0x82>
	...

08004f98 <_printf_i>:
 8004f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9a:	b08b      	sub	sp, #44	@ 0x2c
 8004f9c:	9206      	str	r2, [sp, #24]
 8004f9e:	000a      	movs	r2, r1
 8004fa0:	3243      	adds	r2, #67	@ 0x43
 8004fa2:	9307      	str	r3, [sp, #28]
 8004fa4:	9005      	str	r0, [sp, #20]
 8004fa6:	9203      	str	r2, [sp, #12]
 8004fa8:	7e0a      	ldrb	r2, [r1, #24]
 8004faa:	000c      	movs	r4, r1
 8004fac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004fae:	2a78      	cmp	r2, #120	@ 0x78
 8004fb0:	d809      	bhi.n	8004fc6 <_printf_i+0x2e>
 8004fb2:	2a62      	cmp	r2, #98	@ 0x62
 8004fb4:	d80b      	bhi.n	8004fce <_printf_i+0x36>
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	d100      	bne.n	8004fbc <_printf_i+0x24>
 8004fba:	e0bc      	b.n	8005136 <_printf_i+0x19e>
 8004fbc:	497b      	ldr	r1, [pc, #492]	@ (80051ac <_printf_i+0x214>)
 8004fbe:	9104      	str	r1, [sp, #16]
 8004fc0:	2a58      	cmp	r2, #88	@ 0x58
 8004fc2:	d100      	bne.n	8004fc6 <_printf_i+0x2e>
 8004fc4:	e090      	b.n	80050e8 <_printf_i+0x150>
 8004fc6:	0025      	movs	r5, r4
 8004fc8:	3542      	adds	r5, #66	@ 0x42
 8004fca:	702a      	strb	r2, [r5, #0]
 8004fcc:	e022      	b.n	8005014 <_printf_i+0x7c>
 8004fce:	0010      	movs	r0, r2
 8004fd0:	3863      	subs	r0, #99	@ 0x63
 8004fd2:	2815      	cmp	r0, #21
 8004fd4:	d8f7      	bhi.n	8004fc6 <_printf_i+0x2e>
 8004fd6:	f7fb f89f 	bl	8000118 <__gnu_thumb1_case_shi>
 8004fda:	0016      	.short	0x0016
 8004fdc:	fff6001f 	.word	0xfff6001f
 8004fe0:	fff6fff6 	.word	0xfff6fff6
 8004fe4:	001ffff6 	.word	0x001ffff6
 8004fe8:	fff6fff6 	.word	0xfff6fff6
 8004fec:	fff6fff6 	.word	0xfff6fff6
 8004ff0:	003600a1 	.word	0x003600a1
 8004ff4:	fff60080 	.word	0xfff60080
 8004ff8:	00b2fff6 	.word	0x00b2fff6
 8004ffc:	0036fff6 	.word	0x0036fff6
 8005000:	fff6fff6 	.word	0xfff6fff6
 8005004:	0084      	.short	0x0084
 8005006:	0025      	movs	r5, r4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	3542      	adds	r5, #66	@ 0x42
 800500c:	1d11      	adds	r1, r2, #4
 800500e:	6019      	str	r1, [r3, #0]
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	702b      	strb	r3, [r5, #0]
 8005014:	2301      	movs	r3, #1
 8005016:	e0a0      	b.n	800515a <_printf_i+0x1c2>
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	6809      	ldr	r1, [r1, #0]
 800501c:	1d02      	adds	r2, r0, #4
 800501e:	060d      	lsls	r5, r1, #24
 8005020:	d50b      	bpl.n	800503a <_printf_i+0xa2>
 8005022:	6806      	ldr	r6, [r0, #0]
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	2e00      	cmp	r6, #0
 8005028:	da03      	bge.n	8005032 <_printf_i+0x9a>
 800502a:	232d      	movs	r3, #45	@ 0x2d
 800502c:	9a03      	ldr	r2, [sp, #12]
 800502e:	4276      	negs	r6, r6
 8005030:	7013      	strb	r3, [r2, #0]
 8005032:	4b5e      	ldr	r3, [pc, #376]	@ (80051ac <_printf_i+0x214>)
 8005034:	270a      	movs	r7, #10
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	e018      	b.n	800506c <_printf_i+0xd4>
 800503a:	6806      	ldr	r6, [r0, #0]
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	0649      	lsls	r1, r1, #25
 8005040:	d5f1      	bpl.n	8005026 <_printf_i+0x8e>
 8005042:	b236      	sxth	r6, r6
 8005044:	e7ef      	b.n	8005026 <_printf_i+0x8e>
 8005046:	6808      	ldr	r0, [r1, #0]
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	c940      	ldmia	r1!, {r6}
 800504c:	0605      	lsls	r5, r0, #24
 800504e:	d402      	bmi.n	8005056 <_printf_i+0xbe>
 8005050:	0640      	lsls	r0, r0, #25
 8005052:	d500      	bpl.n	8005056 <_printf_i+0xbe>
 8005054:	b2b6      	uxth	r6, r6
 8005056:	6019      	str	r1, [r3, #0]
 8005058:	4b54      	ldr	r3, [pc, #336]	@ (80051ac <_printf_i+0x214>)
 800505a:	270a      	movs	r7, #10
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005060:	d100      	bne.n	8005064 <_printf_i+0xcc>
 8005062:	3f02      	subs	r7, #2
 8005064:	0023      	movs	r3, r4
 8005066:	2200      	movs	r2, #0
 8005068:	3343      	adds	r3, #67	@ 0x43
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	60a3      	str	r3, [r4, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	db03      	blt.n	800507c <_printf_i+0xe4>
 8005074:	2104      	movs	r1, #4
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	438a      	bics	r2, r1
 800507a:	6022      	str	r2, [r4, #0]
 800507c:	2e00      	cmp	r6, #0
 800507e:	d102      	bne.n	8005086 <_printf_i+0xee>
 8005080:	9d03      	ldr	r5, [sp, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00c      	beq.n	80050a0 <_printf_i+0x108>
 8005086:	9d03      	ldr	r5, [sp, #12]
 8005088:	0030      	movs	r0, r6
 800508a:	0039      	movs	r1, r7
 800508c:	f7fb f8d4 	bl	8000238 <__aeabi_uidivmod>
 8005090:	9b04      	ldr	r3, [sp, #16]
 8005092:	3d01      	subs	r5, #1
 8005094:	5c5b      	ldrb	r3, [r3, r1]
 8005096:	702b      	strb	r3, [r5, #0]
 8005098:	0033      	movs	r3, r6
 800509a:	0006      	movs	r6, r0
 800509c:	429f      	cmp	r7, r3
 800509e:	d9f3      	bls.n	8005088 <_printf_i+0xf0>
 80050a0:	2f08      	cmp	r7, #8
 80050a2:	d109      	bne.n	80050b8 <_printf_i+0x120>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	07db      	lsls	r3, r3, #31
 80050a8:	d506      	bpl.n	80050b8 <_printf_i+0x120>
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	dc02      	bgt.n	80050b8 <_printf_i+0x120>
 80050b2:	2330      	movs	r3, #48	@ 0x30
 80050b4:	3d01      	subs	r5, #1
 80050b6:	702b      	strb	r3, [r5, #0]
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	1b5b      	subs	r3, r3, r5
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	9b07      	ldr	r3, [sp, #28]
 80050c0:	0021      	movs	r1, r4
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	9805      	ldr	r0, [sp, #20]
 80050c6:	9b06      	ldr	r3, [sp, #24]
 80050c8:	aa09      	add	r2, sp, #36	@ 0x24
 80050ca:	f7ff fef5 	bl	8004eb8 <_printf_common>
 80050ce:	3001      	adds	r0, #1
 80050d0:	d148      	bne.n	8005164 <_printf_i+0x1cc>
 80050d2:	2001      	movs	r0, #1
 80050d4:	4240      	negs	r0, r0
 80050d6:	b00b      	add	sp, #44	@ 0x2c
 80050d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050da:	2220      	movs	r2, #32
 80050dc:	6809      	ldr	r1, [r1, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	6022      	str	r2, [r4, #0]
 80050e2:	2278      	movs	r2, #120	@ 0x78
 80050e4:	4932      	ldr	r1, [pc, #200]	@ (80051b0 <_printf_i+0x218>)
 80050e6:	9104      	str	r1, [sp, #16]
 80050e8:	0021      	movs	r1, r4
 80050ea:	3145      	adds	r1, #69	@ 0x45
 80050ec:	700a      	strb	r2, [r1, #0]
 80050ee:	6819      	ldr	r1, [r3, #0]
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	c940      	ldmia	r1!, {r6}
 80050f4:	0610      	lsls	r0, r2, #24
 80050f6:	d402      	bmi.n	80050fe <_printf_i+0x166>
 80050f8:	0650      	lsls	r0, r2, #25
 80050fa:	d500      	bpl.n	80050fe <_printf_i+0x166>
 80050fc:	b2b6      	uxth	r6, r6
 80050fe:	6019      	str	r1, [r3, #0]
 8005100:	07d3      	lsls	r3, r2, #31
 8005102:	d502      	bpl.n	800510a <_printf_i+0x172>
 8005104:	2320      	movs	r3, #32
 8005106:	4313      	orrs	r3, r2
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	2e00      	cmp	r6, #0
 800510c:	d001      	beq.n	8005112 <_printf_i+0x17a>
 800510e:	2710      	movs	r7, #16
 8005110:	e7a8      	b.n	8005064 <_printf_i+0xcc>
 8005112:	2220      	movs	r2, #32
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	4393      	bics	r3, r2
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	e7f8      	b.n	800510e <_printf_i+0x176>
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	680d      	ldr	r5, [r1, #0]
 8005120:	1d10      	adds	r0, r2, #4
 8005122:	6949      	ldr	r1, [r1, #20]
 8005124:	6018      	str	r0, [r3, #0]
 8005126:	6813      	ldr	r3, [r2, #0]
 8005128:	062e      	lsls	r6, r5, #24
 800512a:	d501      	bpl.n	8005130 <_printf_i+0x198>
 800512c:	6019      	str	r1, [r3, #0]
 800512e:	e002      	b.n	8005136 <_printf_i+0x19e>
 8005130:	066d      	lsls	r5, r5, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0x194>
 8005134:	8019      	strh	r1, [r3, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	9d03      	ldr	r5, [sp, #12]
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	e7bf      	b.n	80050be <_printf_i+0x126>
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	1d11      	adds	r1, r2, #4
 8005142:	6019      	str	r1, [r3, #0]
 8005144:	6815      	ldr	r5, [r2, #0]
 8005146:	2100      	movs	r1, #0
 8005148:	0028      	movs	r0, r5
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	f000 f91c 	bl	8005388 <memchr>
 8005150:	2800      	cmp	r0, #0
 8005152:	d001      	beq.n	8005158 <_printf_i+0x1c0>
 8005154:	1b40      	subs	r0, r0, r5
 8005156:	6060      	str	r0, [r4, #4]
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	2300      	movs	r3, #0
 800515e:	9a03      	ldr	r2, [sp, #12]
 8005160:	7013      	strb	r3, [r2, #0]
 8005162:	e7ac      	b.n	80050be <_printf_i+0x126>
 8005164:	002a      	movs	r2, r5
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	9906      	ldr	r1, [sp, #24]
 800516a:	9805      	ldr	r0, [sp, #20]
 800516c:	9d07      	ldr	r5, [sp, #28]
 800516e:	47a8      	blx	r5
 8005170:	3001      	adds	r0, #1
 8005172:	d0ae      	beq.n	80050d2 <_printf_i+0x13a>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	079b      	lsls	r3, r3, #30
 8005178:	d415      	bmi.n	80051a6 <_printf_i+0x20e>
 800517a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800517c:	68e0      	ldr	r0, [r4, #12]
 800517e:	4298      	cmp	r0, r3
 8005180:	daa9      	bge.n	80050d6 <_printf_i+0x13e>
 8005182:	0018      	movs	r0, r3
 8005184:	e7a7      	b.n	80050d6 <_printf_i+0x13e>
 8005186:	0022      	movs	r2, r4
 8005188:	2301      	movs	r3, #1
 800518a:	9906      	ldr	r1, [sp, #24]
 800518c:	9805      	ldr	r0, [sp, #20]
 800518e:	9e07      	ldr	r6, [sp, #28]
 8005190:	3219      	adds	r2, #25
 8005192:	47b0      	blx	r6
 8005194:	3001      	adds	r0, #1
 8005196:	d09c      	beq.n	80050d2 <_printf_i+0x13a>
 8005198:	3501      	adds	r5, #1
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	42ab      	cmp	r3, r5
 80051a2:	dcf0      	bgt.n	8005186 <_printf_i+0x1ee>
 80051a4:	e7e9      	b.n	800517a <_printf_i+0x1e2>
 80051a6:	2500      	movs	r5, #0
 80051a8:	e7f7      	b.n	800519a <_printf_i+0x202>
 80051aa:	46c0      	nop			@ (mov r8, r8)
 80051ac:	08005ad4 	.word	0x08005ad4
 80051b0:	08005ae5 	.word	0x08005ae5

080051b4 <__swbuf_r>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	0006      	movs	r6, r0
 80051b8:	000d      	movs	r5, r1
 80051ba:	0014      	movs	r4, r2
 80051bc:	2800      	cmp	r0, #0
 80051be:	d004      	beq.n	80051ca <__swbuf_r+0x16>
 80051c0:	6a03      	ldr	r3, [r0, #32]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <__swbuf_r+0x16>
 80051c6:	f7ff fa31 	bl	800462c <__sinit>
 80051ca:	69a3      	ldr	r3, [r4, #24]
 80051cc:	60a3      	str	r3, [r4, #8]
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	071b      	lsls	r3, r3, #28
 80051d2:	d502      	bpl.n	80051da <__swbuf_r+0x26>
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <__swbuf_r+0x3a>
 80051da:	0021      	movs	r1, r4
 80051dc:	0030      	movs	r0, r6
 80051de:	f000 f82b 	bl	8005238 <__swsetup_r>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d003      	beq.n	80051ee <__swbuf_r+0x3a>
 80051e6:	2501      	movs	r5, #1
 80051e8:	426d      	negs	r5, r5
 80051ea:	0028      	movs	r0, r5
 80051ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	b2ef      	uxtb	r7, r5
 80051f4:	1ac0      	subs	r0, r0, r3
 80051f6:	6963      	ldr	r3, [r4, #20]
 80051f8:	b2ed      	uxtb	r5, r5
 80051fa:	4283      	cmp	r3, r0
 80051fc:	dc05      	bgt.n	800520a <__swbuf_r+0x56>
 80051fe:	0021      	movs	r1, r4
 8005200:	0030      	movs	r0, r6
 8005202:	f7ff fcc1 	bl	8004b88 <_fflush_r>
 8005206:	2800      	cmp	r0, #0
 8005208:	d1ed      	bne.n	80051e6 <__swbuf_r+0x32>
 800520a:	68a3      	ldr	r3, [r4, #8]
 800520c:	3001      	adds	r0, #1
 800520e:	3b01      	subs	r3, #1
 8005210:	60a3      	str	r3, [r4, #8]
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	6022      	str	r2, [r4, #0]
 8005218:	701f      	strb	r7, [r3, #0]
 800521a:	6963      	ldr	r3, [r4, #20]
 800521c:	4283      	cmp	r3, r0
 800521e:	d004      	beq.n	800522a <__swbuf_r+0x76>
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	07db      	lsls	r3, r3, #31
 8005224:	d5e1      	bpl.n	80051ea <__swbuf_r+0x36>
 8005226:	2d0a      	cmp	r5, #10
 8005228:	d1df      	bne.n	80051ea <__swbuf_r+0x36>
 800522a:	0021      	movs	r1, r4
 800522c:	0030      	movs	r0, r6
 800522e:	f7ff fcab 	bl	8004b88 <_fflush_r>
 8005232:	2800      	cmp	r0, #0
 8005234:	d0d9      	beq.n	80051ea <__swbuf_r+0x36>
 8005236:	e7d6      	b.n	80051e6 <__swbuf_r+0x32>

08005238 <__swsetup_r>:
 8005238:	4b2d      	ldr	r3, [pc, #180]	@ (80052f0 <__swsetup_r+0xb8>)
 800523a:	b570      	push	{r4, r5, r6, lr}
 800523c:	0005      	movs	r5, r0
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	000c      	movs	r4, r1
 8005242:	2800      	cmp	r0, #0
 8005244:	d004      	beq.n	8005250 <__swsetup_r+0x18>
 8005246:	6a03      	ldr	r3, [r0, #32]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <__swsetup_r+0x18>
 800524c:	f7ff f9ee 	bl	800462c <__sinit>
 8005250:	230c      	movs	r3, #12
 8005252:	5ee2      	ldrsh	r2, [r4, r3]
 8005254:	0713      	lsls	r3, r2, #28
 8005256:	d423      	bmi.n	80052a0 <__swsetup_r+0x68>
 8005258:	06d3      	lsls	r3, r2, #27
 800525a:	d407      	bmi.n	800526c <__swsetup_r+0x34>
 800525c:	2309      	movs	r3, #9
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	2340      	movs	r3, #64	@ 0x40
 8005262:	2001      	movs	r0, #1
 8005264:	4313      	orrs	r3, r2
 8005266:	81a3      	strh	r3, [r4, #12]
 8005268:	4240      	negs	r0, r0
 800526a:	e03a      	b.n	80052e2 <__swsetup_r+0xaa>
 800526c:	0752      	lsls	r2, r2, #29
 800526e:	d513      	bpl.n	8005298 <__swsetup_r+0x60>
 8005270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005272:	2900      	cmp	r1, #0
 8005274:	d008      	beq.n	8005288 <__swsetup_r+0x50>
 8005276:	0023      	movs	r3, r4
 8005278:	3344      	adds	r3, #68	@ 0x44
 800527a:	4299      	cmp	r1, r3
 800527c:	d002      	beq.n	8005284 <__swsetup_r+0x4c>
 800527e:	0028      	movs	r0, r5
 8005280:	f7ff faf6 	bl	8004870 <_free_r>
 8005284:	2300      	movs	r3, #0
 8005286:	6363      	str	r3, [r4, #52]	@ 0x34
 8005288:	2224      	movs	r2, #36	@ 0x24
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	4393      	bics	r3, r2
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	2300      	movs	r3, #0
 8005292:	6063      	str	r3, [r4, #4]
 8005294:	6923      	ldr	r3, [r4, #16]
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	2308      	movs	r3, #8
 800529a:	89a2      	ldrh	r2, [r4, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <__swsetup_r+0x86>
 80052a6:	21a0      	movs	r1, #160	@ 0xa0
 80052a8:	2280      	movs	r2, #128	@ 0x80
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	0089      	lsls	r1, r1, #2
 80052ae:	0092      	lsls	r2, r2, #2
 80052b0:	400b      	ands	r3, r1
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <__swsetup_r+0x86>
 80052b6:	0021      	movs	r1, r4
 80052b8:	0028      	movs	r0, r5
 80052ba:	f000 f89b 	bl	80053f4 <__smakebuf_r>
 80052be:	230c      	movs	r3, #12
 80052c0:	5ee2      	ldrsh	r2, [r4, r3]
 80052c2:	2101      	movs	r1, #1
 80052c4:	0013      	movs	r3, r2
 80052c6:	400b      	ands	r3, r1
 80052c8:	420a      	tst	r2, r1
 80052ca:	d00b      	beq.n	80052e4 <__swsetup_r+0xac>
 80052cc:	2300      	movs	r3, #0
 80052ce:	60a3      	str	r3, [r4, #8]
 80052d0:	6963      	ldr	r3, [r4, #20]
 80052d2:	425b      	negs	r3, r3
 80052d4:	61a3      	str	r3, [r4, #24]
 80052d6:	2000      	movs	r0, #0
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	4283      	cmp	r3, r0
 80052dc:	d101      	bne.n	80052e2 <__swsetup_r+0xaa>
 80052de:	0613      	lsls	r3, r2, #24
 80052e0:	d4be      	bmi.n	8005260 <__swsetup_r+0x28>
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	0791      	lsls	r1, r2, #30
 80052e6:	d400      	bmi.n	80052ea <__swsetup_r+0xb2>
 80052e8:	6963      	ldr	r3, [r4, #20]
 80052ea:	60a3      	str	r3, [r4, #8]
 80052ec:	e7f3      	b.n	80052d6 <__swsetup_r+0x9e>
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	20000020 	.word	0x20000020

080052f4 <_raise_r>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	0004      	movs	r4, r0
 80052f8:	000d      	movs	r5, r1
 80052fa:	291f      	cmp	r1, #31
 80052fc:	d904      	bls.n	8005308 <_raise_r+0x14>
 80052fe:	2316      	movs	r3, #22
 8005300:	6003      	str	r3, [r0, #0]
 8005302:	2001      	movs	r0, #1
 8005304:	4240      	negs	r0, r0
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <_raise_r+0x24>
 800530e:	008a      	lsls	r2, r1, #2
 8005310:	189b      	adds	r3, r3, r2
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2a00      	cmp	r2, #0
 8005316:	d108      	bne.n	800532a <_raise_r+0x36>
 8005318:	0020      	movs	r0, r4
 800531a:	f000 f831 	bl	8005380 <_getpid_r>
 800531e:	002a      	movs	r2, r5
 8005320:	0001      	movs	r1, r0
 8005322:	0020      	movs	r0, r4
 8005324:	f000 f81a 	bl	800535c <_kill_r>
 8005328:	e7ed      	b.n	8005306 <_raise_r+0x12>
 800532a:	2a01      	cmp	r2, #1
 800532c:	d009      	beq.n	8005342 <_raise_r+0x4e>
 800532e:	1c51      	adds	r1, r2, #1
 8005330:	d103      	bne.n	800533a <_raise_r+0x46>
 8005332:	2316      	movs	r3, #22
 8005334:	6003      	str	r3, [r0, #0]
 8005336:	2001      	movs	r0, #1
 8005338:	e7e5      	b.n	8005306 <_raise_r+0x12>
 800533a:	2100      	movs	r1, #0
 800533c:	0028      	movs	r0, r5
 800533e:	6019      	str	r1, [r3, #0]
 8005340:	4790      	blx	r2
 8005342:	2000      	movs	r0, #0
 8005344:	e7df      	b.n	8005306 <_raise_r+0x12>
	...

08005348 <raise>:
 8005348:	b510      	push	{r4, lr}
 800534a:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <raise+0x10>)
 800534c:	0001      	movs	r1, r0
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	f7ff ffd0 	bl	80052f4 <_raise_r>
 8005354:	bd10      	pop	{r4, pc}
 8005356:	46c0      	nop			@ (mov r8, r8)
 8005358:	20000020 	.word	0x20000020

0800535c <_kill_r>:
 800535c:	2300      	movs	r3, #0
 800535e:	b570      	push	{r4, r5, r6, lr}
 8005360:	4d06      	ldr	r5, [pc, #24]	@ (800537c <_kill_r+0x20>)
 8005362:	0004      	movs	r4, r0
 8005364:	0008      	movs	r0, r1
 8005366:	0011      	movs	r1, r2
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	f7fe feab 	bl	80040c4 <_kill>
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	d103      	bne.n	800537a <_kill_r+0x1e>
 8005372:	682b      	ldr	r3, [r5, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d000      	beq.n	800537a <_kill_r+0x1e>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	20000418 	.word	0x20000418

08005380 <_getpid_r>:
 8005380:	b510      	push	{r4, lr}
 8005382:	f7fe fe99 	bl	80040b8 <_getpid>
 8005386:	bd10      	pop	{r4, pc}

08005388 <memchr>:
 8005388:	b2c9      	uxtb	r1, r1
 800538a:	1882      	adds	r2, r0, r2
 800538c:	4290      	cmp	r0, r2
 800538e:	d101      	bne.n	8005394 <memchr+0xc>
 8005390:	2000      	movs	r0, #0
 8005392:	4770      	bx	lr
 8005394:	7803      	ldrb	r3, [r0, #0]
 8005396:	428b      	cmp	r3, r1
 8005398:	d0fb      	beq.n	8005392 <memchr+0xa>
 800539a:	3001      	adds	r0, #1
 800539c:	e7f6      	b.n	800538c <memchr+0x4>
	...

080053a0 <__swhatbuf_r>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	000e      	movs	r6, r1
 80053a4:	001d      	movs	r5, r3
 80053a6:	230e      	movs	r3, #14
 80053a8:	5ec9      	ldrsh	r1, [r1, r3]
 80053aa:	0014      	movs	r4, r2
 80053ac:	b096      	sub	sp, #88	@ 0x58
 80053ae:	2900      	cmp	r1, #0
 80053b0:	da0c      	bge.n	80053cc <__swhatbuf_r+0x2c>
 80053b2:	89b2      	ldrh	r2, [r6, #12]
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	0011      	movs	r1, r2
 80053b8:	4019      	ands	r1, r3
 80053ba:	421a      	tst	r2, r3
 80053bc:	d114      	bne.n	80053e8 <__swhatbuf_r+0x48>
 80053be:	2380      	movs	r3, #128	@ 0x80
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	2000      	movs	r0, #0
 80053c4:	6029      	str	r1, [r5, #0]
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	b016      	add	sp, #88	@ 0x58
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	466a      	mov	r2, sp
 80053ce:	f000 f853 	bl	8005478 <_fstat_r>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	dbed      	blt.n	80053b2 <__swhatbuf_r+0x12>
 80053d6:	23f0      	movs	r3, #240	@ 0xf0
 80053d8:	9901      	ldr	r1, [sp, #4]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	4019      	ands	r1, r3
 80053de:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <__swhatbuf_r+0x50>)
 80053e0:	18c9      	adds	r1, r1, r3
 80053e2:	424b      	negs	r3, r1
 80053e4:	4159      	adcs	r1, r3
 80053e6:	e7ea      	b.n	80053be <__swhatbuf_r+0x1e>
 80053e8:	2100      	movs	r1, #0
 80053ea:	2340      	movs	r3, #64	@ 0x40
 80053ec:	e7e9      	b.n	80053c2 <__swhatbuf_r+0x22>
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	ffffe000 	.word	0xffffe000

080053f4 <__smakebuf_r>:
 80053f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f6:	2602      	movs	r6, #2
 80053f8:	898b      	ldrh	r3, [r1, #12]
 80053fa:	0005      	movs	r5, r0
 80053fc:	000c      	movs	r4, r1
 80053fe:	b085      	sub	sp, #20
 8005400:	4233      	tst	r3, r6
 8005402:	d007      	beq.n	8005414 <__smakebuf_r+0x20>
 8005404:	0023      	movs	r3, r4
 8005406:	3347      	adds	r3, #71	@ 0x47
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	2301      	movs	r3, #1
 800540e:	6163      	str	r3, [r4, #20]
 8005410:	b005      	add	sp, #20
 8005412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005414:	ab03      	add	r3, sp, #12
 8005416:	aa02      	add	r2, sp, #8
 8005418:	f7ff ffc2 	bl	80053a0 <__swhatbuf_r>
 800541c:	9f02      	ldr	r7, [sp, #8]
 800541e:	9001      	str	r0, [sp, #4]
 8005420:	0039      	movs	r1, r7
 8005422:	0028      	movs	r0, r5
 8005424:	f7ff fa9a 	bl	800495c <_malloc_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	d108      	bne.n	800543e <__smakebuf_r+0x4a>
 800542c:	220c      	movs	r2, #12
 800542e:	5ea3      	ldrsh	r3, [r4, r2]
 8005430:	059a      	lsls	r2, r3, #22
 8005432:	d4ed      	bmi.n	8005410 <__smakebuf_r+0x1c>
 8005434:	2203      	movs	r2, #3
 8005436:	4393      	bics	r3, r2
 8005438:	431e      	orrs	r6, r3
 800543a:	81a6      	strh	r6, [r4, #12]
 800543c:	e7e2      	b.n	8005404 <__smakebuf_r+0x10>
 800543e:	2380      	movs	r3, #128	@ 0x80
 8005440:	89a2      	ldrh	r2, [r4, #12]
 8005442:	6020      	str	r0, [r4, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	6120      	str	r0, [r4, #16]
 800544c:	6167      	str	r7, [r4, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <__smakebuf_r+0x78>
 8005452:	0028      	movs	r0, r5
 8005454:	230e      	movs	r3, #14
 8005456:	5ee1      	ldrsh	r1, [r4, r3]
 8005458:	f000 f820 	bl	800549c <_isatty_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	d005      	beq.n	800546c <__smakebuf_r+0x78>
 8005460:	2303      	movs	r3, #3
 8005462:	89a2      	ldrh	r2, [r4, #12]
 8005464:	439a      	bics	r2, r3
 8005466:	3b02      	subs	r3, #2
 8005468:	4313      	orrs	r3, r2
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	9a01      	ldr	r2, [sp, #4]
 8005470:	4313      	orrs	r3, r2
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	e7cc      	b.n	8005410 <__smakebuf_r+0x1c>
	...

08005478 <_fstat_r>:
 8005478:	2300      	movs	r3, #0
 800547a:	b570      	push	{r4, r5, r6, lr}
 800547c:	4d06      	ldr	r5, [pc, #24]	@ (8005498 <_fstat_r+0x20>)
 800547e:	0004      	movs	r4, r0
 8005480:	0008      	movs	r0, r1
 8005482:	0011      	movs	r1, r2
 8005484:	602b      	str	r3, [r5, #0]
 8005486:	f7fe fe7d 	bl	8004184 <_fstat>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	d103      	bne.n	8005496 <_fstat_r+0x1e>
 800548e:	682b      	ldr	r3, [r5, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d000      	beq.n	8005496 <_fstat_r+0x1e>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	20000418 	.word	0x20000418

0800549c <_isatty_r>:
 800549c:	2300      	movs	r3, #0
 800549e:	b570      	push	{r4, r5, r6, lr}
 80054a0:	4d06      	ldr	r5, [pc, #24]	@ (80054bc <_isatty_r+0x20>)
 80054a2:	0004      	movs	r4, r0
 80054a4:	0008      	movs	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fe fe7a 	bl	80041a0 <_isatty>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d103      	bne.n	80054b8 <_isatty_r+0x1c>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d000      	beq.n	80054b8 <_isatty_r+0x1c>
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	20000418 	.word	0x20000418

080054c0 <_init>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr

080054cc <_fini>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr
